{"version":3,"file":"filters-DEkFSYM8.js","names":["params: FetchFiltersParams","params: FiltersQueryOptions"],"sources":["../src/react/queries/filters.ts"],"sourcesContent":["import type { PropertyFilter } from '@0xsequence/metadata';\nimport { queryOptions } from '@tanstack/react-query';\nimport { FilterCondition, type SdkConfig } from '../../types';\nimport { compareAddress } from '../../utils';\nimport {\n\tgetMetadataClient,\n\tgetQueryClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\nimport { marketplaceConfigOptions } from './marketplaceConfig';\n\nexport interface FetchFiltersParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tshowAllFilters?: boolean;\n\texcludePropertyValues?: boolean;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collection filters from the Metadata API with optional marketplace filtering\n */\nexport async function fetchFilters(\n\tparams: FetchFiltersParams,\n): Promise<PropertyFilter[]> {\n\tconst {\n\t\tchainId,\n\t\tcollectionAddress,\n\t\tshowAllFilters,\n\t\texcludePropertyValues,\n\t\tconfig,\n\t} = params;\n\n\tconst metadataClient = getMetadataClient(config);\n\n\tconst filters = await metadataClient\n\t\t.getTokenMetadataPropertyFilters({\n\t\t\tchainID: chainId.toString(),\n\t\t\tcontractAddress: collectionAddress,\n\t\t\texcludeProperties: [],\n\t\t\texcludePropertyValues,\n\t\t})\n\t\t.then((resp) => resp.filters);\n\n\tif (showAllFilters) return filters;\n\n\tconst queryClient = getQueryClient();\n\tconst marketplaceConfig = await queryClient.fetchQuery(\n\t\tmarketplaceConfigOptions(config),\n\t);\n\tconst collectionFilters = marketplaceConfig.market.collections.find((c) =>\n\t\tcompareAddress(c.itemsAddress, collectionAddress),\n\t)?.filterSettings;\n\n\tif (\n\t\t!collectionFilters?.exclusions ||\n\t\tcollectionFilters.exclusions.length === 0 ||\n\t\t!collectionFilters.filterOrder ||\n\t\tcollectionFilters.filterOrder.length === 0\n\t)\n\t\treturn filters;\n\n\tconst { filterOrder, exclusions } = collectionFilters;\n\n\tconst sortedFilters = filters.toSorted((a, b) => {\n\t\tconst aIndex =\n\t\t\tfilterOrder.indexOf(a.name) > -1\n\t\t\t\t? filterOrder.indexOf(a.name)\n\t\t\t\t: filterOrder.length;\n\t\tconst bIndex =\n\t\t\tfilterOrder.indexOf(b.name) > -1\n\t\t\t\t? filterOrder.indexOf(b.name)\n\t\t\t\t: filterOrder.length;\n\t\treturn aIndex - bIndex;\n\t});\n\n\tconst filteredResults = sortedFilters.reduce<PropertyFilter[]>(\n\t\t(acc, filter) => {\n\t\t\tconst exclusionRule = exclusions.find((rule) => rule.key === filter.name);\n\n\t\t\tif (!exclusionRule) {\n\t\t\t\tacc.push(filter);\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\tif (exclusionRule.condition === FilterCondition.ENTIRE_KEY) {\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\texclusionRule.condition === FilterCondition.SPECIFIC_VALUE &&\n\t\t\t\texclusionRule.value\n\t\t\t) {\n\t\t\t\tconst filteredValues =\n\t\t\t\t\tfilter.values?.filter((value) => value !== exclusionRule.value) || [];\n\t\t\t\tif (filteredValues.length > 0) {\n\t\t\t\t\tacc.push({ ...filter, values: filteredValues });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn acc;\n\t\t},\n\t\t[],\n\t);\n\n\treturn filteredResults;\n}\n\nexport type FiltersQueryOptions = ValuesOptional<FetchFiltersParams> & {\n\tquery?: StandardQueryOptions;\n};\n\nexport function filtersQueryOptions(params: FiltersQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['filters', params],\n\t\tqueryFn: () =>\n\t\t\tfetchFilters({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\tshowAllFilters: params.showAllFilters,\n\t\t\t\texcludePropertyValues: params.excludePropertyValues,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n"],"mappings":";;;;;;;;;;;AAuBA,eAAsB,aACrBA,QAC4B;CAC5B,MAAM,EACL,SACA,mBACA,gBACA,uBACA,QACA,GAAG;CAEJ,MAAM,iBAAiB,kBAAkB,OAAO;CAEhD,MAAM,UAAU,MAAM,eACpB,gCAAgC;EAChC,SAAS,QAAQ,UAAU;EAC3B,iBAAiB;EACjB,mBAAmB,CAAE;EACrB;CACA,EAAC,CACD,KAAK,CAAC,SAAS,KAAK,QAAQ;AAE9B,KAAI,eAAgB,QAAO;CAE3B,MAAM,cAAc,gBAAgB;CACpC,MAAM,oBAAoB,MAAM,YAAY,WAC3C,yBAAyB,OAAO,CAChC;CACD,MAAM,oBAAoB,kBAAkB,OAAO,YAAY,KAAK,CAAC,MACpE,eAAe,EAAE,cAAc,kBAAkB,CACjD,EAAE;AAEH,MACE,mBAAmB,cACpB,kBAAkB,WAAW,WAAW,MACvC,kBAAkB,eACnB,kBAAkB,YAAY,WAAW,EAEzC,QAAO;CAER,MAAM,EAAE,aAAa,YAAY,GAAG;CAEpC,MAAM,gBAAgB,QAAQ,SAAS,CAAC,GAAG,MAAM;EAChD,MAAM,SACL,YAAY,QAAQ,EAAE,KAAK,GAAG,KAC3B,YAAY,QAAQ,EAAE,KAAK,GAC3B,YAAY;EAChB,MAAM,SACL,YAAY,QAAQ,EAAE,KAAK,GAAG,KAC3B,YAAY,QAAQ,EAAE,KAAK,GAC3B,YAAY;AAChB,SAAO,SAAS;CAChB,EAAC;CAEF,MAAM,kBAAkB,cAAc,OACrC,CAAC,KAAK,WAAW;EAChB,MAAM,gBAAgB,WAAW,KAAK,CAAC,SAAS,KAAK,QAAQ,OAAO,KAAK;AAEzE,OAAK,eAAe;AACnB,OAAI,KAAK,OAAO;AAChB,UAAO;EACP;AAED,MAAI,cAAc,cAAc,gBAAgB,WAC/C,QAAO;AAGR,MACC,cAAc,cAAc,gBAAgB,kBAC5C,cAAc,OACb;GACD,MAAM,iBACL,OAAO,QAAQ,OAAO,CAAC,UAAU,UAAU,cAAc,MAAM,IAAI,CAAE;AACtE,OAAI,eAAe,SAAS,EAC3B,KAAI,KAAK;IAAE,GAAG;IAAQ,QAAQ;GAAgB,EAAC;EAEhD;AAED,SAAO;CACP,GACD,CAAE,EACF;AAED,QAAO;AACP;AAMD,SAAgB,oBAAoBC,QAA6B;CAChE,MAAM,UAAU,QACf,OAAO,WACN,OAAO,qBACP,OAAO,WACN,OAAO,OAAO,WAAW,MAC3B;AAED,QAAO,aAAa;EACnB,UAAU,CAAC,WAAW,MAAO;EAC7B,SAAS,MACR,aAAa;GAEZ,SAAS,OAAO;GAEhB,mBAAmB,OAAO;GAC1B,gBAAgB,OAAO;GACvB,uBAAuB,OAAO;GAE9B,QAAQ,OAAO;EACf,EAAC;EACH,GAAG,OAAO;EACV;CACA,EAAC;AACF"}