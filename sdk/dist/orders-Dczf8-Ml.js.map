{"version":3,"file":"orders-Dczf8-Ml.js","names":["params: UseCountListingsForCollectibleParams","queryOptions","params: UseCountOffersForCollectibleParams","queryOptions","params: UseFloorOrderParams","queryOptions","params: UseHighestOfferParams","queryOptions","params: UseListListingsForCollectibleParams","queryOptions","config: SdkConfig","args: UseListOffersForCollectibleArgs","params: UseLowestListingParams","queryOptions"],"sources":["../src/react/hooks/data/orders/useCountListingsForCollectible.tsx","../src/react/hooks/data/orders/useCountOffersForCollectible.tsx","../src/react/hooks/data/orders/useFloorOrder.tsx","../src/react/hooks/data/orders/useHighestOffer.tsx","../src/react/hooks/data/orders/useListListingsForCollectible.tsx","../src/react/hooks/data/orders/useListOffersForCollectible.tsx","../src/react/hooks/data/orders/useLowestListing.tsx"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype CountListingsForCollectibleQueryOptions,\n\tcountListingsForCollectibleQueryOptions,\n\ttype FetchCountListingsForCollectibleParams,\n} from '../../../queries/countListingsForCollectible';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseCountListingsForCollectibleParams = Optional<\n\tCountListingsForCollectibleQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to get the count of listings for a specific collectible\n *\n * Counts the number of active listings for a given collectible in the marketplace.\n * Useful for displaying listing counts in UI components.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.collectibleId - The specific collectible/token ID\n * @param params.filter - Optional filter criteria for listings\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the count of listings\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: listingCount, isLoading } = useCountListingsForCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   collectibleId: '123'\n * })\n * ```\n *\n * @example\n * With filter:\n * ```typescript\n * const { data: filteredCount } = useCountListingsForCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   collectibleId: '123',\n *   filter: { priceRange: { min: '1000000000000000000' } }\n * })\n * ```\n */\nexport function useCountListingsForCollectible(\n\tparams: UseCountListingsForCollectibleParams,\n) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = countListingsForCollectibleQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { countListingsForCollectibleQueryOptions };\n\nexport type {\n\tFetchCountListingsForCollectibleParams,\n\tCountListingsForCollectibleQueryOptions,\n};\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype CountOffersForCollectibleQueryOptions,\n\tcountOffersForCollectibleQueryOptions,\n\ttype FetchCountOffersForCollectibleParams,\n} from '../../../queries/countOffersForCollectible';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseCountOffersForCollectibleParams = Optional<\n\tCountOffersForCollectibleQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to get the count of offers for a specific collectible\n *\n * Counts the number of active offers for a given collectible in the marketplace.\n * Useful for displaying offer counts in UI components.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.collectibleId - The specific collectible/token ID\n * @param params.filter - Optional filter criteria for offers\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the count of offers\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: offerCount, isLoading } = useCountOffersForCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   collectibleId: '123'\n * })\n * ```\n *\n * @example\n * With filter:\n * ```typescript\n * const { data: filteredCount } = useCountOffersForCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   collectibleId: '123',\n *   filter: { priceRange: { min: '1000000000000000000' } }\n * })\n * ```\n */\nexport function useCountOffersForCollectible(\n\tparams: UseCountOffersForCollectibleParams,\n) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = countOffersForCollectibleQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { countOffersForCollectibleQueryOptions };\n\nexport type {\n\tFetchCountOffersForCollectibleParams,\n\tCountOffersForCollectibleQueryOptions,\n};\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchFloorOrderParams,\n\ttype FloorOrderQueryOptions,\n\tfloorOrderQueryOptions,\n} from '../../../queries/floorOrder';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseFloorOrderParams = Optional<FloorOrderQueryOptions, 'config'>;\n\n/**\n * Hook to fetch the floor order for a collection\n *\n * Retrieves the lowest priced order (listing) currently available for any token\n * in the specified collection from the marketplace.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.filter - Optional filter criteria for collectibles\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the floor order data for the collection\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useFloorOrder({\n *   chainId: 137,\n *   collectionAddress: '0x...'\n * })\n * ```\n *\n * @example\n * With filters and custom query options:\n * ```typescript\n * const { data, isLoading } = useFloorOrder({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   filter: {\n *     minPrice: '1000000000000000000' // 1 ETH in wei\n *   },\n *   query: {\n *     refetchInterval: 30000,\n *     enabled: hasCollectionAddress\n *   }\n * })\n * ```\n */\nexport function useFloorOrder(params: UseFloorOrderParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = floorOrderQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { floorOrderQueryOptions };\n\nexport type { FetchFloorOrderParams, FloorOrderQueryOptions };\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchHighestOfferParams,\n\ttype HighestOfferQueryOptions,\n\thighestOfferQueryOptions,\n} from '../../../queries/highestOffer';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseHighestOfferParams = Optional<\n\tHighestOfferQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch the highest offer for a collectible\n *\n * Retrieves the highest offer currently available for a specific token\n * in a collection from the marketplace.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.tokenId - The token ID within the collection\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the highest offer data or null if no offers exist\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useHighestOffer({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   tokenId: '1'\n * })\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data, isLoading } = useHighestOffer({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   tokenId: '42',\n *   query: {\n *     refetchInterval: 15000,\n *     enabled: hasTokenId\n *   }\n * })\n * ```\n */\nexport function useHighestOffer(params: UseHighestOfferParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = highestOfferQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { highestOfferQueryOptions };\n\nexport type { FetchHighestOfferParams, HighestOfferQueryOptions };\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchListListingsForCollectibleParams,\n\ttype fetchListListingsForCollectible,\n\ttype ListListingsForCollectibleQueryOptions,\n\tlistListingsForCollectibleQueryOptions,\n} from '../../../queries/listListingsForCollectible';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseListListingsForCollectibleParams = Optional<\n\tListListingsForCollectibleQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch listings for a specific collectible\n *\n * Fetches active listings (sales) for a specific token from the marketplace\n * with support for filtering and pagination.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.collectibleId - The specific token ID to fetch listings for\n * @param params.filter - Optional filtering parameters (marketplace, currencies, etc.)\n * @param params.page - Optional pagination parameters\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing listings data for the collectible\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useListListingsForCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   collectibleId: '123'\n * })\n * ```\n *\n * @example\n * With pagination:\n * ```typescript\n * const { data } = useListListingsForCollectible({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   collectibleId: '456',\n *   page: {\n *     page: 2,\n *     pageSize: 20\n *   }\n * })\n * ```\n *\n * @example\n * With filtering:\n * ```typescript\n * const { data } = useListListingsForCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   collectibleId: '789',\n *   filter: {\n *     marketplace: [MarketplaceKind.sequence_marketplace_v2],\n *     currencies: ['0x...'] // Specific currency addresses\n *   }\n * })\n * ```\n */\nexport function useListListingsForCollectible(\n\tparams: UseListListingsForCollectibleParams,\n) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = listListingsForCollectibleQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { listListingsForCollectibleQueryOptions };\n\nexport type {\n\tFetchListListingsForCollectibleParams,\n\tListListingsForCollectibleQueryOptions,\n};\n\n// Legacy exports for backward compatibility during migration\nexport type UseListListingsForCollectibleArgs =\n\tUseListListingsForCollectibleParams;\nexport type UseListListingsForCollectibleReturn = Awaited<\n\tReturnType<typeof fetchListListingsForCollectible>\n>;\n","import { queryOptions, useQuery } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../../types';\nimport {\n\tcollectableKeys,\n\tgetMarketplaceClient,\n\ttype ListOffersForCollectibleArgs,\n} from '../../../_internal';\nimport type { OrderFilter, Page } from '../../../_internal/api/marketplace.gen';\nimport { useConfig } from '../../config/useConfig';\n\ninterface UseListOffersForCollectibleArgs {\n\tchainId: number;\n\tcollectionAddress: string;\n\tcollectibleId: string;\n\tfilter?: OrderFilter;\n\tpage?: Page;\n}\n\nexport type UseListOffersForCollectibleReturn = Awaited<\n\tReturnType<typeof fetchListOffersForCollectible>\n>;\n\nconst fetchListOffersForCollectible = async (\n\tconfig: SdkConfig,\n\targs: UseListOffersForCollectibleArgs,\n) => {\n\tconst arg = {\n\t\tchainId: String(args.chainId),\n\t\tcontractAddress: args.collectionAddress,\n\t\ttokenId: args.collectibleId,\n\t\tfilter: args.filter,\n\t\tpage: args.page,\n\t} satisfies ListOffersForCollectibleArgs;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\treturn marketplaceClient.listCollectibleOffers(arg);\n};\n\nexport const listOffersForCollectibleOptions = (\n\targs: UseListOffersForCollectibleArgs,\n\tconfig: SdkConfig,\n) => {\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.offers, args, config],\n\t\tqueryFn: () => fetchListOffersForCollectible(config, args),\n\t});\n};\n\nexport const useListOffersForCollectible = (\n\targs: UseListOffersForCollectibleArgs,\n) => {\n\tconst config = useConfig();\n\n\treturn useQuery(listOffersForCollectibleOptions(args, config));\n};\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchLowestListingParams,\n\ttype LowestListingQueryOptions,\n\tlowestListingQueryOptions,\n} from '../../../queries/lowestListing';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseLowestListingParams = Optional<\n\tLowestListingQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch the lowest listing for a collectible\n *\n * Retrieves the lowest priced listing currently available for a specific token\n * in a collection from the marketplace.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.tokenId - The token ID within the collection\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the lowest listing data or null if no listings exist\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useLowestListing({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   tokenId: '1'\n * })\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data, isLoading } = useLowestListing({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   tokenId: '42',\n *   query: {\n *     refetchInterval: 15000,\n *     enabled: hasTokenId\n *   }\n * })\n * ```\n */\nexport function useLowestListing(params: UseLowestListingParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = lowestListingQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { lowestListingQueryOptions };\n\nexport type { FetchLowestListingParams, LowestListingQueryOptions };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA,SAAgB,+BACfA,QACC;CACD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,wCAAwC;EAC5D;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfD,SAAgB,6BACfC,QACC;CACD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,sCAAsC;EAC1D;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfD,SAAgB,cAAcC,QAA6B;CAC1D,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,uBAAuB;EAC3C;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXD,SAAgB,gBAAgBC,QAA+B;CAC9D,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,yBAAyB;EAC7C;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACID,SAAgB,8BACfC,QACC;CACD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,uCAAuC;EAC3D;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;AChED,MAAM,gCAAgC,OACrCC,QACAC,SACI;CACJ,MAAM,MAAM;EACX,SAAS,OAAO,KAAK,QAAQ;EAC7B,iBAAiB,KAAK;EACtB,SAAS,KAAK;EACd,QAAQ,KAAK;EACb,MAAM,KAAK;CACX;CAED,MAAM,oBAAoB,qBAAqB,OAAO;AACtD,QAAO,kBAAkB,sBAAsB,IAAI;AACnD;AAED,MAAa,kCAAkC,CAC9CA,MACAD,WACI;AACJ,QAAO,aAAa;EACnB,UAAU;GAAC,GAAG,gBAAgB;GAAQ;GAAM;EAAO;EACnD,SAAS,MAAM,8BAA8B,QAAQ,KAAK;CAC1D,EAAC;AACF;AAED,MAAa,8BAA8B,CAC1CC,SACI;CACJ,MAAM,SAAS,WAAW;AAE1B,QAAO,SAAS,gCAAgC,MAAM,OAAO,CAAC;AAC9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAD,SAAgB,iBAAiBC,QAAgC;CAChE,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,0BAA0B;EAC9C;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF"}