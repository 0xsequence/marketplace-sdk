{"version":3,"file":"useListCollectibles-BhLFdV3h.js","names":["params: UseListCollectiblesParams","queryOptions"],"sources":["../src/react/hooks/data/collectibles/useListCollectibles.tsx"],"sourcesContent":["'use client';\n\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchListCollectiblesParams,\n\ttype ListCollectiblesQueryOptions,\n\tlistCollectiblesQueryOptions,\n} from '../../../queries/listCollectibles';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseListCollectiblesParams = Optional<\n\tListCollectiblesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch a list of collectibles with infinite pagination support\n *\n * Fetches collectibles from the marketplace with support for filtering, pagination,\n * and special handling for shop marketplace types and LAOS721 contracts.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.side - Order side (listing or bid)\n * @param params.filter - Optional filtering parameters\n * @param params.isLaos721 - Whether the collection is a LAOS721 contract\n * @param params.marketplaceType - Type of marketplace (shop, etc.)\n * @param params.query - Optional React Query configuration\n *\n * @returns Infinite query result containing collectibles data with pagination\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading, fetchNextPage, hasNextPage } = useListCollectibles({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   side: OrderSide.listing\n * })\n * ```\n *\n * @example\n * With filtering:\n * ```typescript\n * const { data, fetchNextPage } = useListCollectibles({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   side: OrderSide.listing,\n *   filter: {\n *     searchText: 'dragon',\n *     includeEmpty: false,\n *     marketplaces: [MarketplaceKind.sequence_marketplace_v2]\n *   }\n * })\n * ```\n *\n * @example\n * For LAOS721 collections:\n * ```typescript\n * const { data } = useListCollectibles({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   side: OrderSide.listing,\n *   isLaos721: true,\n *   filter: {\n *     inAccounts: ['0x...']\n *   }\n * })\n * ```\n */\nexport function useListCollectibles(params: UseListCollectiblesParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = listCollectiblesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useInfiniteQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { listCollectiblesQueryOptions };\n\nexport type { FetchListCollectiblesParams, ListCollectiblesQueryOptions };\n\n// Legacy export for backward compatibility during migration\nexport type UseListCollectiblesArgs = UseListCollectiblesParams;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwEA,SAAgB,oBAAoBA,QAAmC;CACtE,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,6BAA6B;EACjD;EACA,GAAG;CACH,EAAC;AAEF,QAAO,iBAAiB,EACvB,GAAGA,eACH,EAAC;AACF"}