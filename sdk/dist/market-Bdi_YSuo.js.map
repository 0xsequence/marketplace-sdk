{"version":3,"file":"market-Bdi_YSuo.js","names":["params: UseCurrencyParams","queryOptions","initialState: SellModalState & Actions","callbacks?: ModalCallbacks","args: ShowSellModalArgs","collectible: CollectibleOrder","balance","cardProps: MarketCollectibleCardProps","params: UseMarketCurrenciesParams","queryOptions"],"sources":["../src/react/hooks/data/market/useCurrency.tsx","../src/react/ui/modals/SellModal/store.ts","../src/react/ui/modals/SellModal/index.tsx","../src/react/hooks/data/market/useListMarketCardData.tsx","../src/react/hooks/data/market/useMarketCurrencies.tsx"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype CurrencyQueryOptions,\n\tcurrencyQueryOptions,\n\ttype FetchCurrencyParams,\n} from '../../../queries/currency';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseCurrencyParams = Optional<CurrencyQueryOptions, 'config'>;\n\n/**\n * Hook to fetch currency details from the marketplace\n *\n * Retrieves detailed information about a specific currency by its contract address.\n * The currency data is cached from previous currency list calls when possible.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.currencyAddress - The currency contract address\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing currency details\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useCurrency({\n *   chainId: 137,\n *   currencyAddress: '0x...'\n * })\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data, isLoading } = useCurrency({\n *   chainId: 1,\n *   currencyAddress: '0x...',\n *   query: {\n *     enabled: Boolean(selectedCurrency)\n *   }\n * })\n * ```\n */\nexport function useCurrency(params: UseCurrencyParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = currencyQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { currencyQueryOptions };\n\nexport type { FetchCurrencyParams, CurrencyQueryOptions };\n","import { observable } from '@legendapp/state';\nimport type { Address } from 'viem';\nimport type { Order, TransactionSteps } from '../../../_internal';\nimport type { BaseModalState, ModalCallbacks } from '../_internal/types';\n\nexport type OpenSellModalArgs = {\n\tcollectionAddress: Address;\n\tchainId: number;\n\ttokenId: string;\n\torder: Order;\n\tcallbacks?: ModalCallbacks;\n};\n\ntype SellModalState = BaseModalState & {\n\ttokenId: string;\n\torder?: Order;\n\tsteps: TransactionSteps;\n\tsellIsBeingProcessed: boolean;\n};\n\ntype Actions = {\n\topen: (args: OpenSellModalArgs) => void;\n\tclose: () => void;\n};\n\nconst initialState: SellModalState & Actions = {\n\tisOpen: false,\n\tcollectionAddress: '' as Address,\n\tchainId: 0,\n\ttokenId: '',\n\torder: undefined,\n\tcallbacks: undefined,\n\tsellIsBeingProcessed: false,\n\topen: (args) => {\n\t\tsellModal$.collectionAddress.set(args.collectionAddress);\n\t\tsellModal$.chainId.set(args.chainId);\n\t\tsellModal$.tokenId.set(args.tokenId);\n\t\tsellModal$.order.set(args.order);\n\t\tsellModal$.callbacks.set(args.callbacks);\n\t\tsellModal$.isOpen.set(true);\n\t},\n\n\tclose: () => {\n\t\tsellModal$.isOpen.set(false);\n\t\tsellModal$.callbacks.set(undefined);\n\t\tsellModal$.sellIsBeingProcessed.set(false);\n\t},\n\tsteps: {\n\t\tapproval: {\n\t\t\texist: false,\n\t\t\tisExecuting: false,\n\t\t\texecute: () => Promise.resolve(),\n\t\t},\n\t\ttransaction: {\n\t\t\texist: false,\n\t\t\tisExecuting: false,\n\t\t\texecute: () => Promise.resolve(),\n\t\t},\n\t},\n};\n\nexport const sellModal$ = observable(initialState);\n","import type { ModalCallbacks } from '../_internal/types';\nimport { type OpenSellModalArgs, sellModal$ } from './store';\n\ntype ShowSellModalArgs = Exclude<OpenSellModalArgs, 'callbacks'>;\n\nexport const useSellModal = (callbacks?: ModalCallbacks) => {\n\treturn {\n\t\tshow: (args: ShowSellModalArgs) => sellModal$.open({ ...args, callbacks }),\n\t\tclose: () => sellModal$.close(),\n\t};\n};\n","import { useMemo } from 'react';\n\nimport type { Address } from 'viem';\nimport { useAccount } from 'wagmi';\nimport type {\n\tCollectibleCardAction,\n\tCollectibleOrder,\n\tContractType,\n\tOrder,\n\tOrderbookKind,\n\tPropertyFilter,\n} from '../../../../types';\nimport { OrderSide } from '../../../../types';\nimport type { MarketCollectibleCardProps } from '../../../ui/components/marketplace-collectible-card/types';\nimport { useSellModal } from '../../../ui/modals/SellModal';\nimport { useListCollectibles } from '../collectibles/useListCollectibles';\nimport { useCollectionBalanceDetails } from '../collections/useCollectionBalanceDetails';\n\ninterface UseListMarketCardDataProps {\n\tcollectionAddress: Address;\n\tchainId: number;\n\t// orderbookKind is optional â€” used to override marketplace config for internal tests\n\torderbookKind?: OrderbookKind;\n\tcollectionType: ContractType;\n\tfilterOptions?: PropertyFilter[];\n\tsearchText?: string;\n\tshowListedOnly?: boolean;\n\tonCollectibleClick?: (tokenId: string) => void;\n\tonCannotPerformAction?: (action: CollectibleCardAction) => void;\n\tprioritizeOwnerActions?: boolean;\n\tassetSrcPrefixUrl?: string;\n}\n\nexport function useListMarketCardData({\n\tcollectionAddress,\n\tchainId,\n\torderbookKind,\n\tcollectionType,\n\tfilterOptions,\n\tsearchText,\n\tshowListedOnly = false,\n\tonCollectibleClick,\n\tonCannotPerformAction,\n\tprioritizeOwnerActions,\n\tassetSrcPrefixUrl,\n}: UseListMarketCardDataProps) {\n\tconst { address: accountAddress } = useAccount();\n\tconst { show: showSellModal } = useSellModal();\n\n\t// Get collectibles with listings\n\tconst {\n\t\tdata: collectiblesList,\n\t\tisLoading: collectiblesListIsLoading,\n\t\tfetchNextPage,\n\t\thasNextPage,\n\t\tisFetchingNextPage,\n\t\terror: collectiblesListError,\n\t} = useListCollectibles({\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tside: OrderSide.listing,\n\t\tfilter: {\n\t\t\tincludeEmpty: !showListedOnly,\n\t\t\tsearchText,\n\t\t\tproperties: filterOptions,\n\t\t},\n\t\tquery: {\n\t\t\tenabled: !!collectionAddress && !!chainId,\n\t\t},\n\t});\n\n\t// Get user balances for this collection\n\tconst { data: collectionBalance, isLoading: balanceLoading } =\n\t\tuseCollectionBalanceDetails({\n\t\t\tchainId,\n\t\t\tfilter: {\n\t\t\t\taccountAddresses: accountAddress ? [accountAddress] : [],\n\t\t\t\tomitNativeBalances: true,\n\t\t\t\tcontractWhitelist: [collectionAddress],\n\t\t\t},\n\t\t\tquery: {\n\t\t\t\tenabled: !!accountAddress,\n\t\t\t},\n\t\t});\n\n\t// Flatten all collectibles from all pages\n\tconst allCollectibles = useMemo(() => {\n\t\tif (!collectiblesList?.pages) return [];\n\t\treturn collectiblesList.pages.flatMap((page) => page.collectibles);\n\t}, [collectiblesList?.pages]);\n\n\t// Generate card props for each collectible\n\tconst collectibleCards = useMemo(() => {\n\t\treturn allCollectibles.map((collectible: CollectibleOrder) => {\n\t\t\tconst balance = collectionBalance?.balances.find(\n\t\t\t\t(balance) => balance.tokenID === collectible.metadata.tokenId,\n\t\t\t)?.balance;\n\n\t\t\tconst cardProps: MarketCollectibleCardProps = {\n\t\t\t\tcollectibleId: collectible.metadata.tokenId,\n\t\t\t\tchainId,\n\t\t\t\tcollectionAddress,\n\t\t\t\tcollectionType,\n\t\t\t\tcardLoading: collectiblesListIsLoading || balanceLoading,\n\t\t\t\tmarketplaceType: 'market',\n\t\t\t\torderbookKind,\n\t\t\t\tcollectible,\n\t\t\t\tonCollectibleClick,\n\t\t\t\tbalance,\n\t\t\t\tbalanceIsLoading: balanceLoading,\n\t\t\t\tonCannotPerformAction,\n\t\t\t\tprioritizeOwnerActions,\n\t\t\t\tassetSrcPrefixUrl,\n\t\t\t\tonOfferClick: ({ order }) => {\n\t\t\t\t\tif (!accountAddress) return;\n\n\t\t\t\t\tif (balance) {\n\t\t\t\t\t\tshowSellModal({\n\t\t\t\t\t\t\tchainId,\n\t\t\t\t\t\t\tcollectionAddress,\n\t\t\t\t\t\t\ttokenId: collectible.metadata.tokenId,\n\t\t\t\t\t\t\torder: order as Order,\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn cardProps;\n\t\t});\n\t}, [\n\t\tallCollectibles,\n\t\tchainId,\n\t\tcollectionAddress,\n\t\tcollectionType,\n\t\tcollectiblesListIsLoading,\n\t\tbalanceLoading,\n\t\torderbookKind,\n\t\tonCollectibleClick,\n\t\tcollectionBalance?.balances,\n\t\tonCannotPerformAction,\n\t\tprioritizeOwnerActions,\n\t\tassetSrcPrefixUrl,\n\t\taccountAddress,\n\t\tshowSellModal,\n\t]);\n\n\treturn {\n\t\tcollectibleCards,\n\t\tisLoading: collectiblesListIsLoading || balanceLoading,\n\t\terror: collectiblesListError,\n\n\t\thasNextPage,\n\t\tisFetchingNextPage,\n\t\tfetchNextPage,\n\t\tallCollectibles,\n\t};\n}\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchMarketCurrenciesParams,\n\ttype MarketCurrenciesQueryOptions,\n\tmarketCurrenciesQueryOptions,\n} from '../../../queries/marketCurrencies';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseMarketCurrenciesParams = Optional<\n\tMarketCurrenciesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch supported currencies for a marketplace\n *\n * Retrieves the list of currencies supported by the marketplace for a specific chain.\n * Can optionally filter to exclude native currency or filter by collection.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.includeNativeCurrency - Whether to include native currency (default: true)\n * @param params.collectionAddress - Optional collection address to filter currencies\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing supported currencies\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useMarketCurrencies({\n *   chainId: 137\n * })\n * ```\n *\n * @example\n * Exclude native currency:\n * ```typescript\n * const { data, isLoading } = useMarketCurrencies({\n *   chainId: 1,\n *   includeNativeCurrency: false\n * })\n * ```\n */\nexport function useMarketCurrencies(params: UseMarketCurrenciesParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = marketCurrenciesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { marketCurrenciesQueryOptions };\n\nexport type { FetchMarketCurrenciesParams, MarketCurrenciesQueryOptions };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,SAAgB,YAAYA,QAA2B;CACtD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,qBAAqB;EACzC;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;ACnCD,MAAMC,eAAyC;CAC9C,QAAQ;CACR,mBAAmB;CACnB,SAAS;CACT,SAAS;CACT;CACA;CACA,sBAAsB;CACtB,MAAM,CAAC,SAAS;AACf,aAAW,kBAAkB,IAAI,KAAK,kBAAkB;AACxD,aAAW,QAAQ,IAAI,KAAK,QAAQ;AACpC,aAAW,QAAQ,IAAI,KAAK,QAAQ;AACpC,aAAW,MAAM,IAAI,KAAK,MAAM;AAChC,aAAW,UAAU,IAAI,KAAK,UAAU;AACxC,aAAW,OAAO,IAAI,KAAK;CAC3B;CAED,OAAO,MAAM;AACZ,aAAW,OAAO,IAAI,MAAM;AAC5B,aAAW,UAAU,WAAc;AACnC,aAAW,qBAAqB,IAAI,MAAM;CAC1C;CACD,OAAO;EACN,UAAU;GACT,OAAO;GACP,aAAa;GACb,SAAS,MAAM,QAAQ,SAAS;EAChC;EACD,aAAa;GACZ,OAAO;GACP,aAAa;GACb,SAAS,MAAM,QAAQ,SAAS;EAChC;CACD;AACD;AAED,MAAa,aAAa,WAAW,aAAa;;;;ACxDlD,MAAa,eAAe,CAACC,cAA+B;AAC3D,QAAO;EACN,MAAM,CAACC,SAA4B,WAAW,KAAK;GAAE,GAAG;GAAM;EAAW,EAAC;EAC1E,OAAO,MAAM,WAAW,OAAO;CAC/B;AACD;;;;ACuBD,SAAgB,sBAAsB,EACrC,mBACA,SACA,eACA,gBACA,eACA,YACA,iBAAiB,OACjB,oBACA,uBACA,wBACA,mBAC4B,EAAE;CAC9B,MAAM,EAAE,SAAS,gBAAgB,GAAG,YAAY;CAChD,MAAM,EAAE,MAAM,eAAe,GAAG,cAAc;CAG9C,MAAM,EACL,MAAM,kBACN,WAAW,2BACX,eACA,aACA,oBACA,OAAO,uBACP,GAAG,oBAAoB;EACvB;EACA;EACA,MAAM,UAAU;EAChB,QAAQ;GACP,eAAe;GACf;GACA,YAAY;EACZ;EACD,OAAO,EACN,WAAW,uBAAuB,QAClC;CACD,EAAC;CAGF,MAAM,EAAE,MAAM,mBAAmB,WAAW,gBAAgB,GAC3D,4BAA4B;EAC3B;EACA,QAAQ;GACP,kBAAkB,iBAAiB,CAAC,cAAe,IAAG,CAAE;GACxD,oBAAoB;GACpB,mBAAmB,CAAC,iBAAkB;EACtC;EACD,OAAO,EACN,WAAW,eACX;CACD,EAAC;CAGH,MAAM,kBAAkB,QAAQ,MAAM;AACrC,OAAK,kBAAkB,MAAO,QAAO,CAAE;AACvC,SAAO,iBAAiB,MAAM,QAAQ,CAAC,SAAS,KAAK,aAAa;CAClE,GAAE,CAAC,kBAAkB,KAAM,EAAC;CAG7B,MAAM,mBAAmB,QAAQ,MAAM;AACtC,SAAO,gBAAgB,IAAI,CAACC,gBAAkC;GAC7D,MAAM,UAAU,mBAAmB,SAAS,KAC3C,CAACC,cAAYA,UAAQ,YAAY,YAAY,SAAS,QACtD,EAAE;GAEH,MAAMC,YAAwC;IAC7C,eAAe,YAAY,SAAS;IACpC;IACA;IACA;IACA,aAAa,6BAA6B;IAC1C,iBAAiB;IACjB;IACA;IACA;IACA;IACA,kBAAkB;IAClB;IACA;IACA;IACA,cAAc,CAAC,EAAE,OAAO,KAAK;AAC5B,UAAK,eAAgB;AAErB,SAAI,SAAS;AACZ,oBAAc;OACb;OACA;OACA,SAAS,YAAY,SAAS;OACvB;MACP,EAAC;AACF;KACA;IACD;GACD;AAED,UAAO;EACP,EAAC;CACF,GAAE;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,mBAAmB;EACnB;EACA;EACA;EACA;EACA;CACA,EAAC;AAEF,QAAO;EACN;EACA,WAAW,6BAA6B;EACxC,OAAO;EAEP;EACA;EACA;EACA;CACA;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9GD,SAAgB,oBAAoBC,QAAmC;CACtE,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,6BAA6B;EACjD;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF"}