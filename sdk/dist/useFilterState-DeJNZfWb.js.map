{"version":3,"file":"useFilterState-DeJNZfWb.js","names":["value: unknown","name: string","value: string","min: number","max: number","otherFilters"],"sources":["../src/react/hooks/ui/useFilterState.tsx"],"sourcesContent":["import {\n\tcreateSerializer,\n\tparseAsBoolean,\n\tparseAsJson,\n\tparseAsString,\n\tuseQueryState,\n} from 'nuqs';\nimport { useMemo } from 'react';\nimport { type PropertyFilter, PropertyType } from '../../_internal';\n\ninterface StringFilterValues {\n\ttype: PropertyType.STRING;\n\tvalues: string[];\n}\n\ninterface IntFilterValues {\n\ttype: PropertyType.INT;\n\tmin: number;\n\tmax: number;\n}\n\ntype FilterValues = StringFilterValues | IntFilterValues;\n\nconst validateFilters = (value: unknown): PropertyFilter[] => {\n\tif (!Array.isArray(value)) return [];\n\treturn value.filter(\n\t\t(f): f is PropertyFilter =>\n\t\t\ttypeof f === 'object' &&\n\t\t\ttypeof f.name === 'string' &&\n\t\t\tObject.values(PropertyType).includes(f.type),\n\t);\n};\n\nconst filtersParser = parseAsJson(validateFilters).withDefault([]);\nconst searchParser = parseAsString.withDefault('');\nconst listedOnlyParser = parseAsBoolean.withDefault(false);\n\nconst serialize = createSerializer(\n\t{\n\t\tfilters: filtersParser,\n\t\tsearch: searchParser,\n\t\tlistedOnly: listedOnlyParser,\n\t},\n\t{\n\t\turlKeys: {\n\t\t\tfilters: 'f',\n\t\t\tsearch: 'q',\n\t\t\tlistedOnly: 'l',\n\t\t},\n\t},\n);\n\nexport function useFilterState() {\n\tconst [filterOptions, setFilterOptions] = useQueryState(\n\t\t'filters',\n\t\tfiltersParser,\n\t);\n\tconst [searchText, setSearchText] = useQueryState('search', searchParser);\n\tconst [showListedOnly, setShowListedOnly] = useQueryState(\n\t\t'listedOnly',\n\t\tlistedOnlyParser,\n\t);\n\n\tconst helpers = useMemo(\n\t\t() => ({\n\t\t\tgetFilter: (name: string): PropertyFilter | undefined => {\n\t\t\t\treturn filterOptions?.find((f) => f.name === name);\n\t\t\t},\n\n\t\t\tgetFilterValues: (name: string): FilterValues | undefined => {\n\t\t\t\tconst filter = filterOptions?.find((f) => f.name === name);\n\t\t\t\tif (!filter) return undefined;\n\n\t\t\t\tif (filter.type === PropertyType.INT) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: PropertyType.INT,\n\t\t\t\t\t\tmin: filter.min ?? 0,\n\t\t\t\t\t\tmax: filter.max ?? 0,\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\ttype: PropertyType.STRING,\n\t\t\t\t\tvalues: (filter.values as string[]) ?? [],\n\t\t\t\t};\n\t\t\t},\n\n\t\t\tisFilterActive: (name: string): boolean => {\n\t\t\t\treturn !!filterOptions?.find((f) => f.name === name);\n\t\t\t},\n\n\t\t\tisStringValueSelected: (name: string, value: string): boolean => {\n\t\t\t\tconst filter = filterOptions?.find((f) => f.name === name);\n\t\t\t\tif (!filter || filter.type !== PropertyType.STRING) return false;\n\t\t\t\treturn (filter.values as string[])?.includes(value) ?? false;\n\t\t\t},\n\n\t\t\tisIntFilterActive: (name: string): boolean => {\n\t\t\t\tconst filter = filterOptions?.find((f) => f.name === name);\n\t\t\t\treturn !!filter && filter.type === PropertyType.INT;\n\t\t\t},\n\n\t\t\tgetIntFilterRange: (name: string): [number, number] | undefined => {\n\t\t\t\tconst filter = filterOptions?.find((f) => f.name === name);\n\t\t\t\tif (!filter || filter.type !== PropertyType.INT) return undefined;\n\t\t\t\treturn [filter.min ?? 0, filter.max ?? 0];\n\t\t\t},\n\n\t\t\tdeleteFilter: (name: string) => {\n\t\t\t\tconst otherFilters =\n\t\t\t\t\tfilterOptions?.filter((f) => !(f.name === name)) ?? [];\n\t\t\t\tsetFilterOptions(otherFilters);\n\t\t\t},\n\n\t\t\ttoggleStringFilterValue: (name: string, value: string) => {\n\t\t\t\tconst otherFilters =\n\t\t\t\t\tfilterOptions?.filter((f) => !(f.name === name)) ?? [];\n\t\t\t\tconst filter = filterOptions?.find((f) => f.name === name);\n\t\t\t\tconst existingValues =\n\t\t\t\t\tfilter?.type === PropertyType.STRING\n\t\t\t\t\t\t? ((filter.values as string[]) ?? [])\n\t\t\t\t\t\t: [];\n\n\t\t\t\tif (existingValues.includes(value)) {\n\t\t\t\t\tconst newValues = existingValues.filter((v) => v !== value);\n\t\t\t\t\tif (newValues.length === 0) {\n\t\t\t\t\t\tsetFilterOptions(otherFilters);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tsetFilterOptions([\n\t\t\t\t\t\t...otherFilters,\n\t\t\t\t\t\t{ name, type: PropertyType.STRING, values: newValues },\n\t\t\t\t\t]);\n\t\t\t\t} else {\n\t\t\t\t\tsetFilterOptions([\n\t\t\t\t\t\t...otherFilters,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname,\n\t\t\t\t\t\t\ttype: PropertyType.STRING,\n\t\t\t\t\t\t\tvalues: [...existingValues, value],\n\t\t\t\t\t\t},\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tsetIntFilterValue: (name: string, min: number, max: number) => {\n\t\t\t\tif (min === max && min === 0) {\n\t\t\t\t\tconst otherFilters =\n\t\t\t\t\t\tfilterOptions?.filter((f) => !(f.name === name)) ?? [];\n\t\t\t\t\tsetFilterOptions(otherFilters);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst otherFilters =\n\t\t\t\t\tfilterOptions?.filter((f) => !(f.name === name)) ?? [];\n\t\t\t\tsetFilterOptions([\n\t\t\t\t\t...otherFilters,\n\t\t\t\t\t{ name, type: PropertyType.INT, min, max },\n\t\t\t\t]);\n\t\t\t},\n\n\t\t\tclearAllFilters: () => {\n\t\t\t\tvoid setShowListedOnly(false);\n\t\t\t\tvoid setFilterOptions([]);\n\t\t\t\tvoid setSearchText('');\n\t\t\t},\n\t\t}),\n\t\t[filterOptions, setFilterOptions, setShowListedOnly, setSearchText],\n\t);\n\n\treturn {\n\t\tfilterOptions,\n\t\tsearchText,\n\t\tshowListedOnly,\n\t\tsetFilterOptions,\n\t\tsetSearchText,\n\t\tsetShowListedOnly,\n\t\t...helpers,\n\t\tserialize,\n\t};\n}\n"],"mappings":"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"}