{"version":3,"file":"useCollectionBalanceDetails-BEI04WRk.js","names":["params: UseCollectionBalanceDetailsParams","queryOptions"],"sources":["../src/react/hooks/data/collections/useCollectionBalanceDetails.tsx"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype CollectionBalanceDetailsQueryOptions,\n\ttype CollectionBalanceFilter,\n\tcollectionBalanceDetailsQueryOptions,\n\ttype FetchCollectionBalanceDetailsParams,\n\ttype fetchCollectionBalanceDetails,\n} from '../../../queries/collectionBalanceDetails';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseCollectionBalanceDetailsParams = Optional<\n\tCollectionBalanceDetailsQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch detailed balance information for multiple accounts\n *\n * Retrieves token balances and native balances for multiple account addresses,\n * with support for contract whitelisting and optional native balance exclusion.\n * Aggregates results from multiple account addresses into a single response.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.filter - Filter configuration for balance queries\n * @param params.filter.accountAddresses - Array of account addresses to query balances for\n * @param params.filter.contractWhitelist - Optional array of contract addresses to filter by\n * @param params.filter.omitNativeBalances - Whether to exclude native token balances\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing aggregated balance details for all accounts\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: balanceDetails, isLoading } = useCollectionBalanceDetails({\n *   chainId: 137,\n *   filter: {\n *     accountAddresses: ['0x1234...', '0x5678...'],\n *     omitNativeBalances: false\n *   }\n * })\n *\n * if (data) {\n *   console.log(`Found ${data.balances.length} token balances`);\n *   console.log(`Found ${data.nativeBalances.length} native balances`);\n * }\n * ```\n *\n * @example\n * With contract whitelist:\n * ```typescript\n * const { data: balanceDetails } = useCollectionBalanceDetails({\n *   chainId: 1,\n *   filter: {\n *     accountAddresses: [userAddress],\n *     contractWhitelist: ['0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'], // USDC only\n *     omitNativeBalances: true\n *   },\n *   query: {\n *     enabled: Boolean(userAddress),\n *     refetchInterval: 60000 // Refresh every minute\n *   }\n * })\n * ```\n */\nexport function useCollectionBalanceDetails(\n\tparams: UseCollectionBalanceDetailsParams,\n) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = collectionBalanceDetailsQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { collectionBalanceDetailsQueryOptions };\n\nexport type {\n\tFetchCollectionBalanceDetailsParams,\n\tCollectionBalanceDetailsQueryOptions,\n\tCollectionBalanceFilter,\n};\n\n// Legacy exports for backward compatibility\nexport type UseCollectionBalanceDetailsArgs = {\n\tchainId: number;\n\tfilter: CollectionBalanceFilter;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nexport type UseCollectionBalanceDetailsReturn = Awaited<\n\tReturnType<typeof fetchCollectionBalanceDetails>\n>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA,SAAgB,4BACfA,QACC;CACD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,qCAAqC;EACzD;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF"}