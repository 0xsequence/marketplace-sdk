{"version":3,"file":"tokenSupplies-DTWhbfIg.js","names":["params: FetchGetTokenRangesParams","params: GetTokenRangesQueryOptions","params: FetchListTokenMetadataParams","params: ListTokenMetadataQueryOptions","params: FetchTokenSuppliesParams","result","apiArgs: GetTokenSuppliesArgs","params: TokenSuppliesQueryOptions"],"sources":["../src/react/queries/getTokenRanges.ts","../src/react/queries/listTokenMetadata.ts","../src/react/queries/tokenSupplies.ts"],"sourcesContent":["import type { GetTokenIDRangesReturn } from '@0xsequence/indexer';\nimport { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport { getIndexerClient, type ValuesOptional } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchGetTokenRangesParams {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches token ID ranges for a collection from the Indexer API\n */\nexport async function fetchGetTokenRanges(\n\tparams: FetchGetTokenRangesParams,\n): Promise<GetTokenIDRangesReturn> {\n\tconst { chainId, collectionAddress, config } = params;\n\n\tconst indexerClient = getIndexerClient(chainId, config);\n\n\tconst response = await indexerClient.getTokenIDRanges({\n\t\tcontractAddress: collectionAddress,\n\t});\n\n\tif (!response) {\n\t\tthrow new Error('Failed to fetch token ranges');\n\t}\n\n\treturn response;\n}\n\nexport type GetTokenRangesQueryOptions =\n\tValuesOptional<FetchGetTokenRangesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getTokenRangesQueryOptions(params: GetTokenRangesQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['indexer', 'tokenRanges', params],\n\t\tqueryFn: () =>\n\t\t\tfetchGetTokenRanges({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tgetMetadataClient,\n\ttokenKeys,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchListTokenMetadataParams {\n\tchainId: number;\n\tcontractAddress: string;\n\ttokenIds: string[];\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches token metadata from the metadata API\n */\nexport async function fetchListTokenMetadata(\n\tparams: FetchListTokenMetadataParams,\n) {\n\tconst { chainId, contractAddress, tokenIds, config } = params;\n\tconst metadataClient = getMetadataClient(config);\n\n\tconst response = await metadataClient.getTokenMetadata({\n\t\tchainID: chainId.toString(),\n\t\tcontractAddress: contractAddress,\n\t\ttokenIDs: tokenIds,\n\t});\n\n\treturn response.tokenMetadata;\n}\n\nexport type ListTokenMetadataQueryOptions =\n\tValuesOptional<FetchListTokenMetadataParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listTokenMetadataQueryOptions(\n\tparams: ListTokenMetadataQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.contractAddress &&\n\t\t\tparams.tokenIds?.length &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...tokenKeys.metadata, params],\n\t\tqueryFn: () =>\n\t\t\tfetchListTokenMetadata({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcontractAddress: params.contractAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\ttokenIds: params.tokenIds!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import type { GetTokenSuppliesArgs } from '@0xsequence/indexer';\nimport { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tgetIndexerClient,\n\tLaosAPI,\n\ttokenKeys,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchTokenSuppliesParams\n\textends Omit<GetTokenSuppliesArgs, 'contractAddress'> {\n\tchainId: number;\n\tcollectionAddress: string;\n\tconfig: SdkConfig;\n\tisLaos721?: boolean;\n}\n\n/**\n * Fetches token supplies with support for both indexer and LAOS APIs\n * Uses the more efficient single-contract APIs from both services\n */\nexport async function fetchTokenSupplies(params: FetchTokenSuppliesParams) {\n\tconst { chainId, collectionAddress, config, isLaos721, ...rest } = params;\n\n\tif (isLaos721) {\n\t\tconst laosApi = new LaosAPI();\n\n\t\t// Convert indexer Page format to LAOS PaginationOptions format\n\t\tconst laosPage = rest.page\n\t\t\t? {\n\t\t\t\t\tsort:\n\t\t\t\t\t\trest.page.sort?.map((sortBy) => ({\n\t\t\t\t\t\t\tcolumn: sortBy.column,\n\t\t\t\t\t\t\torder: sortBy.order,\n\t\t\t\t\t\t})) || [],\n\t\t\t\t}\n\t\t\t: undefined;\n\n\t\tconst result = await laosApi.getTokenSupplies({\n\t\t\tchainId: chainId.toString(),\n\t\t\tcontractAddress: collectionAddress,\n\t\t\tincludeMetadata: rest.includeMetadata,\n\t\t\tpage: laosPage,\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tconst indexerClient = getIndexerClient(chainId, config);\n\n\tconst apiArgs: GetTokenSuppliesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\t...rest,\n\t};\n\n\tconst result = await indexerClient.getTokenSupplies(apiArgs);\n\treturn result;\n}\n\nexport type TokenSuppliesQueryOptions =\n\tValuesOptional<FetchTokenSuppliesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function tokenSuppliesQueryOptions(params: TokenSuppliesQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...tokenKeys.supplies, params],\n\t\tqueryFn: () =>\n\t\t\tfetchTokenSupplies({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tisLaos721: params.isLaos721,\n\t\t\t\tincludeMetadata: params.includeMetadata,\n\t\t\t\tmetadataOptions: params.metadataOptions,\n\t\t\t\tpage: params.page,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n"],"mappings":";;;;;;;AAgBA,eAAsB,oBACrBA,QACkC;CAClC,MAAM,EAAE,SAAS,mBAAmB,QAAQ,GAAG;CAE/C,MAAM,gBAAgB,iBAAiB,SAAS,OAAO;CAEvD,MAAM,WAAW,MAAM,cAAc,iBAAiB,EACrD,iBAAiB,kBACjB,EAAC;AAEF,MAAK,SACJ,OAAM,IAAI,MAAM;AAGjB,QAAO;AACP;AAOD,SAAgB,2BAA2BC,QAAoC;CAC9E,MAAM,UAAU,QACf,OAAO,WACN,OAAO,qBACP,OAAO,WACN,OAAO,OAAO,WAAW,MAC3B;AAED,QAAO,aAAa;EACnB,UAAU;GAAC;GAAW;GAAe;EAAO;EAC5C,SAAS,MACR,oBAAoB;GAEnB,SAAS,OAAO;GAEhB,mBAAmB,OAAO;GAE1B,QAAQ,OAAO;EACf,EAAC;EACH,GAAG,OAAO;EACV;CACA,EAAC;AACF;;;;;;;AC1CD,eAAsB,uBACrBC,QACC;CACD,MAAM,EAAE,SAAS,iBAAiB,UAAU,QAAQ,GAAG;CACvD,MAAM,iBAAiB,kBAAkB,OAAO;CAEhD,MAAM,WAAW,MAAM,eAAe,iBAAiB;EACtD,SAAS,QAAQ,UAAU;EACV;EACjB,UAAU;CACV,EAAC;AAEF,QAAO,SAAS;AAChB;AAOD,SAAgB,8BACfC,QACC;CACD,MAAM,UAAU,QACf,OAAO,WACN,OAAO,mBACP,OAAO,UAAU,UACjB,OAAO,WACN,OAAO,OAAO,WAAW,MAC3B;AAED,QAAO,aAAa;EACnB,UAAU,CAAC,GAAG,UAAU,UAAU,MAAO;EACzC,SAAS,MACR,uBAAuB;GAEtB,SAAS,OAAO;GAEhB,iBAAiB,OAAO;GAExB,UAAU,OAAO;GAEjB,QAAQ,OAAO;EACf,EAAC;EACH,GAAG,OAAO;EACV;CACA,EAAC;AACF;;;;;;;;AC3CD,eAAsB,mBAAmBC,QAAkC;CAC1E,MAAM,EAAE,SAAS,mBAAmB,QAAQ,UAAW,GAAG,MAAM,GAAG;AAEnE,KAAI,WAAW;EACd,MAAM,UAAU,IAAI;EAGpB,MAAM,WAAW,KAAK,OACnB,EACA,MACC,KAAK,KAAK,MAAM,IAAI,CAAC,YAAY;GAChC,QAAQ,OAAO;GACf,OAAO,OAAO;EACd,GAAE,IAAI,CAAE,EACV;EAGH,MAAMC,WAAS,MAAM,QAAQ,iBAAiB;GAC7C,SAAS,QAAQ,UAAU;GAC3B,iBAAiB;GACjB,iBAAiB,KAAK;GACtB,MAAM;EACN,EAAC;AAEF,SAAOA;CACP;CAED,MAAM,gBAAgB,iBAAiB,SAAS,OAAO;CAEvD,MAAMC,UAAgC;EACrC,iBAAiB;EACjB,GAAG;CACH;CAED,MAAM,SAAS,MAAM,cAAc,iBAAiB,QAAQ;AAC5D,QAAO;AACP;AAOD,SAAgB,0BAA0BC,QAAmC;CAC5E,MAAM,UAAU,QACf,OAAO,WACN,OAAO,qBACP,OAAO,WACN,OAAO,OAAO,WAAW,MAC3B;AAED,QAAO,aAAa;EACnB,UAAU,CAAC,GAAG,UAAU,UAAU,MAAO;EACzC,SAAS,MACR,mBAAmB;GAElB,SAAS,OAAO;GAEhB,mBAAmB,OAAO;GAE1B,QAAQ,OAAO;GACf,WAAW,OAAO;GAClB,iBAAiB,OAAO;GACxB,iBAAiB,OAAO;GACxB,MAAM,OAAO;EACb,EAAC;EACH,GAAG,OAAO;EACV;CACA,EAAC;AACF"}