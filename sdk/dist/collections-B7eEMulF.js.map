{"version":3,"file":"collections-B7eEMulF.js","names":["params: UseCollectionDetailsParams","queryOptions","status: CollectionStatus","args: UseCollectionDetailsPolling","config: SdkConfig","params: UseListCollectionActivitiesParams","queryOptions","params: UseListCollectionsParams","queryOptions"],"sources":["../src/react/hooks/data/collections/useCollectionDetails.ts","../src/react/hooks/data/collections/useCollectionDetailsPolling.tsx","../src/react/hooks/data/collections/useListCollectionActivities.tsx","../src/react/hooks/data/collections/useListCollections.tsx"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype CollectionDetailsQueryOptions,\n\tcollectionDetailsQueryOptions,\n\ttype FetchCollectionDetailsParams,\n} from '../../../queries/collectionDetails';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseCollectionDetailsParams = Optional<\n\tCollectionDetailsQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch detailed information about a collection\n *\n * This hook retrieves comprehensive metadata and details for an NFT collection,\n * including collection name, description, banner, avatar, social links, stats, etc.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the collection details\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: collection, isLoading } = useCollectionDetails({\n *   chainId: 137,\n *   collectionAddress: '0x631998e91476da5b870d741192fc5cbc55f5a52e'\n * })\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data } = useCollectionDetails({\n *   chainId: 137,\n *   collectionAddress: '0x631998e91476da5b870d741192fc5cbc55f5a52e',\n *   query: {\n *     enabled: Boolean(collectionAddress),\n *     staleTime: 60_000\n *   }\n * })\n * ```\n */\nexport function useCollectionDetails(params: UseCollectionDetailsParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = collectionDetailsQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { collectionDetailsQueryOptions };\n\nexport type { FetchCollectionDetailsParams, CollectionDetailsQueryOptions };\n","import { queryOptions, useQuery } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../../types';\nimport { CollectionStatus } from '../../../_internal';\nimport { useConfig } from '../../config/useConfig';\nimport { collectionDetailsQueryOptions } from '../../data/collections/useCollectionDetails';\n\ntype UseCollectionDetailsPolling = {\n\tcollectionAddress: string;\n\tchainId: number;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nconst INITIAL_POLLING_INTERVAL = 2000; // 2 seconds\nconst MAX_POLLING_INTERVAL = 30000; // 30 seconds\nconst MAX_ATTEMPTS = 30;\n\nconst isTerminalState = (status: CollectionStatus): boolean => {\n\treturn [\n\t\tCollectionStatus.active,\n\t\tCollectionStatus.failed,\n\t\tCollectionStatus.inactive,\n\t\tCollectionStatus.incompatible_type,\n\t].includes(status);\n};\n\nexport const collectionDetailsPollingOptions = (\n\targs: UseCollectionDetailsPolling,\n\tconfig: SdkConfig,\n) => {\n\treturn queryOptions({\n\t\t...collectionDetailsQueryOptions({ ...args, config }),\n\t\trefetchInterval: (query) => {\n\t\t\tconst data = query.state.data;\n\t\t\tif (data && isTerminalState(data.status)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Calculate exponential backoff interval\n\t\t\tconst currentAttempt = (query.state.dataUpdateCount || 0) + 1;\n\t\t\tif (currentAttempt >= MAX_ATTEMPTS) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst interval = Math.min(\n\t\t\t\tINITIAL_POLLING_INTERVAL * 1.5 ** currentAttempt,\n\t\t\t\tMAX_POLLING_INTERVAL,\n\t\t\t);\n\n\t\t\treturn interval;\n\t\t},\n\t\trefetchOnWindowFocus: false,\n\t\tretry: false,\n\t\tenabled: args.query?.enabled ?? true,\n\t});\n};\n\nexport const useCollectionDetailsPolling = (\n\targs: UseCollectionDetailsPolling,\n) => {\n\tconst config = useConfig();\n\treturn useQuery(collectionDetailsPollingOptions(args, config));\n};\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchListCollectionActivitiesParams,\n\ttype fetchListCollectionActivities,\n\ttype ListCollectionActivitiesQueryOptions,\n\tlistCollectionActivitiesQueryOptions,\n} from '../../../queries/listCollectionActivities';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseListCollectionActivitiesParams = Optional<\n\tListCollectionActivitiesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch a list of activities for an entire collection\n *\n * Fetches activities (transfers, sales, offers, etc.) for all tokens\n * in a collection from the marketplace with support for pagination and sorting.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.page - Page number to fetch (default: 1)\n * @param params.pageSize - Number of activities per page (default: 10)\n * @param params.sort - Sort order for activities\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing activities data for the collection\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useListCollectionActivities({\n *   chainId: 137,\n *   collectionAddress: '0x...'\n * })\n * ```\n *\n * @example\n * With pagination:\n * ```typescript\n * const { data } = useListCollectionActivities({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   page: 2,\n *   pageSize: 20\n * })\n * ```\n *\n * @example\n * With sorting:\n * ```typescript\n * const { data } = useListCollectionActivities({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   sort: [{ column: 'createdAt', order: SortOrder.DESC }],\n *   pageSize: 50\n * })\n * ```\n */\nexport function useListCollectionActivities(\n\tparams: UseListCollectionActivitiesParams,\n) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = listCollectionActivitiesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { listCollectionActivitiesQueryOptions };\n\nexport type {\n\tFetchListCollectionActivitiesParams,\n\tListCollectionActivitiesQueryOptions,\n};\n\n// Legacy exports for backward compatibility during migration\nexport type UseListCollectionActivitiesArgs = UseListCollectionActivitiesParams;\nexport type UseListCollectionActivitiesReturn = Awaited<\n\tReturnType<typeof fetchListCollectionActivities>\n>;\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchListCollectionsParams,\n\ttype ListCollectionsQueryOptions,\n\tlistCollectionsQueryOptions,\n} from '../../../queries/listCollections';\nimport { useConfig } from '../../config/useConfig';\nimport { useMarketplaceConfig } from '../../config/useMarketplaceConfig';\n\nexport type UseListCollectionsParams = Optional<\n\tListCollectionsQueryOptions,\n\t'config' | 'marketplaceConfig'\n>;\n\n/**\n * Hook to fetch collections from marketplace configuration\n *\n * Retrieves all collections configured in the marketplace, with optional filtering\n * by marketplace type. Combines metadata from the metadata API with marketplace\n * configuration to provide complete collection information.\n *\n * @param params - Configuration parameters\n * @param params.marketplaceType - Optional filter by marketplace type\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing array of collections with metadata\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: collections, isLoading } = useListCollections();\n *\n * if (isLoading) return <div>Loading collections...</div>;\n *\n * return (\n *   <div>\n *     {collections?.map(collection => (\n *       <div key={collection.itemsAddress}>\n *         {collection.name}\n *       </div>\n *     ))}\n *   </div>\n * );\n * ```\n *\n * @example\n * Filtering by marketplace type:\n * ```typescript\n * const { data: marketCollections } = useListCollections({\n *   marketplaceType: 'market'\n * });\n * ```\n */\nexport function useListCollections(params: UseListCollectionsParams = {}) {\n\tconst defaultConfig = useConfig();\n\tconst { data: marketplaceConfig } = useMarketplaceConfig();\n\n\tconst {\n\t\tconfig = defaultConfig,\n\t\tmarketplaceConfig: paramMarketplaceConfig,\n\t\t...rest\n\t} = params;\n\n\tconst queryOptions = listCollectionsQueryOptions({\n\t\tconfig,\n\t\tmarketplaceConfig: paramMarketplaceConfig || marketplaceConfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { listCollectionsQueryOptions };\n\nexport type { FetchListCollectionsParams, ListCollectionsQueryOptions };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDA,SAAgB,qBAAqBA,QAAoC;CACxE,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,8BAA8B;EAClD;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;AClDD,MAAM,2BAA2B;AACjC,MAAM,uBAAuB;AAC7B,MAAM,eAAe;AAErB,MAAM,kBAAkB,CAACC,WAAsC;AAC9D,QAAO;EACN,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;EACjB,iBAAiB;CACjB,EAAC,SAAS,OAAO;AAClB;AAED,MAAa,kCAAkC,CAC9CC,MACAC,WACI;AACJ,QAAO,aAAa;EACnB,GAAG,8BAA8B;GAAE,GAAG;GAAM;EAAQ,EAAC;EACrD,iBAAiB,CAAC,UAAU;GAC3B,MAAM,OAAO,MAAM,MAAM;AACzB,OAAI,QAAQ,gBAAgB,KAAK,OAAO,CACvC,QAAO;GAIR,MAAM,kBAAkB,MAAM,MAAM,mBAAmB,KAAK;AAC5D,OAAI,kBAAkB,aACrB,QAAO;GAGR,MAAM,WAAW,KAAK,IACrB,2BAA2B,OAAO,gBAClC,qBACA;AAED,UAAO;EACP;EACD,sBAAsB;EACtB,OAAO;EACP,SAAS,KAAK,OAAO,WAAW;CAChC,EAAC;AACF;AAED,MAAa,8BAA8B,CAC1CD,SACI;CACJ,MAAM,SAAS,WAAW;AAC1B,QAAO,SAAS,gCAAgC,MAAM,OAAO,CAAC;AAC9D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCD,SAAgB,4BACfE,QACC;CACD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,qCAAqC;EACzD;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBD,SAAgB,mBAAmBC,SAAmC,CAAE,GAAE;CACzE,MAAM,gBAAgB,WAAW;CACjC,MAAM,EAAE,MAAM,mBAAmB,GAAG,sBAAsB;CAE1D,MAAM,EACL,SAAS,eACT,mBAAmB,uBACnB,GAAG,MACH,GAAG;CAEJ,MAAMC,iBAAe,4BAA4B;EAChD;EACA,mBAAmB,0BAA0B;EAC7C,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF"}