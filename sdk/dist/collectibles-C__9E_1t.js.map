{"version":3,"file":"collectibles-C__9E_1t.js","names":["args: UseBalanceOfCollectibleArgs","collection","params: UseCollectibleParams","queryOptions","params: UseCountOfCollectablesParams","queryOptions","params: UseListCollectibleActivitiesParams","queryOptions","params: UseListCollectiblesPaginatedParams","queryOptions"],"sources":["../src/react/hooks/data/collectibles/useBalanceOfCollectible.tsx","../src/react/hooks/data/collectibles/useCollectible.tsx","../src/react/hooks/data/collectibles/useCountOfCollectables.tsx","../src/react/hooks/data/collectibles/useListCollectibleActivities.tsx","../src/react/hooks/data/collectibles/useListCollectiblesPaginated.tsx"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport { ContractType } from '../../../_internal';\nimport {\n\tbalanceOfCollectibleOptions,\n\ttype UseBalanceOfCollectibleArgs,\n} from '../../../queries/balanceOfCollectible';\nimport { useConfig } from '../../config/useConfig';\nimport { useMarketplaceConfig } from '../../config/useMarketplaceConfig';\n\n/**\n * Hook to fetch the balance of a specific collectible for a user\n *\n * @param args - The arguments for fetching the balance\n * @returns Query result containing the balance data\n *\n * @example\n * ```tsx\n * const { data, isLoading, error } = useBalanceOfCollectible({\n *   collectionAddress: '0x123...',\n *   collectableId: '1',\n *   userAddress: '0x456...',\n *   chainId: 1,\n *   query: {\n *     enabled: true,\n *     refetchInterval: 10000,\n *   }\n * });\n * ```\n */\nexport function useBalanceOfCollectible(args: UseBalanceOfCollectibleArgs) {\n\tconst config = useConfig();\n\tconst { data: marketplaceConfig } = useMarketplaceConfig();\n\n\tconst collection = marketplaceConfig?.market.collections.find(\n\t\t(collection) => collection.itemsAddress === args.collectionAddress,\n\t);\n\tconst isLaos721 = collection?.contractType === ContractType.LAOS_ERC_721;\n\n\treturn useQuery(\n\t\tbalanceOfCollectibleOptions(\n\t\t\t{\n\t\t\t\t...args,\n\t\t\t\tisLaos721,\n\t\t\t},\n\t\t\tconfig,\n\t\t),\n\t);\n}\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype CollectibleQueryOptions,\n\tcollectibleQueryOptions,\n\ttype FetchCollectibleParams,\n} from '../../../queries/collectible';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseCollectibleParams = Optional<CollectibleQueryOptions, 'config'>;\n\n/**\n * Hook to fetch metadata for a specific collectible\n *\n * This hook retrieves metadata for an individual NFT from a collection,\n * including properties like name, description, image, attributes, etc.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.collectibleId - The token ID of the collectible\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the collectible metadata\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: collectible, isLoading } = useCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x631998e91476da5b870d741192fc5cbc55f5a52e',\n *   collectibleId: '12345'\n * })\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data } = useCollectible({\n *   chainId: 137,\n *   collectionAddress: '0x631998e91476da5b870d741192fc5cbc55f5a52e',\n *   collectibleId: '12345',\n *   query: {\n *     enabled: Boolean(collectionAddress && tokenId),\n *     staleTime: 30_000\n *   }\n * })\n * ```\n */\nexport function useCollectible(params: UseCollectibleParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = collectibleQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { collectibleQueryOptions };\n\nexport type { FetchCollectibleParams, CollectibleQueryOptions };\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype CountOfCollectablesQueryOptions,\n\tcountOfCollectablesQueryOptions,\n\ttype FetchCountOfCollectablesParams,\n} from '../../../queries/countOfCollectables';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseCountOfCollectablesParams = Optional<\n\tCountOfCollectablesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to get the count of collectibles in a market collection\n *\n * Counts either all collectibles or filtered collectibles based on provided parameters.\n * When filter and side parameters are provided, returns count of filtered collectibles.\n * Otherwise returns count of all collectibles in the collection.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.filter - Optional filter criteria for collectibles\n * @param params.side - Optional order side (BUY/SELL) when using filters\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the count of collectibles\n *\n * @example\n * Basic usage (count all collectibles):\n * ```typescript\n * const { data: totalCount, isLoading } = useCountOfCollectables({\n *   chainId: 137,\n *   collectionAddress: '0x...'\n * })\n * ```\n *\n * @example\n * With filters (count filtered collectibles):\n * ```typescript\n * const { data: filteredCount } = useCountOfCollectables({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   filter: { priceRange: { min: '1000000000000000000' } },\n *   side: OrderSide.SELL\n * })\n * ```\n */\nexport function useCountOfCollectables(params: UseCountOfCollectablesParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = countOfCollectablesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { countOfCollectablesQueryOptions };\n\nexport type { FetchCountOfCollectablesParams, CountOfCollectablesQueryOptions };\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchListCollectibleActivitiesParams,\n\ttype fetchListCollectibleActivities,\n\ttype ListCollectibleActivitiesQueryOptions,\n\tlistCollectibleActivitiesQueryOptions,\n} from '../../../queries/listCollectibleActivities';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseListCollectibleActivitiesParams = Optional<\n\tListCollectibleActivitiesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch a list of activities for a specific collectible\n *\n * Fetches activities (transfers, sales, offers, etc.) for a specific token\n * from the marketplace with support for pagination and sorting.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.tokenId - The specific token ID to fetch activities for\n * @param params.page - Page number to fetch (default: 1)\n * @param params.pageSize - Number of activities per page (default: 10)\n * @param params.sort - Sort order for activities\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing activities data\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useListCollectibleActivities({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   tokenId: '123'\n * })\n * ```\n *\n * @example\n * With pagination:\n * ```typescript\n * const { data } = useListCollectibleActivities({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   tokenId: '456',\n *   page: 2,\n *   pageSize: 20\n * })\n * ```\n *\n * @example\n * With sorting:\n * ```typescript\n * const { data } = useListCollectibleActivities({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   tokenId: '789',\n *   sort: 'timestamp_desc',\n *   pageSize: 50\n * })\n * ```\n */\nexport function useListCollectibleActivities(\n\tparams: UseListCollectibleActivitiesParams,\n) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = listCollectibleActivitiesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { listCollectibleActivitiesQueryOptions };\n\nexport type {\n\tFetchListCollectibleActivitiesParams,\n\tListCollectibleActivitiesQueryOptions,\n};\n\n// Legacy exports for backward compatibility during migration\nexport type UseListCollectibleActivitiesArgs =\n\tUseListCollectibleActivitiesParams;\nexport type UseListCollectibleActivitiesReturn = Awaited<\n\tReturnType<typeof fetchListCollectibleActivities>\n>;\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchListCollectiblesPaginatedParams,\n\ttype fetchListCollectiblesPaginated,\n\ttype ListCollectiblesPaginatedQueryOptions,\n\tlistCollectiblesPaginatedQueryOptions,\n} from '../../../queries/listCollectiblesPaginated';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseListCollectiblesPaginatedParams = Optional<\n\tListCollectiblesPaginatedQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch a list of collectibles with pagination support\n *\n * Fetches collectibles from the marketplace with support for filtering and pagination.\n * Unlike the infinite query version, this hook fetches a specific page of results.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.side - Order side (listing or bid)\n * @param params.filter - Optional filtering parameters\n * @param params.page - Page number to fetch (default: 1)\n * @param params.pageSize - Number of items per page (default: 30)\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing collectibles data for the specific page\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useListCollectiblesPaginated({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   side: OrderSide.listing,\n *   page: 1,\n *   pageSize: 20\n * })\n * ```\n *\n * @example\n * With filtering:\n * ```typescript\n * const { data } = useListCollectiblesPaginated({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   side: OrderSide.listing,\n *   page: 2,\n *   pageSize: 50,\n *   filter: {\n *     searchText: 'rare',\n *     includeEmpty: false\n *   }\n * })\n * ```\n *\n * @example\n * Controlled pagination:\n * ```typescript\n * const [currentPage, setCurrentPage] = useState(1);\n * const { data, isLoading } = useListCollectiblesPaginated({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   side: OrderSide.listing,\n *   page: currentPage,\n *   pageSize: 25\n * });\n *\n * const hasMorePages = data?.page?.more;\n * ```\n */\nexport function useListCollectiblesPaginated(\n\tparams: UseListCollectiblesPaginatedParams,\n) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = listCollectiblesPaginatedQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { listCollectiblesPaginatedQueryOptions };\n\nexport type {\n\tFetchListCollectiblesPaginatedParams,\n\tListCollectiblesPaginatedQueryOptions,\n};\n\n// Legacy exports for backward compatibility during migration\nexport type UseListCollectiblesPaginatedArgs =\n\tUseListCollectiblesPaginatedParams;\nexport type UseListCollectiblesPaginatedReturn = Awaited<\n\tReturnType<typeof fetchListCollectiblesPaginated>\n>;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAgB,wBAAwBA,MAAmC;CAC1E,MAAM,SAAS,WAAW;CAC1B,MAAM,EAAE,MAAM,mBAAmB,GAAG,sBAAsB;CAE1D,MAAM,aAAa,mBAAmB,OAAO,YAAY,KACxD,CAACC,iBAAeA,aAAW,iBAAiB,KAAK,kBACjD;CACD,MAAM,YAAY,YAAY,iBAAiB,aAAa;AAE5D,QAAO,SACN,4BACC;EACC,GAAG;EACH;CACA,GACD,OACA,CACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACID,SAAgB,eAAeC,QAA8B;CAC5D,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,wBAAwB;EAC5C;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACZD,SAAgB,uBAAuBC,QAAsC;CAC5E,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,gCAAgC;EACpD;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACGD,SAAgB,6BACfC,QACC;CACD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,sCAAsC;EAC1D;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACND,SAAgB,6BACfC,QACC;CACD,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,sCAAsC;EAC1D;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF"}