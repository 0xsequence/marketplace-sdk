{"version":3,"file":"listBalances-DuufjTG6.js","names":["args: UseListBalancesArgs","config: SdkConfig","page: Page"],"sources":["../src/react/queries/listBalances.ts"],"sourcesContent":["import type { GetTokenBalancesReturn, Page } from '@0xsequence/indexer';\nimport { infiniteQueryOptions } from '@tanstack/react-query';\nimport type { Address, Hex } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport { balanceQueries, getIndexerClient, LaosAPI } from '../_internal';\n\nexport type UseListBalancesArgs = {\n\tchainId: number;\n\taccountAddress?: Address;\n\tcontractAddress?: Address;\n\ttokenId?: string;\n\tincludeMetadata?: boolean;\n\tmetadataOptions?: {\n\t\tverifiedOnly?: boolean;\n\t\tunverifiedOnly?: boolean;\n\t\tincludeContracts?: Hex[];\n\t};\n\tincludeCollectionTokens?: boolean;\n\tpage?: Page;\n\tisLaos721?: boolean;\n\t//TODO: More options\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nexport async function fetchBalances(\n\targs: UseListBalancesArgs,\n\tconfig: SdkConfig,\n\tpage: Page,\n): Promise<GetTokenBalancesReturn> {\n\tif (args.isLaos721 && args.accountAddress) {\n\t\tconst laosClient = new LaosAPI();\n\t\treturn laosClient.getTokenBalances({\n\t\t\tchainId: args.chainId.toString(),\n\t\t\taccountAddress: args.accountAddress,\n\t\t\tcontractAddress: args.contractAddress as Address,\n\t\t\tincludeMetadata: args.includeMetadata,\n\t\t\tpage: {\n\t\t\t\tsort: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcolumn: 'CREATED_AT',\n\t\t\t\t\t\torder: 'DESC',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n\n\tconst indexerClient = getIndexerClient(args.chainId, config);\n\treturn indexerClient.getTokenBalances({\n\t\t...args,\n\t\ttokenID: args.tokenId,\n\t\tpage: page,\n\t});\n}\n\n/**\n * Creates a tanstack infinite query options object for the balances query\n *\n * @param args - The query arguments\n * @param config - SDK configuration\n * @returns Query options configuration\n */\nexport function listBalancesOptions(\n\targs: UseListBalancesArgs,\n\tconfig: SdkConfig,\n) {\n\treturn infiniteQueryOptions({\n\t\t...args.query,\n\t\tqueryKey: [...balanceQueries.lists, args, config],\n\t\tqueryFn: ({ pageParam }) => fetchBalances(args, config, pageParam),\n\t\tinitialPageParam: { page: 1, pageSize: 30 } as Page,\n\t\tgetNextPageParam: (lastPage) => lastPage.page.after,\n\t});\n}\n"],"mappings":";;;;AA0BA,eAAsB,cACrBA,MACAC,QACAC,MACkC;AAClC,KAAI,KAAK,aAAa,KAAK,gBAAgB;EAC1C,MAAM,aAAa,IAAI;AACvB,SAAO,WAAW,iBAAiB;GAClC,SAAS,KAAK,QAAQ,UAAU;GAChC,gBAAgB,KAAK;GACrB,iBAAiB,KAAK;GACtB,iBAAiB,KAAK;GACtB,MAAM,EACL,MAAM,CACL;IACC,QAAQ;IACR,OAAO;GACP,CACD,EACD;EACD,EAAC;CACF;CAED,MAAM,gBAAgB,iBAAiB,KAAK,SAAS,OAAO;AAC5D,QAAO,cAAc,iBAAiB;EACrC,GAAG;EACH,SAAS,KAAK;EACR;CACN,EAAC;AACF;;;;;;;;AASD,SAAgB,oBACfF,MACAC,QACC;AACD,QAAO,qBAAqB;EAC3B,GAAG,KAAK;EACR,UAAU;GAAC,GAAG,eAAe;GAAO;GAAM;EAAO;EACjD,SAAS,CAAC,EAAE,WAAW,KAAK,cAAc,MAAM,QAAQ,UAAU;EAClE,kBAAkB;GAAE,MAAM;GAAG,UAAU;EAAI;EAC3C,kBAAkB,CAAC,aAAa,SAAS,KAAK;CAC9C,EAAC;AACF"}