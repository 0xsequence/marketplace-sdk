{"version":3,"file":"primary-sales-C2j2gjJH.js","names":["args: UseCountOfPrimarySaleItemsArgs","supply: { tokenID: string; supply: string } | undefined","params: UseGetCountParams","queryOptions","params: UseListPrimarySaleItemsParams","queryOptions","hasMintedTokens: boolean","tokenIds: string[]","tokenId: string","tokenIds: string[]","tokenId: string"],"sources":["../src/react/hooks/data/primary-sales/useCountOfPrimarySaleItems.tsx","../src/react/hooks/data/primary-sales/useERC721SaleMintedTokens.tsx","../src/react/hooks/data/primary-sales/useGetCountOfPrimarySaleItems.tsx","../src/react/hooks/data/primary-sales/useListPrimarySaleItems.tsx","../src/react/hooks/data/primary-sales/useList721ShopCardData.tsx","../src/react/hooks/data/primary-sales/useList1155SaleSupplies.tsx","../src/react/hooks/data/primary-sales/useList1155ShopCardData.tsx","../src/react/hooks/data/primary-sales/useListShopCardData.tsx","../src/react/hooks/data/primary-sales/useShopCollectibleSaleData.tsx","../src/react/hooks/data/primary-sales/useTokenSaleDetailsBatch.tsx"],"sourcesContent":["import { useQuery } from '@tanstack/react-query';\nimport {\n\tcountOfPrimarySaleItemsOptions,\n\ttype UseCountOfPrimarySaleItemsArgs,\n} from '../../../queries';\nimport { useConfig } from '../../config/useConfig';\n\nexport function useCountOfPrimarySaleItems(\n\targs: UseCountOfPrimarySaleItemsArgs,\n) {\n\tconst config = useConfig();\n\treturn useQuery(countOfPrimarySaleItemsOptions(args, config));\n}\n","import type { Address } from 'viem';\nimport { useReadContract } from 'wagmi';\nimport { ERC721_SALE_ABI } from '../../../../utils/abi/primary-sale/sequence-721-sales-contract';\nimport { useTokenSupplies } from '../tokens/useTokenSupplies';\n\ninterface UseERC721SaleMintedTokensProps {\n\tchainId: number;\n\tcontractAddress: Address;\n\tsalesContractAddress: Address;\n\tenabled?: boolean;\n\ttokenIds: string[];\n}\n\nexport function useERC721SaleMintedTokens({\n\tchainId,\n\tcontractAddress,\n\tsalesContractAddress,\n\ttokenIds,\n\tenabled = true,\n}: UseERC721SaleMintedTokensProps) {\n\tconst {\n\t\tdata: saleDetails,\n\t\tisLoading: saleDetailsLoading,\n\t\terror: saleDetailsError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: salesContractAddress,\n\t\tabi: ERC721_SALE_ABI,\n\t\tfunctionName: 'saleDetails',\n\t\tquery: {\n\t\t\tenabled,\n\t\t},\n\t});\n\n\t// Get token supplies for all potential tokens in the sale\n\tconst { data: tokenSupplies, isLoading: tokenSuppliesLoading } =\n\t\tuseTokenSupplies({\n\t\t\tchainId,\n\t\t\tcollectionAddress: contractAddress as Address,\n\t\t});\n\n\tconst isLoading = saleDetailsLoading || tokenSuppliesLoading;\n\n\t// Count how many tokens have been minted/owned\n\tconst ownedCount = tokenIds.reduce((count, tokenId) => {\n\t\tlet supply: { tokenID: string; supply: string } | undefined;\n\n\t\tif (tokenSupplies) {\n\t\t\tsupply = tokenSupplies.tokenIDs.find((s) => s.tokenID === tokenId);\n\t\t}\n\n\t\t// If supply exists and is greater than 0, token exists and is owned\n\t\tconst hasOwner = supply ? BigInt(supply.supply) > 0n : false;\n\t\treturn count + (hasOwner ? 1 : 0);\n\t}, 0);\n\n\tconst totalSupplyCap = saleDetails?.supplyCap\n\t\t? Number(saleDetails.supplyCap)\n\t\t: 0;\n\tconst remainingCount = Math.max(0, totalSupplyCap - ownedCount);\n\n\treturn {\n\t\townedCount,\n\t\ttotalSupplyCap,\n\t\tremainingCount,\n\t\tisLoading,\n\t\terror: saleDetailsError,\n\t\tsaleDetails,\n\t};\n}\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport type { ListPrimarySaleItemsQueryOptions } from '../../../queries/primarySaleItems';\nimport { primarySaleItemsCountQueryOptions } from '../../../queries/primarySaleItemsCount';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseGetCountParams = Optional<\n\tListPrimarySaleItemsQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to get the total count of primary sale items\n *\n * Retrieves the total count of primary sale items for a specific contract address\n * from the marketplace.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.primarySaleContractAddress - The primary sale contract address\n * @param params.filter - Optional filter parameters for the query\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing the count of primary sale items\n *\n * @example\n * ```typescript\n * const { data: count, isLoading } = useGetCountOfPrimarySaleItems({\n *   chainId: 137,\n *   primarySaleContractAddress: '0x...',\n * })\n * ```\n */\nexport function useGetCountOfPrimarySaleItems(params: UseGetCountParams) {\n\tconst defaultConfig = useConfig();\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = primarySaleItemsCountQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery(queryOptions);\n}\n\nexport type { ListPrimarySaleItemsQueryOptions };\n","'use client';\n\nimport { useInfiniteQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype ListPrimarySaleItemsQueryOptions,\n\tlistPrimarySaleItemsQueryOptions,\n} from '../../../queries/primarySaleItems';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseListPrimarySaleItemsParams = Optional<\n\tListPrimarySaleItemsQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch primary sale items with pagination support\n *\n * Retrieves a paginated list of primary sale items for a specific contract address\n * from the marketplace.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.primarySaleContractAddress - The primary sale contract address\n * @param params.filter - Optional filter parameters for the query\n * @param params.page - Optional pagination parameters\n * @param params.query - Optional React Query configuration\n *\n * @returns Infinite query result containing the primary sale items data\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useListPrimarySaleItems({\n *   chainId: 137,\n *   primarySaleContractAddress: '0x...',\n * })\n * ```\n *\n * @example\n * With filters and pagination:\n * ```typescript\n * const { data, isLoading } = useListPrimarySaleItems({\n *   chainId: 1,\n *   primarySaleContractAddress: '0x...',\n *   filter: { status: 'active' },\n *   page: { page: 1, pageSize: 20 },\n *   query: {\n *     enabled: isReady\n *   }\n * })\n * ```\n */\nexport function useListPrimarySaleItems(params: UseListPrimarySaleItemsParams) {\n\tconst defaultConfig = useConfig();\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = listPrimarySaleItemsQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useInfiniteQuery(queryOptions);\n}\n\nexport type { ListPrimarySaleItemsQueryOptions };\n","import type { Address } from 'viem';\nimport { useReadContract } from 'wagmi';\nimport { ERC721_SALE_ABI } from '../../../../utils/abi/primary-sale/sequence-721-sales-contract';\nimport {\n\tContractType,\n\tOrderSide,\n\ttype TokenMetadata,\n} from '../../../_internal';\nimport type { ShopCollectibleCardProps } from '../../../ui';\nimport { useFilterState } from '../../ui/useFilterState';\nimport { useListCollectibles } from '../collectibles/useListCollectibles';\nimport { useListPrimarySaleItems } from '../primary-sales/useListPrimarySaleItems';\n\ninterface UseList721ShopCardDataProps {\n\ttokenIds: string[];\n\tchainId: number;\n\tcontractAddress: Address;\n\tsalesContractAddress: Address;\n\tenabled?: boolean;\n}\n\nexport function useList721ShopCardData({\n\ttokenIds,\n\tchainId,\n\tcontractAddress,\n\tsalesContractAddress,\n\tenabled = true,\n}: UseList721ShopCardDataProps) {\n\tconst { showListedOnly } = useFilterState();\n\n\tconst {\n\t\tdata: primarySaleItems,\n\t\tisLoading: primarySaleItemsLoading,\n\t\terror: primarySaleItemsError,\n\t} = useListPrimarySaleItems({\n\t\tchainId,\n\t\tprimarySaleContractAddress: salesContractAddress,\n\t\tfilter: {\n\t\t\tincludeEmpty: !showListedOnly,\n\t\t},\n\t});\n\n\t// Check if we have minted tokens by looking at the first available token ID\n\tconst firstAvailableTokenId =\n\t\tprimarySaleItems?.pages[0]?.primarySaleItems[0]?.primarySaleItem.tokenId?.toString();\n\tconst hasMintedTokens: boolean =\n\t\tBoolean(firstAvailableTokenId) && Number(firstAvailableTokenId) > 0;\n\n\t// Fetch metadata for minted tokens\n\tconst { data: mintedTokensMetadata, isLoading: mintedTokensMetadataLoading } =\n\t\tuseListCollectibles({\n\t\t\tchainId,\n\t\t\tcollectionAddress: contractAddress,\n\t\t\tside: OrderSide.listing,\n\t\t\tfilter: {\n\t\t\t\tincludeEmpty: true,\n\t\t\t},\n\t\t\tquery: {\n\t\t\t\tenabled: enabled && hasMintedTokens,\n\t\t\t},\n\t\t});\n\n\t// For ERC721, we'll fetch the sale details directly from the contract\n\tconst {\n\t\tdata: saleDetails,\n\t\tisLoading: saleDetailsLoading,\n\t\terror: saleDetailsError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: salesContractAddress,\n\t\tabi: ERC721_SALE_ABI,\n\t\tfunctionName: 'saleDetails',\n\t\tquery: {\n\t\t\tenabled,\n\t\t},\n\t});\n\n\tconst isLoading =\n\t\tsaleDetailsLoading ||\n\t\tprimarySaleItemsLoading ||\n\t\tmintedTokensMetadataLoading;\n\n\t// Create a map of token metadata from minted tokens\n\tconst mintedTokensMetadataMap = new Map<string, TokenMetadata>();\n\tfor (const page of mintedTokensMetadata?.pages ?? []) {\n\t\tfor (const collectible of page.collectibles) {\n\t\t\tmintedTokensMetadataMap.set(\n\t\t\t\tcollectible.metadata.tokenId,\n\t\t\t\tcollectible.metadata,\n\t\t\t);\n\t\t}\n\t}\n\n\tconst collectibleCards = tokenIds.map((tokenId) => {\n\t\tconst minted =\n\t\t\thasMintedTokens && Number(tokenId) < Number(firstAvailableTokenId);\n\n\t\tconst matchingPrimarySaleItem = primarySaleItems?.pages\n\t\t\t.find((item) =>\n\t\t\t\titem.primarySaleItems.find(\n\t\t\t\t\t(primarySaleItem) =>\n\t\t\t\t\t\tprimarySaleItem.primarySaleItem.tokenId?.toString() === tokenId,\n\t\t\t\t),\n\t\t\t)\n\t\t\t?.primarySaleItems.find(\n\t\t\t\t(primarySaleItem) =>\n\t\t\t\t\tprimarySaleItem.primarySaleItem.tokenId?.toString() === tokenId,\n\t\t\t);\n\n\t\tconst saleData = matchingPrimarySaleItem?.primarySaleItem;\n\t\tlet tokenMetadata = matchingPrimarySaleItem?.metadata;\n\n\t\t// If token is minted, prefer metadata from mintedTokensMetadata\n\t\tif (minted && mintedTokensMetadataMap.has(tokenId)) {\n\t\t\ttokenMetadata = mintedTokensMetadataMap.get(tokenId);\n\t\t}\n\t\t// Fallback to empty metadata if none found\n\t\ttokenMetadata = tokenMetadata || ({} as TokenMetadata);\n\n\t\tconst salePrice = saleData\n\t\t\t? {\n\t\t\t\t\tamount: saleData.priceAmount?.toString() || '',\n\t\t\t\t\tcurrencyAddress: saleData.currencyAddress as Address,\n\t\t\t\t}\n\t\t\t: {\n\t\t\t\t\tamount: saleDetails?.cost?.toString() || '',\n\t\t\t\t\tcurrencyAddress: saleDetails?.paymentToken ?? ('0x' as Address),\n\t\t\t\t};\n\n\t\tconst quantityInitial =\n\t\t\tsaleData?.supply?.toString() ??\n\t\t\t(saleDetails?.supplyCap ? saleDetails.supplyCap.toString() : undefined);\n\n\t\tconst quantityRemaining = minted ? undefined : '1';\n\n\t\tconst saleStartsAt =\n\t\t\tsaleData?.startDate?.toString() ?? saleDetails?.startTime?.toString();\n\n\t\tconst saleEndsAt =\n\t\t\tsaleData?.endDate?.toString() ?? saleDetails?.endTime?.toString();\n\n\t\treturn {\n\t\t\tcollectibleId: tokenId,\n\t\t\tchainId,\n\t\t\tcollectionAddress: contractAddress,\n\t\t\tcollectionType: ContractType.ERC721,\n\t\t\ttokenMetadata,\n\t\t\tcardLoading: isLoading,\n\t\t\tsalesContractAddress: salesContractAddress,\n\t\t\tsalePrice,\n\t\t\tquantityInitial,\n\t\t\tquantityRemaining,\n\t\t\tquantityDecimals: 0,\n\t\t\tsaleStartsAt,\n\t\t\tsaleEndsAt,\n\t\t\tmarketplaceType: 'shop',\n\t\t} satisfies ShopCollectibleCardProps;\n\t});\n\n\treturn {\n\t\tsalePrice: collectibleCards[0]?.salePrice,\n\t\tcollectibleCards,\n\t\tsaleDetailsError,\n\t\tprimarySaleItemsError,\n\t\tsaleDetails,\n\t\tprimarySaleItems,\n\t\tisLoading,\n\t};\n}\n","import { getUnixTime } from 'date-fns';\nimport type { Address } from 'viem';\nimport { useReadContracts } from 'wagmi';\nimport { ERC1155_SALES_CONTRACT_ABI } from '../../../..';\n\ninterface UseSaleSupplyDataProps {\n\ttokenIds: string[];\n\tsalesContractAddress: Address;\n}\n\nexport function useList1155SaleSupplies({\n\ttokenIds,\n\tsalesContractAddress,\n}: UseSaleSupplyDataProps) {\n\tconst getReadContractsArgs = (tokenIds: string[]) =>\n\t\ttokenIds.map((tokenId) => ({\n\t\t\taddress: salesContractAddress,\n\t\t\tabi: ERC1155_SALES_CONTRACT_ABI,\n\t\t\tfunctionName: 'tokenSaleDetails',\n\t\t\targs: [tokenId],\n\t\t}));\n\n\tconst {\n\t\tdata: supplyData,\n\t\tisLoading: supplyDataLoading,\n\t\terror: supplyDataError,\n\t} = useReadContracts({\n\t\tbatchSize: 500_000, // Node gateway limit has a limit of 512kB, setting it to 500kB to be safe\n\t\tcontracts: getReadContractsArgs(tokenIds),\n\t});\n\n\tconst extendedSupplyData = (supplyData || [])\n\t\t.map((data, index) => ({\n\t\t\t...data,\n\t\t\ttokenId: tokenIds[index],\n\t\t}))\n\t\t.filter((data) => data.status === 'success')\n\t\t.filter((data) => {\n\t\t\tif (typeof data.result !== 'object') return false;\n\t\t\tconst now = BigInt(getUnixTime(new Date()));\n\t\t\treturn data.result.endTime > now && data.result.startTime < now;\n\t\t});\n\n\tconst getSupply = (tokenId: string): number | undefined => {\n\t\tconst found = extendedSupplyData.find((data) => data.tokenId === tokenId);\n\t\tif (!found || typeof found.result !== 'object' || found.result === null)\n\t\t\treturn undefined;\n\t\tconst supply = found.result.supplyCap;\n\t\tif (supply === undefined) return undefined;\n\t\t// https://github.com/0xsequence/contracts-library/blob/ead1baf34270c76260d01cfc130bb7cc9d57518e/src/tokens/ERC1155/utility/sale/IERC1155Sale.sol#L8\n\t\t// 0 means infinite\n\t\tif (supply === 0n) return Number.POSITIVE_INFINITY;\n\t\treturn Number(supply);\n\t};\n\n\treturn {\n\t\textendedSupplyData,\n\t\tgetSupply,\n\t\tsupplyDataLoading,\n\t\tsupplyDataError,\n\t};\n}\n","import type { Address } from 'viem';\nimport { useReadContract } from 'wagmi';\nimport { ERC1155_SALES_CONTRACT_ABI } from '../../../../utils/abi/primary-sale/sequence-1155-sales-contract';\nimport { ContractType, type TokenMetadata } from '../../../_internal';\nimport type { ShopCollectibleCardProps } from '../../../ui/components/marketplace-collectible-card/types';\nimport { useFilterState } from '../../ui/useFilterState';\nimport { useCollection } from '../collections/useCollection';\nimport { useListPrimarySaleItems } from '../primary-sales/useListPrimarySaleItems';\n\ninterface UseList1155ShopCardDataProps {\n\ttokenIds: string[];\n\tchainId: number;\n\tcontractAddress: Address;\n\tsalesContractAddress: Address;\n\tenabled?: boolean;\n}\n\nexport function useList1155ShopCardData({\n\ttokenIds,\n\tchainId,\n\tcontractAddress,\n\tsalesContractAddress,\n\tenabled = true,\n}: UseList1155ShopCardDataProps) {\n\tconst { showListedOnly } = useFilterState();\n\tconst {\n\t\tdata: primarySaleItems,\n\t\tisLoading: primarySaleItemsLoading,\n\t\terror: primarySaleItemsError,\n\t} = useListPrimarySaleItems({\n\t\tchainId,\n\t\tprimarySaleContractAddress: salesContractAddress,\n\t\tfilter: {\n\t\t\tincludeEmpty: !showListedOnly,\n\t\t},\n\t});\n\n\tconst { data: collection, isLoading: collectionLoading } = useCollection({\n\t\tchainId,\n\t\tcollectionAddress: contractAddress,\n\t});\n\n\tconst { data: paymentToken, isLoading: paymentTokenLoading } =\n\t\tuseReadContract({\n\t\t\tchainId,\n\t\t\taddress: salesContractAddress,\n\t\t\tabi: ERC1155_SALES_CONTRACT_ABI,\n\t\t\tfunctionName: 'paymentToken',\n\t\t\tquery: {\n\t\t\t\tenabled,\n\t\t\t},\n\t\t});\n\n\tconst isLoading =\n\t\tprimarySaleItemsLoading || collectionLoading || paymentTokenLoading;\n\n\t// Flatten all collectibles from all pages\n\tconst allPrimarySaleItems =\n\t\tprimarySaleItems?.pages.flatMap((page) => page.primarySaleItems) ?? [];\n\n\tconst collectibleCards = tokenIds.map((tokenId) => {\n\t\tconst matchingPrimarySaleItem = allPrimarySaleItems.find(\n\t\t\t(item) => item.primarySaleItem.tokenId?.toString() === tokenId,\n\t\t);\n\n\t\tconst saleData = matchingPrimarySaleItem?.primarySaleItem;\n\t\tconst tokenMetadata =\n\t\t\tmatchingPrimarySaleItem?.metadata || ({} as TokenMetadata);\n\n\t\tconst salePrice = {\n\t\t\tamount: saleData?.priceAmount?.toString() || '',\n\t\t\tcurrencyAddress: (saleData?.currencyAddress ||\n\t\t\t\tpaymentToken ||\n\t\t\t\t'0x') as Address,\n\t\t};\n\n\t\tconst supply = saleData?.supply?.toString();\n\t\tconst unlimitedSupply = saleData?.unlimitedSupply;\n\n\t\treturn {\n\t\t\tcollectibleId: tokenId,\n\t\t\tchainId,\n\t\t\tcollectionAddress: contractAddress,\n\t\t\tcollectionType: ContractType.ERC1155,\n\t\t\ttokenMetadata: tokenMetadata,\n\t\t\tcardLoading: isLoading,\n\t\t\tsalesContractAddress: salesContractAddress,\n\t\t\tsalePrice,\n\t\t\tquantityInitial: supply,\n\t\t\tquantityDecimals: collection?.decimals || 0,\n\t\t\tquantityRemaining: supply,\n\t\t\tunlimitedSupply,\n\t\t\tsaleStartsAt: saleData?.startDate?.toString(),\n\t\t\tsaleEndsAt: saleData?.endDate?.toString(),\n\t\t\tmarketplaceType: 'shop',\n\t\t} satisfies ShopCollectibleCardProps;\n\t});\n\n\treturn {\n\t\tcollectibleCards,\n\t\ttokenMetadataError: primarySaleItemsError,\n\t\ttokenSaleDetailsError: null,\n\t\tisLoading,\n\t};\n}\n","import type { Address } from 'viem';\nimport { ContractType } from '../../../_internal';\nimport { useList721ShopCardData } from './useList721ShopCardData';\nimport { useList1155ShopCardData } from './useList1155ShopCardData';\n\ninterface UseListShopCardDataProps {\n\ttokenIds: string[];\n\tchainId: number;\n\tcontractAddress: Address;\n\tsalesContractAddress: Address;\n\tcontractType: ContractType | undefined;\n\tenabled?: boolean;\n}\n\nexport function useListShopCardData({\n\ttokenIds,\n\tchainId,\n\tcontractAddress,\n\tsalesContractAddress,\n\tcontractType,\n\tenabled = true,\n}: UseListShopCardDataProps) {\n\tconst shouldUse721 = contractType === ContractType.ERC721;\n\tconst shouldUse1155 = contractType === ContractType.ERC1155;\n\n\tconst erc721Data = useList721ShopCardData({\n\t\ttokenIds,\n\t\tchainId,\n\t\tcontractAddress,\n\t\tsalesContractAddress,\n\t\tenabled: enabled && shouldUse721,\n\t});\n\n\tconst erc1155Data = useList1155ShopCardData({\n\t\ttokenIds,\n\t\tchainId,\n\t\tcontractAddress,\n\t\tsalesContractAddress,\n\t\tenabled: enabled && shouldUse1155,\n\t});\n\n\tif (shouldUse721) {\n\t\treturn erc721Data;\n\t}\n\n\tif (shouldUse1155) {\n\t\t// Map ERC1155 data to match ERC721 structure\n\t\treturn {\n\t\t\tcollectibleCards: erc1155Data.collectibleCards,\n\t\t\tisLoading: erc1155Data.isLoading,\n\t\t\tsaleDetailsError: erc1155Data.tokenSaleDetailsError,\n\t\t\tprimarySaleItemsError: erc1155Data.tokenMetadataError,\n\t\t\tsaleDetails: undefined,\n\t\t\tprimarySaleItems: undefined,\n\t\t\tsalePrice: erc1155Data.collectibleCards[0]?.salePrice,\n\t\t};\n\t}\n\n\t// Return a default state when contract type is not determined yet\n\treturn {\n\t\tcollectibleCards: [],\n\t\tisLoading: !contractType,\n\t\tcollectionDetailsError: null,\n\t\tsaleDetailsError: null,\n\t\tprimarySaleItemsError: null,\n\t\tsaleDetails: undefined,\n\t\tprimarySaleItems: undefined,\n\t\tsalePrice: undefined,\n\t};\n}\n","import { useMemo } from 'react';\n\nimport type { Address } from 'viem';\nimport { useReadContract } from 'wagmi';\nimport {\n\tERC721_ABI,\n\tERC721_SALE_ABI,\n\tERC1155_SALES_CONTRACT_ABI,\n\tSEQUENCE_1155_ITEMS_ABI,\n} from '../../../../utils';\nimport { ContractType } from '../../../_internal';\n\ninterface ShopCollectibleSaleData {\n\tsalePrice: { amount: string; currencyAddress: Address } | null;\n\tpaymentToken: Address | null;\n\tsupplyCap: string;\n\ttotalMinted: string;\n\tquantityRemaining: string;\n\tstartTime: number | null;\n\tendTime: number | null;\n\tisActive: boolean;\n\tisLoading: boolean;\n\terror: Error | null;\n\tisAvailable: boolean;\n}\n\ninterface BaseShopCollectibleSaleDataProps {\n\tchainId: number;\n\tsalesContractAddress: Address;\n\titemsContractAddress: Address;\n\tenabled?: boolean;\n}\n\ninterface ERC721ShopCollectibleSaleDataProps\n\textends BaseShopCollectibleSaleDataProps {\n\tcollectionType: ContractType.ERC721;\n\ttokenId?: string;\n}\n\ninterface ERC1155ShopCollectibleSaleDataProps\n\textends BaseShopCollectibleSaleDataProps {\n\tcollectionType: ContractType.ERC1155;\n\ttokenId: string;\n}\n\ntype UseShopCollectibleSaleDataProps =\n\t| ERC721ShopCollectibleSaleDataProps\n\t| ERC1155ShopCollectibleSaleDataProps;\n\nexport function useShopCollectibleSaleData({\n\tchainId,\n\tsalesContractAddress,\n\titemsContractAddress,\n\ttokenId,\n\tcollectionType,\n\tenabled = true,\n}: UseShopCollectibleSaleDataProps): ShopCollectibleSaleData {\n\t// ERC721 Sales Contract Calls\n\tconst {\n\t\tdata: erc721SaleDetails,\n\t\tisLoading: erc721SaleLoading,\n\t\terror: erc721SaleError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: salesContractAddress,\n\t\tabi: ERC721_SALE_ABI,\n\t\tfunctionName: 'saleDetails',\n\t\tquery: {\n\t\t\tenabled: enabled && collectionType === ContractType.ERC721,\n\t\t},\n\t});\n\n\tconst {\n\t\tdata: erc721TotalSupply,\n\t\tisLoading: erc721SupplyLoading,\n\t\terror: erc721SupplyError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: itemsContractAddress,\n\t\tabi: ERC721_ABI,\n\t\tfunctionName: 'totalSupply',\n\t\tquery: {\n\t\t\tenabled: enabled && collectionType === ContractType.ERC721,\n\t\t},\n\t});\n\n\t// ERC1155 Sales Contract Calls\n\tconst {\n\t\tdata: erc1155TokenSaleDetails,\n\t\tisLoading: erc1155TokenSaleLoading,\n\t\terror: erc1155TokenSaleError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: salesContractAddress,\n\t\tabi: ERC1155_SALES_CONTRACT_ABI,\n\t\tfunctionName: 'tokenSaleDetails',\n\t\targs:\n\t\t\tcollectionType === ContractType.ERC1155 ? [BigInt(tokenId)] : undefined,\n\t\tquery: {\n\t\t\tenabled: enabled && collectionType === ContractType.ERC1155,\n\t\t},\n\t});\n\n\tconst {\n\t\tdata: erc1155GlobalSaleDetails,\n\t\tisLoading: erc1155GlobalSaleLoading,\n\t\terror: erc1155GlobalSaleError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: salesContractAddress,\n\t\tabi: ERC1155_SALES_CONTRACT_ABI,\n\t\tfunctionName: 'globalSaleDetails',\n\t\tquery: {\n\t\t\tenabled: enabled && collectionType === ContractType.ERC1155,\n\t\t},\n\t});\n\n\tconst {\n\t\tdata: erc1155PaymentToken,\n\t\tisLoading: erc1155PaymentTokenLoading,\n\t\terror: erc1155PaymentTokenError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: salesContractAddress,\n\t\tabi: ERC1155_SALES_CONTRACT_ABI,\n\t\tfunctionName: 'paymentToken',\n\t\tquery: {\n\t\t\tenabled: enabled && collectionType === ContractType.ERC1155,\n\t\t},\n\t});\n\n\tconst {\n\t\tdata: erc1155TotalSupply,\n\t\tisLoading: erc1155SupplyLoading,\n\t\terror: erc1155SupplyError,\n\t} = useReadContract({\n\t\tchainId,\n\t\taddress: itemsContractAddress,\n\t\tabi: SEQUENCE_1155_ITEMS_ABI,\n\t\tfunctionName: 'totalSupply',\n\t\tquery: {\n\t\t\tenabled: enabled && collectionType === ContractType.ERC1155,\n\t\t},\n\t});\n\n\treturn useMemo(() => {\n\t\tconst isLoading =\n\t\t\tcollectionType === ContractType.ERC721\n\t\t\t\t? erc721SaleLoading || erc721SupplyLoading\n\t\t\t\t: erc1155TokenSaleLoading ||\n\t\t\t\t\terc1155GlobalSaleLoading ||\n\t\t\t\t\terc1155PaymentTokenLoading ||\n\t\t\t\t\terc1155SupplyLoading;\n\n\t\tconst error =\n\t\t\tcollectionType === ContractType.ERC721\n\t\t\t\t? erc721SaleError || erc721SupplyError\n\t\t\t\t: erc1155TokenSaleError ||\n\t\t\t\t\terc1155GlobalSaleError ||\n\t\t\t\t\terc1155PaymentTokenError ||\n\t\t\t\t\terc1155SupplyError;\n\n\t\tif (isLoading) {\n\t\t\treturn {\n\t\t\t\tsalePrice: null,\n\t\t\t\tpaymentToken: null,\n\t\t\t\tsupplyCap: '0',\n\t\t\t\ttotalMinted: '0',\n\t\t\t\tquantityRemaining: '0',\n\t\t\t\tstartTime: null,\n\t\t\t\tendTime: null,\n\t\t\t\tisActive: false,\n\t\t\t\tisLoading: true,\n\t\t\t\terror: null,\n\t\t\t\tisAvailable: false,\n\t\t\t};\n\t\t}\n\n\t\tif (error) {\n\t\t\treturn {\n\t\t\t\tsalePrice: null,\n\t\t\t\tpaymentToken: null,\n\t\t\t\tsupplyCap: '0',\n\t\t\t\ttotalMinted: '0',\n\t\t\t\tquantityRemaining: '0',\n\t\t\t\tstartTime: null,\n\t\t\t\tendTime: null,\n\t\t\t\tisActive: false,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: error as Error,\n\t\t\t\tisAvailable: false,\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcollectionType === ContractType.ERC721 &&\n\t\t\terc721SaleDetails &&\n\t\t\terc721TotalSupply !== undefined\n\t\t) {\n\t\t\tconst saleDetails = erc721SaleDetails as {\n\t\t\t\tsupplyCap: bigint;\n\t\t\t\tcost: bigint;\n\t\t\t\tpaymentToken: Address;\n\t\t\t\tstartTime: bigint;\n\t\t\t\tendTime: bigint;\n\t\t\t\tmerkleRoot: string;\n\t\t\t};\n\n\t\t\tconst supplyCap = saleDetails.supplyCap.toString();\n\t\t\tconst totalMinted = erc721TotalSupply.toString();\n\t\t\tconst quantityRemaining = (\n\t\t\t\tsaleDetails.supplyCap - erc721TotalSupply\n\t\t\t).toString();\n\n\t\t\tconst now = Math.floor(Date.now() / 1000);\n\t\t\tconst startTime = Number(saleDetails.startTime);\n\t\t\tconst endTime = Number(saleDetails.endTime);\n\t\t\tconst isActive = now >= startTime && now <= endTime;\n\n\t\t\treturn {\n\t\t\t\tsalePrice: {\n\t\t\t\t\tamount: saleDetails.cost.toString(),\n\t\t\t\t\tcurrencyAddress: saleDetails.paymentToken,\n\t\t\t\t},\n\t\t\t\tpaymentToken: saleDetails.paymentToken,\n\t\t\t\tsupplyCap,\n\t\t\t\ttotalMinted,\n\t\t\t\tquantityRemaining,\n\t\t\t\tstartTime,\n\t\t\t\tendTime,\n\t\t\t\tisActive,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: null,\n\t\t\t\tisAvailable: BigInt(quantityRemaining) > 0 && isActive,\n\t\t\t};\n\t\t}\n\n\t\tif (\n\t\t\tcollectionType === ContractType.ERC1155 &&\n\t\t\terc1155PaymentToken &&\n\t\t\terc1155TotalSupply !== undefined &&\n\t\t\t(erc1155TokenSaleDetails || erc1155GlobalSaleDetails)\n\t\t) {\n\t\t\t// Type the sale details structures\n\t\t\ttype SaleDetails = {\n\t\t\t\tcost: bigint;\n\t\t\t\tsupplyCap: bigint;\n\t\t\t\tstartTime: bigint;\n\t\t\t\tendTime: bigint;\n\t\t\t\tmerkleRoot: string;\n\t\t\t};\n\n\t\t\tconst tokenSaleDetails = erc1155TokenSaleDetails as\n\t\t\t\t| SaleDetails\n\t\t\t\t| undefined;\n\t\t\tconst globalSaleDetails = erc1155GlobalSaleDetails as\n\t\t\t\t| SaleDetails\n\t\t\t\t| undefined;\n\n\t\t\t// If token-specific details have zero values, use global as fallback\n\t\t\tconst useGlobal = tokenSaleDetails && tokenSaleDetails.supplyCap === 0n;\n\t\t\tconst finalSaleDetails = useGlobal\n\t\t\t\t? globalSaleDetails\n\t\t\t\t: tokenSaleDetails || globalSaleDetails;\n\n\t\t\tif (!finalSaleDetails) {\n\t\t\t\treturn {\n\t\t\t\t\tsalePrice: null,\n\t\t\t\t\tpaymentToken: null,\n\t\t\t\t\tsupplyCap: '0',\n\t\t\t\t\ttotalMinted: '0',\n\t\t\t\t\tquantityRemaining: '0',\n\t\t\t\t\tstartTime: null,\n\t\t\t\t\tendTime: null,\n\t\t\t\t\tisActive: false,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t\terror: null,\n\t\t\t\t\tisAvailable: false,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconst supplyCap = finalSaleDetails.supplyCap.toString();\n\t\t\tconst totalMintedBigInt = erc1155TotalSupply\n\t\t\t\t? BigInt(erc1155TotalSupply as bigint)\n\t\t\t\t: 0n;\n\t\t\tconst totalMinted = totalMintedBigInt.toString();\n\t\t\tconst quantityRemaining = (\n\t\t\t\tfinalSaleDetails.supplyCap - totalMintedBigInt\n\t\t\t).toString();\n\n\t\t\tconst now = Math.floor(Date.now() / 1000);\n\t\t\tconst startTime = Number(finalSaleDetails.startTime);\n\t\t\tconst endTime = Number(finalSaleDetails.endTime);\n\t\t\tconst isActive = now >= startTime && now <= endTime;\n\n\t\t\treturn {\n\t\t\t\tsalePrice: {\n\t\t\t\t\tamount: finalSaleDetails.cost.toString(),\n\t\t\t\t\tcurrencyAddress: erc1155PaymentToken,\n\t\t\t\t},\n\t\t\t\tpaymentToken: erc1155PaymentToken,\n\t\t\t\tsupplyCap,\n\t\t\t\ttotalMinted,\n\t\t\t\tquantityRemaining,\n\t\t\t\tstartTime,\n\t\t\t\tendTime,\n\t\t\t\tisActive,\n\t\t\t\tisLoading: false,\n\t\t\t\terror: null,\n\t\t\t\tisAvailable: BigInt(quantityRemaining) > 0 && isActive,\n\t\t\t};\n\t\t}\n\n\t\t// No valid data found\n\t\treturn {\n\t\t\tsalePrice: null,\n\t\t\tpaymentToken: null,\n\t\t\tsupplyCap: '0',\n\t\t\ttotalMinted: '0',\n\t\t\tquantityRemaining: '0',\n\t\t\tstartTime: null,\n\t\t\tendTime: null,\n\t\t\tisActive: false,\n\t\t\tisLoading: false,\n\t\t\terror: null,\n\t\t\tisAvailable: false,\n\t\t};\n\t}, [\n\t\tcollectionType,\n\t\terc721SaleDetails,\n\t\terc721TotalSupply,\n\t\terc721SaleLoading,\n\t\terc721SupplyLoading,\n\t\terc721SaleError,\n\t\terc721SupplyError,\n\t\terc1155TokenSaleDetails,\n\t\terc1155GlobalSaleDetails,\n\t\terc1155PaymentToken,\n\t\terc1155TotalSupply,\n\t\terc1155TokenSaleLoading,\n\t\terc1155GlobalSaleLoading,\n\t\terc1155PaymentTokenLoading,\n\t\terc1155SupplyLoading,\n\t\terc1155TokenSaleError,\n\t\terc1155GlobalSaleError,\n\t\terc1155PaymentTokenError,\n\t\terc1155SupplyError,\n\t]);\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { getUnixTime } from 'date-fns';\nimport type { Address } from 'viem';\nimport { useReadContracts } from 'wagmi';\nimport { ERC1155_SALES_CONTRACT_ABI } from '../../../..';\nimport { getIndexerClient } from '../../../_internal';\nimport { useConfig } from '../../config/useConfig';\n\ninterface useTokenSaleDetailsBatch {\n\ttokenIds: string[];\n\tsalesContractAddress: Address;\n\tcollectionAddress: Address;\n\tchainId: number;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n}\n\nexport function useTokenSaleDetailsBatch({\n\ttokenIds,\n\tsalesContractAddress,\n\tchainId,\n\tcollectionAddress,\n\tquery,\n}: useTokenSaleDetailsBatch) {\n\tconst config = useConfig();\n\tconst indexerClient = getIndexerClient(chainId, config);\n\n\tconst getReadContractsArgs = (tokenIds: string[]) =>\n\t\ttokenIds.map((tokenId) => ({\n\t\t\taddress: salesContractAddress,\n\t\t\tabi: ERC1155_SALES_CONTRACT_ABI,\n\t\t\tfunctionName: 'tokenSaleDetails',\n\t\t\targs: [tokenId],\n\t\t\tchainId,\n\t\t}));\n\n\tconst {\n\t\tdata: tokenSaleDetails,\n\t\tisLoading: tokenSaleDetailsLoading,\n\t\terror: tokenSaleDetailsError,\n\t} = useReadContracts({\n\t\tbatchSize: 500_000, // Node gateway limit has a limit of 512kB, setting it to 500kB to be safe\n\t\tcontracts: getReadContractsArgs(tokenIds),\n\t\tquery: {\n\t\t\tenabled: query?.enabled,\n\t\t},\n\t});\n\n\t// Query token supplies individually using the indexer client:\n\t/*\n\tThis way, if token 4 isn't minted, we can still get the supply information for tokens 0-3, and just treat token 4's supply as 0 (unminted). \n\tThe problem is essentially that one unminted token was poisoning the entire response when querying all tokens at once.\n\t*/\n\tconst {\n\t\tdata: tokenSupplies,\n\t\tisLoading: tokenSuppliesLoading,\n\t\terror: tokenSuppliesError,\n\t} = useQuery({\n\t\tqueryKey: ['token-supplies-batch', chainId, collectionAddress, tokenIds],\n\t\tqueryFn: async () => {\n\t\t\tconst supplies = await Promise.all(\n\t\t\t\ttokenIds.map(async (tokenId) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = await indexerClient.getTokenSupplies({\n\t\t\t\t\t\t\tcontractAddress: collectionAddress,\n\t\t\t\t\t\t\tincludeMetadata: false,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst supply = result.tokenIDs?.find((s) => s.tokenID === tokenId);\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttokenId,\n\t\t\t\t\t\t\tsupply: supply ? Number(supply.supply) : 0,\n\t\t\t\t\t\t\terror: null,\n\t\t\t\t\t\t};\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttokenId,\n\t\t\t\t\t\t\tsupply: 0,\n\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t);\n\t\t\treturn supplies;\n\t\t},\n\t\tenabled: query?.enabled,\n\t});\n\n\tconst extendedSupplyData = (tokenSaleDetails || [])\n\t\t.map((data, index) => ({\n\t\t\t...data,\n\t\t\ttokenId: tokenIds[index],\n\t\t}))\n\t\t.filter((data) => data.status === 'success')\n\t\t.filter((data) => {\n\t\t\tif (typeof data.result !== 'object') return false;\n\t\t\tconst now = BigInt(getUnixTime(new Date()));\n\t\t\treturn data.result.endTime > now && data.result.startTime < now;\n\t\t});\n\n\tconst getInitialSupply = (tokenId: string): number | undefined => {\n\t\tconst found = extendedSupplyData.find((data) => data.tokenId === tokenId);\n\t\tif (!found || typeof found.result !== 'object' || found.result === null)\n\t\t\treturn undefined;\n\t\tconst supply = found.result.supplyCap;\n\t\tif (supply === undefined) return undefined;\n\t\t// https://github.com/0xsequence/contracts-library/blob/ead1baf34270c76260d01cfc130bb7cc9d57518e/src/tokens/ERC1155/utility/sale/IERC1155Sale.sol#L8\n\t\t// 0 means infinite\n\t\tif (supply === 0n) return Number.POSITIVE_INFINITY;\n\t\treturn Number(supply);\n\t};\n\n\tconst getRemainingSupply = (tokenId: string): number | undefined => {\n\t\tconst initialSupply = getInitialSupply(tokenId);\n\t\tif (!initialSupply) return undefined;\n\n\t\tconst supplyData = tokenSupplies?.find((s) => s.tokenId === tokenId);\n\t\tif (!supplyData || supplyData.error) return initialSupply; // If no supply data or error, assume nothing is minted\n\n\t\treturn initialSupply - supplyData.supply;\n\t};\n\n\treturn {\n\t\textendedSupplyData,\n\t\tgetInitialSupply,\n\t\tgetRemainingSupply,\n\t\tloading: tokenSuppliesLoading || tokenSaleDetailsLoading,\n\t\terror: tokenSuppliesError || tokenSaleDetailsError,\n\t};\n}\n"],"mappings":"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"}