{"version":3,"file":"tokens-CgYu2Sep.js","names":["params: UseGetTokenRangesParams","queryOptions","args: UseListBalancesArgs","params: UseListTokenMetadataParams","queryOptions"],"sources":["../src/react/hooks/data/tokens/useGetTokenRanges.tsx","../src/react/hooks/data/tokens/useListBalances.tsx","../src/react/hooks/data/tokens/useListTokenMetadata.tsx"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchGetTokenRangesParams,\n\ttype GetTokenRangesQueryOptions,\n\tgetTokenRangesQueryOptions,\n} from '../../../queries/getTokenRanges';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseGetTokenRangesParams = Optional<\n\tGetTokenRangesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch token ID ranges for a collection\n *\n * Retrieves the available token ID ranges for a specific collection,\n * which is useful for understanding the token distribution and\n * available tokens within a collection.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address to fetch ranges for\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing token ID ranges for the collection\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: tokenRanges, isLoading } = useGetTokenRanges({\n *   chainId: 137,\n *   collectionAddress: '0x1234...'\n * })\n *\n * if (data) {\n *   console.log(`Token ranges: ${JSON.stringify(data.tokenIDRanges)}`);\n *   data.tokenIDRanges?.forEach(range => {\n *     console.log(`Range: ${range.start} - ${range.end}`);\n *   });\n * }\n * ```\n *\n * @example\n * With conditional enabling:\n * ```typescript\n * const { data: tokenRanges } = useGetTokenRanges({\n *   chainId: 1,\n *   collectionAddress: selectedCollection?.address,\n *   query: {\n *     enabled: Boolean(selectedCollection?.address),\n *     staleTime: 300000, // Cache for 5 minutes\n *     refetchInterval: 60000 // Refresh every minute\n *   }\n * })\n * ```\n */\nexport function useGetTokenRanges(params: UseGetTokenRangesParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = getTokenRangesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { getTokenRangesQueryOptions };\n\nexport type { FetchGetTokenRangesParams, GetTokenRangesQueryOptions };\n\n// Legacy exports for backward compatibility\nexport type UseGetTokenRangesProps = {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nexport type UseGetTokenRangesReturn = Awaited<\n\tReturnType<\n\t\ttypeof import('../../../queries/getTokenRanges').fetchGetTokenRanges\n\t>\n>;\n","import { useInfiniteQuery } from '@tanstack/react-query';\nimport { ContractType } from '../../../_internal';\nimport type { UseListBalancesArgs } from '../../../queries/listBalances';\nimport { listBalancesOptions } from '../../../queries/listBalances';\nimport { useConfig } from '../../config/useConfig';\nimport { useMarketplaceConfig } from '../../config/useMarketplaceConfig';\n\n/**\n * Hook to fetch a list of token balances with pagination support\n *\n * @param args - The arguments for fetching the balances\n * @returns Infinite query result containing the balances data\n *\n * @example\n * ```tsx\n * const { data, isLoading, error, fetchNextPage } = useListBalances({\n *   chainId: 1,\n *   accountAddress: '0x123...',\n *   includeMetadata: true,\n *   query: {\n *     enabled: true,\n *     refetchInterval: 10000,\n *   }\n * });\n * ```\n */\nexport function useListBalances(args: UseListBalancesArgs) {\n\tconst config = useConfig();\n\tconst { data: marketplaceConfig } = useMarketplaceConfig();\n\n\tconst isLaos721 =\n\t\tmarketplaceConfig?.market?.collections?.find(\n\t\t\t(c) =>\n\t\t\t\tc.itemsAddress === args.contractAddress && c.chainId === args.chainId,\n\t\t)?.contractType === ContractType.LAOS_ERC_721;\n\n\treturn useInfiniteQuery(listBalancesOptions({ ...args, isLaos721 }, config));\n}\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchListTokenMetadataParams,\n\ttype ListTokenMetadataQueryOptions,\n\tlistTokenMetadataQueryOptions,\n} from '../../../queries/listTokenMetadata';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseListTokenMetadataParams = Optional<\n\tListTokenMetadataQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch metadata for multiple tokens\n *\n * Retrieves metadata for a batch of tokens from a specific contract using the metadata API.\n * This hook is optimized for fetching multiple token metadata in a single request.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.contractAddress - The contract address containing the tokens\n * @param params.tokenIds - Array of token IDs to fetch metadata for\n * @param params.config - Optional SDK configuration (defaults from context)\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing an array of token metadata\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: metadata, isLoading } = useListTokenMetadata({\n *   chainId: 137,\n *   contractAddress: '0x...',\n *   tokenIds: ['1', '2', '3']\n * })\n * ```\n *\n * @example\n * With query options:\n * ```typescript\n * const { data: metadata } = useListTokenMetadata({\n *   chainId: 1,\n *   contractAddress: '0x...',\n *   tokenIds: selectedTokenIds,\n *   query: {\n *     enabled: selectedTokenIds.length > 0,\n *     staleTime: 10 * 60 * 1000 // 10 minutes\n *   }\n * })\n * ```\n */\nexport function useListTokenMetadata(params: UseListTokenMetadataParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = listTokenMetadataQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { listTokenMetadataQueryOptions };\n\nexport type { FetchListTokenMetadataParams, ListTokenMetadataQueryOptions };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,SAAgB,kBAAkBA,QAAiC;CAClE,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,2BAA2B;EAC/C;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;AChDD,SAAgB,gBAAgBC,MAA2B;CAC1D,MAAM,SAAS,WAAW;CAC1B,MAAM,EAAE,MAAM,mBAAmB,GAAG,sBAAsB;CAE1D,MAAM,YACL,mBAAmB,QAAQ,aAAa,KACvC,CAAC,MACA,EAAE,iBAAiB,KAAK,mBAAmB,EAAE,YAAY,KAAK,QAC/D,EAAE,iBAAiB,aAAa;AAElC,QAAO,iBAAiB,oBAAoB;EAAE,GAAG;EAAM;CAAW,GAAE,OAAO,CAAC;AAC5E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACkBD,SAAgB,qBAAqBC,QAAoC;CACxE,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,8BAA8B;EAClD;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF"}