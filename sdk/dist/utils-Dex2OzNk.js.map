{"version":3,"file":"utils-Dex2OzNk.js","names":["SvgInfoIcon","initialContext: SwitchChainModalState","event: ShowSwitchChainModalArgs","event: { isSwitching: boolean }","args: ShowSwitchChainModalArgs","params: UseCheckoutOptionsParams","queryOptions","params: UseCheckoutOptionsSalesContractParams | typeof skipToken","queryOptions","params: UseComparePricesParams","queryOptions","params: UseConvertPriceToUSDParams","queryOptions","transactionHash: Hex","args: UseRoyaltyArgs","currentChainId: number","targetChainId: number"],"sources":["../src/react/hooks/utils/useAutoSelectFeeOption.tsx","../src/react/ui/modals/_internal/components/alertMessage/index.tsx","../src/react/ui/modals/_internal/components/consts.ts","../src/react/ui/modals/_internal/components/switchChainModal/store.ts","../src/react/ui/modals/_internal/components/switchChainModal/index.tsx","../src/react/hooks/utils/useCheckoutOptions.tsx","../src/react/hooks/utils/useCheckoutOptionsSalesContract.tsx","../src/react/hooks/utils/useComparePrices.tsx","../src/react/hooks/utils/useConvertPriceToUSD.tsx","../src/react/hooks/utils/useGetReceiptFromHash.tsx","../src/react/hooks/utils/useRoyalty.tsx","../src/react/hooks/utils/useSwitchChainWithModal.ts"],"sourcesContent":["'use client';\n\nimport { useChain } from '@0xsequence/connect';\nimport { useCallback, useEffect } from 'react';\nimport { type Address, zeroAddress } from 'viem';\nimport { useAccount } from 'wagmi';\nimport type { FeeOption } from '../../../types/waas-types';\nimport { useCollectionBalanceDetails } from '../data/collections/useCollectionBalanceDetails';\n\nenum AutoSelectFeeOptionError {\n\tUserNotConnected = 'User not connected',\n\tNoOptionsProvided = 'No options provided',\n\tFailedToCheckBalances = 'Failed to check balances',\n\tInsufficientBalanceForAnyFeeOption = 'Insufficient balance for any fee option',\n}\n\ntype UseAutoSelectFeeOptionArgs = {\n\tpendingFeeOptionConfirmation: {\n\t\tid: string;\n\t\toptions: FeeOption[] | undefined;\n\t\tchainId: number;\n\t};\n\tenabled?: boolean;\n};\n\n/**\n * A React hook that automatically selects the first fee option for which the user has sufficient balance.\n *\n * @param {Object} params.pendingFeeOptionConfirmation - Configuration for fee option selection\n *\n * @returns {Promise<{\n *   selectedOption: FeeOption | null,\n *   error: AutoSelectFeeOptionError | null,\n *   isLoading?: boolean\n * }>} A promise that resolves to an object containing:\n *   - selectedOption: The first fee option with sufficient balance, or null if none found\n *   - error: Error message if selection fails, null otherwise\n *   - isLoading: True while checking balances\n *\n * @throws {AutoSelectFeeOptionError} Possible errors:\n *   - UserNotConnected: When no wallet is connected\n *   - NoOptionsProvided: When fee options array is undefined\n *   - FailedToCheckBalances: When balance checking fails\n *   - InsufficientBalanceForAnyFeeOption: When user has insufficient balance for all options\n *\n * @example\n * ```tsx\n * function MyComponent() {\n *   const [pendingFeeOptionConfirmation, confirmPendingFeeOption] = useWaasFeeOptions();\n *\n *   const autoSelectOptionPromise = useAutoSelectFeeOption({\n *     pendingFeeOptionConfirmation: pendingFeeOptionConfirmation\n *       ? {\n *           id: pendingFeeOptionConfirmation.id,\n *           options: pendingFeeOptionConfirmation.options,\n *           chainId: 1\n *         }\n *       : {\n *           id: '',\n *           options: undefined,\n *           chainId: 1\n *         }\n *   });\n *\n *   useEffect(() => {\n *     autoSelectOptionPromise.then((result) => {\n *       if (result.isLoading) {\n *         console.log('Checking balances...');\n *         return;\n *       }\n *\n *       if (result.error) {\n *         console.error('Failed to select fee option:', result.error);\n *         return;\n *       }\n *\n *       if (pendingFeeOptionConfirmation?.id && result.selectedOption) {\n *         confirmPendingFeeOption(\n *           pendingFeeOptionConfirmation.id,\n *           result.selectedOption.token.contractAddress\n *         );\n *       }\n *     });\n *   }, [autoSelectOptionPromise, confirmPendingFeeOption, pendingFeeOptionConfirmation]);\n *\n *   return <div>...</div>;\n * }\n * ```\n */\nexport function useAutoSelectFeeOption({\n\tpendingFeeOptionConfirmation,\n\tenabled,\n}: UseAutoSelectFeeOptionArgs) {\n\tconst { address: userAddress } = useAccount();\n\n\t// one token that has null contract address is native token, so we need to replace it with zero address\n\tconst contractWhitelist = pendingFeeOptionConfirmation.options?.map(\n\t\t(option) =>\n\t\t\toption.token.contractAddress === null\n\t\t\t\t? zeroAddress\n\t\t\t\t: (option.token.contractAddress as Address),\n\t);\n\n\tconst {\n\t\tdata: balanceDetails,\n\t\tisLoading: isBalanceDetailsLoading,\n\t\tisError: isBalanceDetailsError,\n\t} = useCollectionBalanceDetails({\n\t\tchainId: pendingFeeOptionConfirmation.chainId,\n\t\tfilter: {\n\t\t\taccountAddresses: userAddress ? [userAddress] : [],\n\t\t\tcontractWhitelist,\n\t\t\tomitNativeBalances: false,\n\t\t},\n\t\tquery: {\n\t\t\tenabled:\n\t\t\t\t!!pendingFeeOptionConfirmation.options && !!userAddress && enabled,\n\t\t},\n\t});\n\tconst chain = useChain(pendingFeeOptionConfirmation.chainId);\n\n\t// combine native balance and erc20 balances\n\tconst combinedBalances = balanceDetails && [\n\t\t...balanceDetails.nativeBalances.map((b) => ({\n\t\t\tchainId: pendingFeeOptionConfirmation.chainId,\n\t\t\tbalance: b.balance,\n\t\t\tsymbol: chain?.nativeCurrency.symbol,\n\t\t\tcontractAddress: zeroAddress,\n\t\t})),\n\t\t...balanceDetails.balances.map((b) => ({\n\t\t\tchainId: b.chainId,\n\t\t\tbalance: b.balance,\n\t\t\tsymbol: b.contractInfo?.symbol,\n\t\t\tcontractAddress: b.contractAddress,\n\t\t})),\n\t];\n\n\tuseEffect(() => {\n\t\tif (combinedBalances) {\n\t\t\tconsole.debug('currency balances', combinedBalances);\n\t\t}\n\t}, [combinedBalances]);\n\n\tconst autoSelectedOption = useCallback(async () => {\n\t\tif (!userAddress) {\n\t\t\treturn {\n\t\t\t\tselectedOption: null,\n\t\t\t\terror: AutoSelectFeeOptionError.UserNotConnected,\n\t\t\t};\n\t\t}\n\n\t\tif (!pendingFeeOptionConfirmation.options) {\n\t\t\treturn {\n\t\t\t\tselectedOption: null,\n\t\t\t\terror: AutoSelectFeeOptionError.NoOptionsProvided,\n\t\t\t};\n\t\t}\n\n\t\tif (isBalanceDetailsLoading) {\n\t\t\treturn { selectedOption: null, error: null, isLoading: true };\n\t\t}\n\n\t\tif (isBalanceDetailsError || !combinedBalances) {\n\t\t\treturn {\n\t\t\t\tselectedOption: null,\n\t\t\t\terror: AutoSelectFeeOptionError.FailedToCheckBalances,\n\t\t\t};\n\t\t}\n\n\t\tconst selectedOption = pendingFeeOptionConfirmation.options.find(\n\t\t\t(option) => {\n\t\t\t\tconst tokenBalance = combinedBalances.find(\n\t\t\t\t\t(balance) =>\n\t\t\t\t\t\tbalance.contractAddress.toLowerCase() ===\n\t\t\t\t\t\t(option.token.contractAddress === null\n\t\t\t\t\t\t\t? zeroAddress\n\t\t\t\t\t\t\t: option.token.contractAddress\n\t\t\t\t\t\t).toLowerCase(),\n\t\t\t\t);\n\n\t\t\t\tif (!tokenBalance) return false;\n\n\t\t\t\treturn BigInt(tokenBalance.balance) >= BigInt(option.value);\n\t\t\t},\n\t\t);\n\n\t\tif (!selectedOption) {\n\t\t\treturn {\n\t\t\t\tselectedOption: null,\n\t\t\t\terror: AutoSelectFeeOptionError.InsufficientBalanceForAnyFeeOption,\n\t\t\t};\n\t\t}\n\n\t\tconsole.debug('auto selected option', selectedOption);\n\n\t\treturn { selectedOption, error: null };\n\t}, [\n\t\tuserAddress,\n\t\tpendingFeeOptionConfirmation.options,\n\t\tisBalanceDetailsLoading,\n\t\tisBalanceDetailsError,\n\t\tcombinedBalances,\n\t]);\n\n\treturn autoSelectedOption();\n}\n","import { Text, WarningIcon } from '@0xsequence/design-system';\nimport SvgInfoIcon from '../../../../icons/InfoIcon';\n\ntype AlertMessageProps = {\n\tmessage: string;\n\ttype: 'warning' | 'info';\n};\n\nexport default function AlertMessage({ message, type }: AlertMessageProps) {\n\treturn (\n\t\t<div\n\t\t\tclassName={`flex items-center justify-between gap-3 rounded-xl p-4 ${\n\t\t\t\ttype === 'warning'\n\t\t\t\t\t? 'bg-[hsla(39,71%,40%,0.3)]'\n\t\t\t\t\t: 'bg-[hsla(247,100%,75%,0.3)]'\n\t\t\t}`}\n\t\t>\n\t\t\t<Text className=\"font-body text-sm\" color=\"white\" fontWeight=\"medium\">\n\t\t\t\t{message}\n\t\t\t</Text>\n\n\t\t\t{type === 'warning' && <WarningIcon size=\"sm\" color=\"white\" />}\n\t\t\t{type === 'info' && <SvgInfoIcon size=\"sm\" color=\"white\" />}\n\t\t</div>\n\t);\n}\n","const MODAL_WIDTH = '360px';\n\nconst MODAL_OVERLAY_PROPS = {\n\tstyle: {\n\t\tbackground: 'hsla(0, 0%, 15%, 0.9)',\n\t},\n};\n\nconst MODAL_CONTENT_PROPS = {\n\tstyle: {\n\t\twidth: MODAL_WIDTH,\n\t\theight: 'auto',\n\t},\n};\n\nexport { MODAL_OVERLAY_PROPS, MODAL_CONTENT_PROPS };\n","import { createStore } from '@xstate/store';\nimport { useSelector } from '@xstate/store/react';\nimport type { SwitchChainError } from 'viem';\nimport type { ShowSwitchChainModalArgs } from '.';\n\nexport interface SwitchChainModalState {\n\tisOpen: boolean;\n\tchainIdToSwitchTo: number | undefined;\n\tisSwitching: boolean;\n\tonSuccess: (() => void) | undefined;\n\tonError: undefined | ((error: SwitchChainError) => void);\n\tonClose: (() => void) | undefined;\n}\n\nconst initialContext: SwitchChainModalState = {\n\tisOpen: false,\n\tchainIdToSwitchTo: undefined,\n\tisSwitching: false,\n\tonSuccess: undefined,\n\tonError: undefined,\n\tonClose: undefined,\n};\n\nexport const switchChainModalStore = createStore({\n\tcontext: initialContext,\n\ton: {\n\t\topen: (context, event: ShowSwitchChainModalArgs) => ({\n\t\t\t...context,\n\t\t\tisOpen: true,\n\t\t\tchainIdToSwitchTo: event.chainIdToSwitchTo,\n\t\t\tonSuccess: event.onSuccess,\n\t\t\tonError: event.onError,\n\t\t\tonClose: event.onClose,\n\t\t}),\n\t\tclose: (context) => ({\n\t\t\t...context,\n\t\t\tisOpen: false,\n\t\t\tchainIdToSwitchTo: undefined,\n\t\t\tisSwitching: false,\n\t\t\tonSuccess: undefined,\n\t\t\tonError: undefined,\n\t\t\tonClose: undefined,\n\t\t}),\n\t\tsetSwitching: (context, event: { isSwitching: boolean }) => ({\n\t\t\t...context,\n\t\t\tisSwitching: event.isSwitching,\n\t\t}),\n\t},\n});\n\n// Selector hooks\nexport const useIsOpen = () =>\n\tuseSelector(switchChainModalStore, (state) => state.context.isOpen);\n\nexport const useChainIdToSwitchTo = () =>\n\tuseSelector(\n\t\tswitchChainModalStore,\n\t\t(state) => state.context.chainIdToSwitchTo,\n\t);\n\nexport const useIsSwitching = () =>\n\tuseSelector(switchChainModalStore, (state) => state.context.isSwitching);\n\nexport const useOnSuccess = () =>\n\tuseSelector(switchChainModalStore, (state) => state.context.onSuccess);\n\nexport const useOnError = () =>\n\tuseSelector(switchChainModalStore, (state) => state.context.onError);\n\nexport const useOnClose = () =>\n\tuseSelector(switchChainModalStore, (state) => state.context.onClose);\n","'use client';\n\nimport { Button, Modal, Spinner, Text } from '@0xsequence/design-system';\nimport type { SwitchChainError } from 'viem';\nimport { useSwitchChain } from 'wagmi';\nimport { getPresentableChainName } from '../../../../../../utils/network';\nimport AlertMessage from '../alertMessage';\nimport { MODAL_OVERLAY_PROPS } from '../consts';\nimport {\n\tswitchChainModalStore,\n\tuseChainIdToSwitchTo,\n\tuseIsOpen,\n\tuseIsSwitching,\n\tuseOnClose,\n\tuseOnError,\n\tuseOnSuccess,\n} from './store';\n\nexport type ShowSwitchChainModalArgs = {\n\tchainIdToSwitchTo: number;\n\tonSuccess?: () => void;\n\tonError?: (error: SwitchChainError) => void;\n\tonClose?: () => void;\n};\n\nexport const useSwitchChainModal = () => {\n\treturn {\n\t\tshow: (args: ShowSwitchChainModalArgs) =>\n\t\t\tswitchChainModalStore.send({ type: 'open', ...args }),\n\t\tclose: () => switchChainModalStore.send({ type: 'close' }),\n\t};\n};\n\nconst SwitchChainModal = () => {\n\tconst isOpen = useIsOpen();\n\tconst chainIdToSwitchTo = useChainIdToSwitchTo();\n\tconst isSwitching = useIsSwitching();\n\tconst onSuccess = useOnSuccess();\n\tconst onError = useOnError();\n\tconst onClose = useOnClose();\n\n\tconst chainName = chainIdToSwitchTo\n\t\t? getPresentableChainName(chainIdToSwitchTo)\n\t\t: '';\n\tconst { switchChainAsync } = useSwitchChain();\n\n\tasync function handleSwitchChain() {\n\t\tswitchChainModalStore.send({ type: 'setSwitching', isSwitching: true });\n\n\t\ttry {\n\t\t\tif (!chainIdToSwitchTo) return;\n\t\t\tawait switchChainAsync({ chainId: Number(chainIdToSwitchTo) });\n\n\t\t\tif (onSuccess && typeof onSuccess === 'function') {\n\t\t\t\tonSuccess();\n\t\t\t}\n\n\t\t\tswitchChainModalStore.send({ type: 'close' });\n\t\t} catch (error) {\n\t\t\tif (error instanceof Error && onError && typeof onError === 'function') {\n\t\t\t\tonError(error as SwitchChainError);\n\t\t\t}\n\t\t} finally {\n\t\t\tswitchChainModalStore.send({ type: 'setSwitching', isSwitching: false });\n\t\t}\n\t}\n\n\tconst handleClose = () => {\n\t\tif (onClose && typeof onClose === 'function') {\n\t\t\tonClose();\n\t\t}\n\t\tswitchChainModalStore.send({ type: 'close' });\n\t};\n\n\tif (!isOpen || !chainIdToSwitchTo) return null;\n\n\treturn (\n\t\t<Modal\n\t\t\tisDismissible={true}\n\t\t\tonClose={handleClose}\n\t\t\tdisableAnimation\n\t\t\tsize=\"sm\"\n\t\t\toverlayProps={MODAL_OVERLAY_PROPS}\n\t\t>\n\t\t\t<div className=\"grid flex-col gap-6 p-7\">\n\t\t\t\t<Text className=\"text-xl\" fontWeight=\"bold\" color=\"text100\">\n\t\t\t\t\tWrong network\n\t\t\t\t</Text>\n\n\t\t\t\t<AlertMessage\n\t\t\t\t\ttype=\"warning\"\n\t\t\t\t\tmessage={`You need to switch to ${chainName} network before completing the transaction`}\n\t\t\t\t/>\n\n\t\t\t\t<Button\n\t\t\t\t\tclassName={`${\n\t\t\t\t\t\tisSwitching\n\t\t\t\t\t\t\t? 'flex w-[147px] items-center justify-center [&>div]:justify-center'\n\t\t\t\t\t\t\t: 'w-[147px]'\n\t\t\t\t\t} flex justify-self-end`}\n\t\t\t\t\tname=\"switch-chain\"\n\t\t\t\t\tid=\"switch-chain-button\"\n\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\tlabel={\n\t\t\t\t\t\tisSwitching ? (\n\t\t\t\t\t\t\t<div data-testid=\"switch-chain-spinner\">\n\t\t\t\t\t\t\t\t<Spinner className=\"spinner\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t'Switch Network'\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\tpending={isSwitching}\n\t\t\t\t\tshape=\"square\"\n\t\t\t\t\tonClick={handleSwitchChain}\n\t\t\t\t\tdata-testid=\"switch-chain-button\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</Modal>\n\t);\n};\n\nexport default SwitchChainModal;\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport { useAccount } from 'wagmi';\nimport type { MarketplaceKind, Optional } from '../../_internal';\nimport {\n\ttype CheckoutOptionsQueryOptions,\n\tcheckoutOptionsQueryOptions,\n\ttype FetchCheckoutOptionsParams,\n} from '../../queries/checkoutOptions';\nimport { useConfig } from '../config/useConfig';\n\nexport type UseCheckoutOptionsParams = Optional<\n\tCheckoutOptionsQueryOptions,\n\t'config' | 'walletAddress'\n>;\n\n/**\n * Hook to fetch checkout options for marketplace orders\n *\n * Retrieves checkout options including available payment methods, fees, and transaction details\n * for a set of marketplace orders. Requires a connected wallet to calculate wallet-specific options.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.orders - Array of orders to checkout containing collection address, order ID, and marketplace\n * @param params.additionalFee - Additional fee to include in checkout (defaults to 0)\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing checkout options with payment methods and fees\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: checkoutOptions, isLoading } = useCheckoutOptions({\n *   chainId: 137,\n *   orders: [{\n *     collectionAddress: '0x1234...',\n *     orderId: '123',\n *     marketplace: MarketplaceKind.sequence_marketplace_v2\n *   }],\n *   additionalFee: 0\n * })\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data: checkoutOptions } = useCheckoutOptions({\n *   chainId: 1,\n *   orders: orders,\n *   query: {\n *     enabled: orders.length > 0,\n *     staleTime: 30000\n *   }\n * })\n * ```\n */\nexport function useCheckoutOptions(params: UseCheckoutOptionsParams) {\n\tconst { address } = useAccount();\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = checkoutOptionsQueryOptions({\n\t\tconfig,\n\t\twalletAddress: address as Address,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { checkoutOptionsQueryOptions };\n\nexport type { FetchCheckoutOptionsParams, CheckoutOptionsQueryOptions };\n\n// Legacy export for backward compatibility\nexport type UseCheckoutOptionsArgs = {\n\tchainId: number;\n\torders: Array<{\n\t\tcollectionAddress: string;\n\t\torderId: string;\n\t\tmarketplace: MarketplaceKind;\n\t}>;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nexport type UseCheckoutOptionsReturn = Awaited<\n\tReturnType<\n\t\ttypeof import('../../queries/checkoutOptions').fetchCheckoutOptions\n\t>\n>;\n","'use client';\n\nimport { skipToken, useQuery } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport { useAccount } from 'wagmi';\nimport type { CheckoutOptionsItem, Optional } from '../../_internal';\nimport {\n\ttype CheckoutOptionsSalesContractQueryOptions,\n\tcheckoutOptionsSalesContractQueryOptions,\n\ttype FetchCheckoutOptionsSalesContractParams,\n\ttype fetchCheckoutOptionsSalesContract,\n} from '../../queries/checkoutOptionsSalesContract';\nimport { useConfig } from '../config/useConfig';\n\nexport type UseCheckoutOptionsSalesContractParams = Optional<\n\tCheckoutOptionsSalesContractQueryOptions,\n\t'config' | 'walletAddress'\n>;\n\n/**\n * Hook to fetch checkout options for sales contract items\n *\n * Retrieves checkout options including available payment methods, fees, and transaction details\n * for items from a sales contract. Requires a connected wallet to calculate wallet-specific options.\n *\n * @param params - Configuration parameters or skipToken to skip the query\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.contractAddress - The sales contract address\n * @param params.collectionAddress - The collection contract address\n * @param params.items - Array of items to purchase with tokenId and quantity\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing checkout options with payment methods and fees\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: checkoutOptions, isLoading } = useCheckoutOptionsSalesContract({\n *   chainId: 137,\n *   contractAddress: '0x1234...',\n *   collectionAddress: '0x5678...',\n *   items: [{\n *     tokenId: '1',\n *     quantity: '1'\n *   }]\n * })\n * ```\n *\n * @example\n * With skipToken to conditionally skip:\n * ```typescript\n * const { data: checkoutOptions } = useCheckoutOptionsSalesContract(\n *   items.length > 0 ? {\n *     chainId: 1,\n *     contractAddress: contractAddress,\n *     collectionAddress: collectionAddress,\n *     items: items\n *   } : skipToken\n * )\n * ```\n */\nexport function useCheckoutOptionsSalesContract(\n\tparams: UseCheckoutOptionsSalesContractParams | typeof skipToken,\n) {\n\tconst { address } = useAccount();\n\tconst defaultConfig = useConfig();\n\n\tconst queryOptions = checkoutOptionsSalesContractQueryOptions(\n\t\tparams === skipToken\n\t\t\t? {\n\t\t\t\t\tconfig: defaultConfig,\n\t\t\t\t\twalletAddress: address as Address,\n\t\t\t\t\tchainId: 0,\n\t\t\t\t\tcontractAddress: '',\n\t\t\t\t\tcollectionAddress: '',\n\t\t\t\t\titems: [],\n\t\t\t\t\tquery: { enabled: false },\n\t\t\t\t}\n\t\t\t: {\n\t\t\t\t\tconfig: defaultConfig,\n\t\t\t\t\twalletAddress: address as Address,\n\t\t\t\t\t...params,\n\t\t\t\t},\n\t);\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { checkoutOptionsSalesContractQueryOptions };\n\nexport type {\n\tFetchCheckoutOptionsSalesContractParams,\n\tCheckoutOptionsSalesContractQueryOptions,\n};\n\n// Legacy exports for backward compatibility\nexport type UseCheckoutOptionsSalesContractArgs = {\n\tchainId: number;\n\tcontractAddress: string;\n\tcollectionAddress: string;\n\titems: Array<CheckoutOptionsItem>;\n};\n\nexport type UseCheckoutOptionsSalesContractReturn = Awaited<\n\tReturnType<typeof fetchCheckoutOptionsSalesContract>\n>;\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Optional } from '../../_internal';\nimport {\n\ttype ComparePricesQueryOptions,\n\tcomparePricesQueryOptions,\n\ttype FetchComparePricesParams,\n} from '../../queries/comparePrices';\nimport { useConfig } from '../config/useConfig';\n\nexport type UseComparePricesParams = Optional<\n\tComparePricesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to compare prices between different currencies by converting both to USD\n *\n * Compares two prices by converting both to USD using real-time exchange rates\n * and returns the percentage difference with comparison status.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.priceAmountRaw - The raw amount of the first price (wei format)\n * @param params.priceCurrencyAddress - The currency address of the first price\n * @param params.compareToPriceAmountRaw - The raw amount of the second price to compare against (wei format)\n * @param params.compareToPriceCurrencyAddress - The currency address of the second price\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing percentage difference and comparison status\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data: comparison, isLoading } = useComparePrices({\n *   chainId: 1,\n *   priceAmountRaw: '1000000000000000000', // 1 ETH in wei\n *   priceCurrencyAddress: '0x0000000000000000000000000000000000000000', // ETH\n *   compareToPriceAmountRaw: '2000000000', // 2000 USDC in wei (6 decimals)\n *   compareToPriceCurrencyAddress: '0xA0b86a33E6B8DbF5E71Eaa9bfD3F6fD8e8Be3F69' // USDC\n * })\n *\n * if (data) {\n *   console.log(`${data.percentageDifferenceFormatted}% ${data.status}`);\n *   // e.g., \"25.50% above\" or \"10.25% below\"\n * }\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data: comparison } = useComparePrices({\n *   chainId: 137,\n *   priceAmountRaw: price1,\n *   priceCurrencyAddress: currency1Address,\n *   compareToPriceAmountRaw: price2,\n *   compareToPriceCurrencyAddress: currency2Address,\n *   query: {\n *     enabled: Boolean(price1 && price2),\n *     refetchInterval: 30000 // Refresh every 30 seconds\n *   }\n * })\n * ```\n */\nexport function useComparePrices(params: UseComparePricesParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = comparePricesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { comparePricesQueryOptions };\n\nexport type { FetchComparePricesParams, ComparePricesQueryOptions };\n\n// Legacy exports for backward compatibility\nexport type UseComparePricesArgs = {\n\tchainId: number;\n\tpriceAmountRaw: string;\n\tpriceCurrencyAddress: Address;\n\tcompareToPriceAmountRaw: string;\n\tcompareToPriceCurrencyAddress: Address;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nexport type UseComparePricesReturn = {\n\tpercentageDifference: number;\n\tpercentageDifferenceFormatted: string;\n\tstatus: 'above' | 'same' | 'below';\n};\n","'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Optional } from '../../_internal';\nimport {\n\ttype ConvertPriceToUSDQueryOptions,\n\ttype ConvertPriceToUSDReturn,\n\tconvertPriceToUSDQueryOptions,\n\ttype FetchConvertPriceToUSDParams,\n} from '../../queries/convertPriceToUSD';\nimport { useConfig } from '../config/useConfig';\n\nexport type UseConvertPriceToUSDParams = Optional<\n\tConvertPriceToUSDQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to convert a price amount from a specific currency to USD\n *\n * Converts cryptocurrency amounts to their USD equivalent using current exchange rates.\n * Fetches currency data and calculates the USD value based on the provided amount\n * and currency address.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.currencyAddress - The currency contract address to convert from\n * @param params.amountRaw - The raw amount in smallest units (e.g., wei for ETH)\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing USD amount and formatted USD amount\n *\n * @example\n * Basic ETH to USD conversion:\n * ```typescript\n * const { data: conversion, isLoading } = useConvertPriceToUSD({\n *   chainId: 1,\n *   currencyAddress: '0x0000000000000000000000000000000000000000', // ETH\n *   amountRaw: '1000000000000000000' // 1 ETH in wei\n * })\n *\n * if (data) {\n *   console.log(`$${data.usdAmountFormatted}`); // e.g., \"$2000.00\"\n *   console.log(data.usdAmount); // e.g., 2000\n * }\n * ```\n *\n * @example\n * ERC-20 token conversion with conditional enabling:\n * ```typescript\n * const { data: conversion } = useConvertPriceToUSD({\n *   chainId: 137,\n *   currencyAddress: '0x2791bca1f2de4661ed88a30c99a7a9449aa84174', // USDC on Polygon\n *   amountRaw: '1000000', // 1 USDC (6 decimals)\n *   query: {\n *     enabled: Boolean(userHasTokens),\n *     refetchInterval: 30000 // Update price every 30 seconds\n *   }\n * })\n * ```\n */\nexport function useConvertPriceToUSD(params: UseConvertPriceToUSDParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = convertPriceToUSDQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { convertPriceToUSDQueryOptions };\n\nexport type {\n\tFetchConvertPriceToUSDParams,\n\tConvertPriceToUSDQueryOptions,\n\tConvertPriceToUSDReturn,\n};\n\n// Legacy exports for backward compatibility\nexport type UseConvertPriceToUSDArgs = {\n\tchainId: number;\n\tcurrencyAddress: Address;\n\tamountRaw: string;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nexport type UseConvertPriceToUSDReturn = ConvertPriceToUSDReturn;\n","import { useCallback } from 'react';\nimport type { Hex } from 'viem';\nimport { usePublicClient } from 'wagmi';\n\n/**\n * Hook to get transaction receipt from hash\n *\n * Provides a function to wait for a transaction receipt using a transaction hash.\n * This is a wagmi-based hook for direct blockchain interaction.\n *\n * @returns Object containing waitForReceipt function\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { waitForReceipt } = useGetReceiptFromHash();\n *\n * // Wait for transaction receipt\n * const receipt = await waitForReceipt('0x123...');\n * console.log('Transaction status:', receipt.status);\n * ```\n *\n * @example\n * In transaction flow:\n * ```typescript\n * const { waitForReceipt } = useGetReceiptFromHash();\n *\n * const handleTransaction = async () => {\n *   try {\n *     const hash = await writeContract({ ... });\n *     const receipt = await waitForReceipt(hash);\n *     if (receipt.status === 'success') {\n *       console.log('Transaction confirmed!');\n *     }\n *   } catch (error) {\n *     console.error('Transaction failed:', error);\n *   }\n * };\n * ```\n */\nexport const useGetReceiptFromHash = () => {\n\tconst publicClient = usePublicClient();\n\n\tconst waitForReceipt = useCallback(\n\t\tasync (transactionHash: Hex) => {\n\t\t\tif (!publicClient) {\n\t\t\t\tthrow new Error('Public client not found');\n\t\t\t}\n\n\t\t\tconst receipt = await publicClient.waitForTransactionReceipt({\n\t\t\t\thash: transactionHash,\n\t\t\t});\n\t\t\treturn receipt;\n\t\t},\n\t\t[publicClient],\n\t);\n\n\treturn {\n\t\twaitForReceipt,\n\t};\n};\n","'use client';\n\nimport type { Address } from 'viem';\nimport { useReadContract } from 'wagmi';\nimport { EIP2981_ABI } from '../../../utils';\nimport type { QueryArg } from '../../_internal';\nimport { collectableKeys } from '../../_internal';\n\nexport interface UseRoyaltyArgs {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tcollectibleId: string;\n\tquery?: QueryArg;\n}\n\n/**\n * Hook to fetch royalty information for a collectible\n *\n * Reads royalty information from the blockchain using the EIP-2981 standard.\n * This hook queries the contract directly to get royalty percentage and recipient\n * address for a specific token.\n *\n * @param args - Configuration parameters\n * @param args.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param args.collectionAddress - The collection contract address\n * @param args.collectibleId - The token ID within the collection\n * @param args.query - Optional React Query configuration\n *\n * @returns Query result containing royalty information (percentage and recipient) or null\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useRoyalty({\n *   chainId: 137,\n *   collectionAddress: '0x...',\n *   collectibleId: '1'\n * })\n *\n * if (data) {\n *   console.log('Royalty:', data.percentage, 'Recipient:', data.recipient)\n * }\n * ```\n *\n * @example\n * With custom query options:\n * ```typescript\n * const { data, isLoading } = useRoyalty({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   collectibleId: '42',\n *   query: {\n *     refetchInterval: 60000,\n *     enabled: hasTokenId\n *   }\n * })\n * ```\n */\nexport function useRoyalty(args: UseRoyaltyArgs) {\n\tconst { chainId, collectionAddress, collectibleId, query } = args;\n\tconst scopeKey = `${collectableKeys.royaltyPercentage.join('.')}-${chainId}-${collectionAddress}-${collectibleId}`;\n\n\tconst contractResult = useReadContract({\n\t\tscopeKey: scopeKey,\n\t\tabi: EIP2981_ABI,\n\t\taddress: collectionAddress,\n\t\tfunctionName: 'royaltyInfo',\n\t\targs: [BigInt(collectibleId), BigInt(100)],\n\t\tchainId,\n\t\tquery: query,\n\t});\n\n\tconst [recipient, percentage] = contractResult.data ?? [];\n\tconst formattedData =\n\t\trecipient && percentage\n\t\t\t? {\n\t\t\t\t\tpercentage,\n\t\t\t\t\trecipient: recipient as Address,\n\t\t\t\t}\n\t\t\t: null;\n\n\treturn {\n\t\t...contractResult,\n\t\tdata: formattedData,\n\t};\n}\n","import { useSwitchChain } from 'wagmi';\nimport { ChainSwitchUserRejectedError } from '../../../utils/_internal/error/transaction';\nimport { useSwitchChainModal } from '../../ui/modals/_internal/components/switchChainModal';\nimport { useConnectorMetadata } from '../config/useConnectorMetadata';\n\nexport const useSwitchChainWithModal = () => {\n\tconst { show: showSwitchChainModal } = useSwitchChainModal();\n\tconst { isWaaS } = useConnectorMetadata();\n\tconst { switchChainAsync } = useSwitchChain();\n\n\treturn {\n\t\tswitchChainWithModal: async (\n\t\t\tcurrentChainId: number,\n\t\t\ttargetChainId: number,\n\t\t) => {\n\t\t\tconst chainIdMismatch = currentChainId !== Number(targetChainId);\n\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tif (chainIdMismatch) {\n\t\t\t\t\tif (isWaaS) {\n\t\t\t\t\t\tswitchChainAsync({ chainId: targetChainId })\n\t\t\t\t\t\t\t.then(resolve)\n\t\t\t\t\t\t\t.catch(reject);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshowSwitchChainModal({\n\t\t\t\t\t\t\tchainIdToSwitchTo: targetChainId,\n\t\t\t\t\t\t\tonSuccess: () => resolve({ chainId: targetChainId }),\n\t\t\t\t\t\t\tonError: (error) => reject(error),\n\t\t\t\t\t\t\tonClose: () => reject(new ChainSwitchUserRejectedError()),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tresolve({ chainId: targetChainId });\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t};\n};\n"],"mappings":"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"}