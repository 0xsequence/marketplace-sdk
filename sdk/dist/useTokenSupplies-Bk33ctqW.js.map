{"version":3,"file":"useTokenSupplies-Bk33ctqW.js","names":["params: UseTokenSuppliesParams","queryOptions"],"sources":["../src/react/hooks/data/tokens/useTokenSupplies.ts"],"sourcesContent":["'use client';\n\nimport { useQuery } from '@tanstack/react-query';\nimport type { Optional } from '../../../_internal';\nimport {\n\ttype FetchTokenSuppliesParams,\n\ttype TokenSuppliesQueryOptions,\n\ttokenSuppliesQueryOptions,\n} from '../../../queries/tokenSupplies';\nimport { useConfig } from '../../config/useConfig';\n\nexport type UseTokenSuppliesParams = Optional<\n\tTokenSuppliesQueryOptions,\n\t'config'\n>;\n\n/**\n * Hook to fetch token supplies from the indexer or LAOS API\n *\n * Retrieves supply information for tokens from a specific collection.\n * Automatically chooses between indexer and LAOS APIs based on the isLaos721 flag.\n *\n * @param params - Configuration parameters\n * @param params.chainId - The chain ID (must be number, e.g., 1 for Ethereum, 137 for Polygon)\n * @param params.collectionAddress - The collection contract address\n * @param params.isLaos721 - Whether to use LAOS API instead of indexer\n * @param params.includeMetadata - Whether to include token metadata\n * @param params.page - Pagination options\n * @param params.query - Optional React Query configuration\n *\n * @returns Query result containing token supplies\n *\n * @example\n * Basic usage:\n * ```typescript\n * const { data, isLoading } = useTokenSupplies({\n *   chainId: 137,\n *   collectionAddress: '0x...'\n * })\n * ```\n *\n * @example\n * With LAOS API:\n * ```typescript\n * const { data, isLoading } = useTokenSupplies({\n *   chainId: 1,\n *   collectionAddress: '0x...',\n *   isLaos721: true\n * })\n * ```\n *\n * @example\n * With conditional fetching:\n * ```typescript\n * const { data, isLoading } = useTokenSupplies({\n *   chainId: 1,\n *   collectionAddress: selectedCollection,\n *   query: {\n *     enabled: !!selectedCollection\n *   }\n * })\n * ```\n */\nexport function useTokenSupplies(params: UseTokenSuppliesParams) {\n\tconst defaultConfig = useConfig();\n\n\tconst { config = defaultConfig, ...rest } = params;\n\n\tconst queryOptions = tokenSuppliesQueryOptions({\n\t\tconfig,\n\t\t...rest,\n\t});\n\n\treturn useQuery({\n\t\t...queryOptions,\n\t});\n}\n\nexport { tokenSuppliesQueryOptions };\n\nexport type { FetchTokenSuppliesParams, TokenSuppliesQueryOptions };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA,SAAgB,iBAAiBA,QAAgC;CAChE,MAAM,gBAAgB,WAAW;CAEjC,MAAM,EAAE,SAAS,cAAe,GAAG,MAAM,GAAG;CAE5C,MAAMC,iBAAe,0BAA0B;EAC9C;EACA,GAAG;CACH,EAAC;AAEF,QAAO,SAAS,EACf,GAAGA,eACH,EAAC;AACF"}