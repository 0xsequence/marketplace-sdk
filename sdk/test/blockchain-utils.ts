import {
	type Address,
	type Hex,
	type PublicClient,
	parseAbi,
	type WalletClient,
} from 'viem';
import { TEST_ACCOUNTS } from './const';

type TestClient = WalletClient & PublicClient;

// Simple NFT contract ABI for testing
export const testNFTAbi = parseAbi([
	'function mint(address to, uint256 tokenId) public',
	'function approve(address to, uint256 tokenId) public',
	'function setApprovalForAll(address operator, bool approved) public',
	'function transferFrom(address from, address to, uint256 tokenId) public',
	'function ownerOf(uint256 tokenId) public view returns (address)',
	'function balanceOf(address owner) public view returns (uint256)',
	'function isApprovedForAll(address owner, address operator) public view returns (bool)',
	'event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)',
	'event ApprovalForAll(address indexed owner, address indexed operator, bool approved)',
]);

// Simple marketplace contract ABI for testing
export const testMarketplaceAbi = parseAbi([
	'function createOrder(address nftContract, uint256 tokenId, uint256 price) public returns (uint256)',
	'function fillOrder(uint256 orderId) public payable',
	'function cancelOrder(uint256 orderId) public',
	'function getOrder(uint256 orderId) public view returns (address seller, address nftContract, uint256 tokenId, uint256 price, bool active)',
	'event OrderCreated(uint256 indexed orderId, address indexed seller, address indexed nftContract, uint256 tokenId, uint256 price)',
	'event OrderFilled(uint256 indexed orderId, address indexed buyer)',
]);

// Test NFT contract bytecode (simplified)
export const testNFTBytecode =
	'0x608060405234801561001057600080fd5b50610c3d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80636352211e1161005b5780636352211e146101015780636a627842146101215780637acc0b2014610141578063e985e9c51461016157600080fd5b806301ffc9a71461008d57806323b872dd146100b557806342842e0e146100cb5780634f558e79146100de575b600080fd5b6100a061009b3660046108a5565b610181565b60405190151581526020015b60405180910390f35b6100c96100c33660046108de565b506101d3565b005b6100c96100d93660046108de565b6101e4565b6100a06100ec36600461091a565b60009081526002602052604090205460ff1690565b61011461010f36600461091a565b6101ff565b6040516100ac9190610933565b61013461012f366004610947565b61025a565b6040516100ac9190610962565b61015461014f36600461096b565b6102e5565b6040516100ac91906109a7565b6100a061016f3660046109ba565b60006020819052908152604090205460ff1681565b60006001600160e01b031982166301ffc9a760e01b14806101b257506001600160e01b031982166380ac58cd60e01b145b806101cd57506001600160e01b03198216635b5e139f60e01b145b92915050565b6101df838360016103a2565b505050565b6101df83838360405180602001604052806000815250610451565b6000818152600260205260408120546001600160a01b03168061025557604051637e27328960e01b815260048101849052602401610246565b919050565b60606000610267836104e5565b67ffffffffffffffff81111561027f5761027f6109ed565b6040519080825280602002602001820160405280156102a8578160200160208202803683370190505b50905060005b6102b7846104e5565b8110156102dd576102c8848261053e565b8282815181106102da576102da610a03565b60200260200101818152505060016102ae565b509392505050565b60606000826001600160a01b0316846001600160a01b03161461030a57506000610399565b6000610315856104e5565b67ffffffffffffffff81111561032d5761032d6109ed565b604051908082528060200260200182016040528015610356578160200160208202803683370190505b50905060005b610365866104e5565b8110156103935761037686826105e8565b82828151811061038857610388610a03565b602002602001018181525050600161035c565b50610399565b9392505050565b60006103ad826101ff565b9050836001600160a01b031681600001516001600160a01b0316146103e55760405162a1148160e81b815260040160405180910390fd5b6000336001600160a01b038616148061040357506104038533610181565b8061041e5750336104138461069f565b6001600160a01b0316145b90508061043e57604051632ce44b5f60e11b815260040160405180910390fd5b61044a60008583610722565b5050505050565b61045c8484846103a2565b6001600160a01b0383163b1561044a57604051630a85bd0160e11b81526001600160a01b0384169063150b7a029061049d903390889087908790600401610a19565b6020604051808303816000875af11580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e09190610a56565b61044a565b60006001600160a01b03821661050e576040516335ebb31960e01b815260040160405180910390fd5b506001600160a01b0316600090815260036020526040902054600160401b900467ffffffffffffffff1690565b60008061054a846104e5565b90508083106105865760405163295f44f760e21b81526001600160a01b03851660048201526024810182905260448101849052606401610246565b6001600160a01b0384166000908152600360205260409020546105ba908490600160401b900467ffffffffffffffff16610a73565b6001600160a01b038516600090815260036020526040902080546fffffffffffffffff00000000000000001916600160401b67ffffffffffffffff841602179055949350505050565b60008061054a846104e5565b600081815260026020526040902054606090600160401b900467ffffffffffffffff166106975760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610246565b6101cd610786565b6000818152600260205260408120546001600160a01b03168061025557604051637e27328960e01b815260048101849052602401610246565b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6040516001600160a01b0383811660248301526044820183905261078191859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610795565b505050565b60606101cd826107f8565b60006107aa6001600160a01b03841683610861565b905080516000141580156107cf5750808060200190518101906107cd9190610a86565b155b156101df57604051635274afe760e01b81526001600160a01b0384166004820152602401610246565b606060006108058361086f565b600101905060008167ffffffffffffffff811115610825576108256109ed565b6040519080825280601f01601f19166020018201604052801561084f576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461085957509392505050565b606061039983836000610947565b80356001600160a01b038116811461025557600080fd5b6000602082840312156108b757600080fd5b81356001600160e01b0319811681146108cf57600080fd5b9392505050565b6000806000606084860312156108eb57600080fd5b6108f48461089e565b92506109026020850161089e565b9150604084013590509250925092565b60006020828403121561092457600080fd5b5035919050565b6001600160a01b0391909116815260200190565b60006020828403121561095157600080fd5b61095a8261089e565b9392505050565b6020808252825182820181905260009190848201906040850190845b8181101561099b5783518352928401929184019160010161097e565b50909695505050505050565b6001600160a01b039290921682526020820152604001919050565b600080604083850312156109cd57600080fd5b6109d68361089e565b91506109e46020840161089e565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090610a4d90830184610aa3565b9695505050505050565b600060208284031215610a6857600080fd5b81516108cf81610acf565b81810381811115610a8457634e487b7160e01b600052601160045260246000fd5b92915050565b600060208284031215610a9c57600080fd5b5051919050565b60005b83811015610abe578181015183820152602001610aa6565b50506000910152565b600082516000190160008184015260208401935050506020601f19601f830116820101604052509190565b80151581146000190190565b60008151808452610b17816020860160208601610aa3565b601f01601f19169290920160200192915050565b6020815260006108cf6020830184610aff56fea2646970667358221220' as Hex;

// Test marketplace contract bytecode (simplified)
export const testMarketplaceBytecode =
	'0x608060405234801561001057600080fd5b50610a4a806100206000396000f3fe6080604052600436106100555760003560e01c80631f7b6d321461005a57806329ee566c1461008557806339e899ee146100a55780634a5c8b0f146100c55780634e487b71146100e5578063d96a094a14610105575b600080fd5b34801561006657600080fd5b5061006f610118565b60405161007c91906107a5565b60405180910390f35b34801561009157600080fd5b5061006f6100a03660046107be565b61011e565b3480156100b157600080fd5b5061006f6100c03660046107f2565b610184565b3480156100d157600080fd5b5061006f6100e036600461081e565b610228565b3480156100f157600080fd5b5061006f61010036600461081e565b6102a4565b61006f61011336600461081e565b610320565b60015490565b600080610129610118565b905061013533826103f5565b600083815260208190526040902080546001600160a01b0319166001600160a01b038616178155600181018490556002810183905560038101805460ff1916600117905591505092915050565b60008061018f610118565b6001600160a01b038616600090815260026020526040812080549293509091906101ba908490610837565b90915550506040805160a0810182526001600160a01b0387811682526020820187905291810185905260006060820181905260808201526000838152602081905291909120815181546001600160a01b0319166001600160a01b039091161781559051600182015590516002820155606051600390910180549115156101000261ff0019909216919091179055509392505050565b6000818152602081905260408120600381015460ff1661028f5760405162461bcd60e51b815260206004820152601760248201527f4f72646572206973206e6f74206163746976652079657400000000000000000060448201526064015b60405180910390fd5b61029a3360016103f5565b5060019392505050565b600081815260208190526040812060038101546301000000900460ff166103045760405162461bcd60e51b81526020600482015260136024820152724f72646572206e6f742066696c6c65642079657460681b6044820152606401610286565b6103163361031061084a565b836103f5565b5060019392505050565b600081815260208190526040902060038101543460ff166103835760405162461bcd60e51b815260206004820152601760248201527f4f72646572206973206e6f74206163746976652079657400000000000000000060448201526064015b60405180910390fd5b80600201543410156103d75760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e74207061796d656e7420616d6f756e74000000000060448201526064015b60405180910390fd5b60038101805462ff00001916620100001790556103f03360016103f5565b919050565b6001600160a01b03821661044b5760405162461bcd60e51b815260206004820152601860248201527f496e76616c696420726563697069656e742061646472657373000000000000006044820152606401610286565b6001600160a01b038216600090815260026020526040812080548392906104739084906108a5565b90915550506040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156104ae573d6000803e3d6000fd5b505050565b80356001600160a01b03811681146103f057600080fd5b6000602082840312156104dc57600080fd5b6104e5826104b3565b9392505050565b600080604083850312156104ff57600080fd5b610508836104b3565b946020939093013593505050565b60008060006060848603121561052b57600080fd5b610534846104b3565b925060208401359150604084013590509250925092565b60006020828403121561055d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261058b57600080fd5b813567ffffffffffffffff808211156105a6576105a6610564565b604051601f8301601f19908116603f011681019082821181831017156105ce576105ce610564565b816040528381528660208588010111156105e757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561061c57600080fd5b610625846104b3565b925060208401359150604084013567ffffffffffffffff81111561064857600080fd5b6106548682870161057a565b9150509250925092565b600081518084526020808501945080840160005b8381101561068e57815187529582019590820190600101610672565b509495945050505050565b6001600160a01b0385168152602081018490526060604082018190528101829052608081016104e5565b60005b838110156106df5781810151838201526020016106c7565b50506000910152565b600081518084526107008160208601602086016106c4565b601f01601f19169290920160200192915050565b6020815260006104e560208301846106e8565b6000806040838503121561073a57600080fd5b610743836104b3565b9150610751602084016104b3565b90509250929050565b600181811c9082168061076e57607f821691505b60208210810361078e57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156107a657600080fd5b81516104e5816108b8565b901515815260200190565b6000806000606084860312156107d157600080fd5b6107da846104b3565b92506107e8602085016104b3565b9150604084013590509250925092565b60008060006060848603121561080d57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561083657600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161086c5761086c61083d565b5060010190565b8082018082111561088657610886610837565b92915050565b6000825161089e8184602087016106c4565b9190910192915050565b8181038181111561088657610886610837565b80151581146108c957600080fd5b5056fea2646970667358221220' as Hex;

export interface TestContracts {
	nft: {
		address: Address;
		abi: typeof testNFTAbi;
	};
	marketplace: {
		address: Address;
		abi: typeof testMarketplaceAbi;
	};
}

/**
 * Deploy test contracts on Anvil
 */
export async function deployTestContracts(
	client: TestClient,
): Promise<TestContracts> {
	// Deploy NFT contract
	const nftHash = await client.deployContract({
		abi: testNFTAbi,
		bytecode: testNFTBytecode,
		account: TEST_ACCOUNTS[0],
		chain: client.chain,
	});

	const nftReceipt = await client.waitForTransactionReceipt({ hash: nftHash });
	if (!nftReceipt.contractAddress) {
		throw new Error('NFT contract deployment failed');
	}

	// Deploy marketplace contract
	const marketplaceHash = await client.deployContract({
		abi: testMarketplaceAbi,
		bytecode: testMarketplaceBytecode,
		account: TEST_ACCOUNTS[0],
		chain: client.chain,
	});

	const marketplaceReceipt = await client.waitForTransactionReceipt({
		hash: marketplaceHash,
	});
	if (!marketplaceReceipt.contractAddress) {
		throw new Error('Marketplace contract deployment failed');
	}

	return {
		nft: {
			address: nftReceipt.contractAddress,
			abi: testNFTAbi,
		},
		marketplace: {
			address: marketplaceReceipt.contractAddress,
			abi: testMarketplaceAbi,
		},
	};
}

/**
 * Mint a test NFT
 */
export async function mintTestNFT(
	client: TestClient,
	nftContract: TestContracts['nft'],
	to: Address,
	tokenId = '1',
): Promise<string> {
	const hash = await client.writeContract({
		address: nftContract.address,
		abi: nftContract.abi,
		functionName: 'mint',
		args: [to, BigInt(tokenId)],
		account: TEST_ACCOUNTS[0],
		chain: client.chain,
	});

	await client.waitForTransactionReceipt({ hash });
	return tokenId;
}

/**
 * Approve NFT for marketplace
 */
export async function approveNFT(
	client: TestClient,
	nftContract: TestContracts['nft'],
	marketplaceAddress: Address,
	owner: Address,
): Promise<void> {
	const hash = await client.writeContract({
		address: nftContract.address,
		abi: nftContract.abi,
		functionName: 'setApprovalForAll',
		args: [marketplaceAddress, true],
		account: owner,
		chain: client.chain,
	});

	await client.waitForTransactionReceipt({ hash });
}

/**
 * Create a test order on the marketplace
 */
export async function createTestOrder(
	client: TestClient,
	contracts: TestContracts,
	tokenId: string,
	price: string,
	seller: Address,
): Promise<string> {
	// First approve the marketplace
	await approveNFT(
		client,
		contracts.nft,
		contracts.marketplace.address,
		seller,
	);

	// Create the order
	const hash = await client.writeContract({
		address: contracts.marketplace.address,
		abi: contracts.marketplace.abi,
		functionName: 'createOrder',
		args: [contracts.nft.address, BigInt(tokenId), BigInt(price)],
		account: seller,
		chain: client.chain,
	});

	await client.waitForTransactionReceipt({ hash });

	// Extract order ID from events (simplified)
	return '1'; // In real implementation, parse from events
}

/**
 * Fund an account with ETH
 */
export async function fundAccount(
	client: TestClient,
	account: Address,
	amount: string,
): Promise<void> {
	const hash = await client.sendTransaction({
		to: account,
		value: BigInt(amount),
		account: TEST_ACCOUNTS[0], // Assuming test account 0 has funds
		chain: client.chain,
	});

	await client.waitForTransactionReceipt({ hash });
}

/**
 * Check NFT ownership
 */
export async function checkNFTOwner(
	client: TestClient,
	nftContract: TestContracts['nft'],
	tokenId: string,
): Promise<Address> {
	return await client.readContract({
		address: nftContract.address,
		abi: nftContract.abi,
		functionName: 'ownerOf',
		args: [BigInt(tokenId)],
	});
}

/**
 * Check if NFT is approved for marketplace
 */
export async function checkNFTApproval(
	client: TestClient,
	nftContract: TestContracts['nft'],
	owner: Address,
	marketplaceAddress: Address,
): Promise<boolean> {
	return await client.readContract({
		address: nftContract.address,
		abi: nftContract.abi,
		functionName: 'isApprovedForAll',
		args: [owner, marketplaceAddress],
	});
}
