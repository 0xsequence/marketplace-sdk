{"version":3,"file":"orders-BLGTK6Pr.js","names":["apiArgs: GetCountOfAllOrdersArgs","apiArgs: GetCountOfListingsForCollectibleArgs","apiArgs: GetCountOfOffersForCollectibleArgs","apiArgs: GetFloorOrderArgs","apiArgs: GetCountOfFilteredOrdersArgs","apiArgs: GetCollectibleHighestOfferArgs","apiArgs: ListOrdersWithCollectiblesArgs","pageParams: Page","apiArgs: ListOrdersWithCollectiblesArgs","apiArgs: ListCollectibleListingsArgs","finalPage: Page | undefined","apiArgs: ListOffersForCollectibleArgs","apiArgs: GetCollectibleLowestListingArgs"],"sources":["../src/react/queries/orders/countItemsOrdersForCollection.ts","../src/react/queries/orders/countListingsForCollectible.ts","../src/react/queries/orders/countOffersForCollectible.ts","../src/react/queries/orders/floorOrder.ts","../src/react/queries/orders/getCountOfFilteredOrders.ts","../src/react/queries/orders/highestOffer.ts","../src/react/queries/orders/listItemsOrdersForCollection.ts","../src/react/queries/orders/listItemsOrdersForCollectionPaginated.ts","../src/react/queries/orders/listListingsForCollectible.ts","../src/react/queries/orders/listOffersForCollectible.ts","../src/react/queries/orders/lowestListing.ts"],"sourcesContent":["import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../types';\nimport {\n\tgetMarketplaceClient,\n\ttype QueryKeyArgs,\n\ttype ValuesOptional,\n} from '../../_internal';\nimport type {\n\tGetCountOfAllOrdersArgs,\n\tOrderSide,\n} from '../../_internal/api/marketplace.gen';\nimport { collectionKeys } from '../../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchCountItemsOrdersForCollectionParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tconfig: SdkConfig;\n\tside: OrderSide;\n}\n\n/**\n * Fetches count of orders for a collection from the marketplace API\n */\nexport async function fetchCountItemsOrdersForCollection(\n\tparams: FetchCountItemsOrdersForCollectionParams,\n) {\n\tconst { collectionAddress, chainId, config, side } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCountOfAllOrdersArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tside,\n\t};\n\n\tconst result = await client.getCountOfAllOrders(apiArgs);\n\treturn result.count;\n}\n\nexport type CountItemsOrdersForCollectionQueryOptions =\n\tValuesOptional<FetchCountItemsOrdersForCollectionParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getCountItemsOrdersForCollectionQueryKey(\n\tparams: CountItemsOrdersForCollectionQueryOptions,\n) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\tside: params.side,\n\t} satisfies QueryKeyArgs<GetCountOfAllOrdersArgs>;\n\n\treturn [...collectionKeys.collectionItemsOrdersCount, apiArgs] as const;\n}\n\nexport function countItemsOrdersForCollectionQueryOptions(\n\tparams: CountItemsOrdersForCollectionQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\tparams.side &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getCountItemsOrdersForCollectionQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchCountItemsOrdersForCollection({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tside: params.side!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../types';\nimport {\n\tgetMarketplaceClient,\n\ttype QueryKeyArgs,\n\ttype ValuesOptional,\n} from '../../_internal';\nimport type {\n\tGetCountOfListingsForCollectibleArgs,\n\tOrderFilter,\n} from '../../_internal/api/marketplace.gen';\nimport { collectableKeys } from '../../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchCountListingsForCollectibleParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n\tfilter?: OrderFilter;\n}\n\n/**\n * Fetches count of listings for a collectible from the marketplace API\n */\nexport async function fetchCountListingsForCollectible(\n\tparams: FetchCountListingsForCollectibleParams,\n) {\n\tconst { collectionAddress, chainId, collectibleId, config, filter } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCountOfListingsForCollectibleArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\tfilter,\n\t};\n\n\tconst result = await client.getCountOfListingsForCollectible(apiArgs);\n\treturn result.count;\n}\n\nexport type CountListingsForCollectibleQueryOptions =\n\tValuesOptional<FetchCountListingsForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getCountListingsForCollectibleQueryKey(\n\tparams: CountListingsForCollectibleQueryOptions,\n) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\ttokenId: params.collectibleId,\n\t\tfilter: params.filter,\n\t} satisfies QueryKeyArgs<GetCountOfListingsForCollectibleArgs>;\n\n\treturn [...collectableKeys.listingsCount, apiArgs] as const;\n}\n\nexport function countListingsForCollectibleQueryOptions(\n\tparams: CountListingsForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getCountListingsForCollectibleQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchCountListingsForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../types';\nimport {\n\tgetMarketplaceClient,\n\ttype QueryKeyArgs,\n\ttype ValuesOptional,\n} from '../../_internal';\nimport type {\n\tGetCountOfOffersForCollectibleArgs,\n\tOrderFilter,\n} from '../../_internal/api/marketplace.gen';\nimport { collectableKeys } from '../../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchCountOffersForCollectibleParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n\tfilter?: OrderFilter;\n}\n\n/**\n * Fetches count of offers for a collectible from the marketplace API\n */\nexport async function fetchCountOffersForCollectible(\n\tparams: FetchCountOffersForCollectibleParams,\n) {\n\tconst { collectionAddress, chainId, collectibleId, config, filter } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCountOfOffersForCollectibleArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\tfilter,\n\t};\n\n\tconst result = await client.getCountOfOffersForCollectible(apiArgs);\n\treturn result.count;\n}\n\nexport type CountOffersForCollectibleQueryOptions =\n\tValuesOptional<FetchCountOffersForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getCountOffersForCollectibleQueryKey(\n\tparams: CountOffersForCollectibleQueryOptions,\n) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\ttokenId: params.collectibleId,\n\t\tfilter: params.filter,\n\t} satisfies QueryKeyArgs<GetCountOfOffersForCollectibleArgs>;\n\n\treturn [...collectableKeys.offersCount, apiArgs] as const;\n}\n\nexport function countOffersForCollectibleQueryOptions(\n\tparams: CountOffersForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getCountOffersForCollectibleQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchCountOffersForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../types';\nimport {\n\tcollectableKeys,\n\ttype GetFloorOrderArgs,\n\tgetMarketplaceClient,\n\ttype QueryKeyArgs,\n\ttype ValuesOptional,\n} from '../../_internal';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchFloorOrderParams\n\textends Omit<GetFloorOrderArgs, 'contractAddress' | 'chainId'> {\n\tcollectionAddress: string;\n\tchainId: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches the floor order for a collection from the marketplace API\n */\nexport async function fetchFloorOrder(params: FetchFloorOrderParams) {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: GetFloorOrderArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\t...additionalApiParams,\n\t};\n\n\tconst result = await marketplaceClient.getFloorOrder(apiArgs);\n\treturn result.collectible;\n}\n\nexport type FloorOrderQueryOptions = ValuesOptional<FetchFloorOrderParams> & {\n\tquery?: StandardQueryOptions;\n};\n\nexport function getFloorOrderQueryKey(params: FloorOrderQueryOptions) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\tfilter: params.filter,\n\t} satisfies QueryKeyArgs<GetFloorOrderArgs>;\n\n\treturn [...collectableKeys.floorOrders, apiArgs] as const;\n}\n\nexport function floorOrderQueryOptions(params: FloorOrderQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getFloorOrderQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchFloorOrder({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\t...((params.filter && { filter: params.filter }) || {}),\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../types';\nimport {\n\tgetMarketplaceClient,\n\ttype QueryKeyArgs,\n\ttype ValuesOptional,\n} from '../../_internal';\nimport type {\n\tGetCountOfFilteredOrdersArgs,\n\tOrderSide,\n\tOrdersFilter,\n} from '../../_internal/api/marketplace.gen';\nimport { collectionKeys } from '../../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchGetCountOfFilteredOrdersParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tconfig: SdkConfig;\n\tside: OrderSide;\n\tfilter?: OrdersFilter;\n}\n\nexport async function fetchGetCountOfFilteredOrders(\n\tparams: FetchGetCountOfFilteredOrdersParams,\n) {\n\tconst { collectionAddress, chainId, config, side, filter } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCountOfFilteredOrdersArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tside,\n\t\tfilter,\n\t};\n\n\tconst result = await client.getCountOfFilteredOrders(apiArgs);\n\treturn result.count;\n}\n\nexport type GetCountOfFilteredOrdersQueryOptions =\n\tValuesOptional<FetchGetCountOfFilteredOrdersParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getCountOfFilteredOrdersQueryKey(\n\tparams: GetCountOfFilteredOrdersQueryOptions,\n) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\tside: params.side,\n\t\tfilter: params.filter,\n\t} satisfies QueryKeyArgs<GetCountOfFilteredOrdersArgs>;\n\n\treturn [...collectionKeys.getCountOfFilteredOrders, apiArgs] as const;\n}\n\nexport function getCountOfFilteredOrdersQueryOptions(\n\tparams: GetCountOfFilteredOrdersQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\tparams.side &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getCountOfFilteredOrdersQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchGetCountOfFilteredOrders({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tside: params.side!,\n\t\t\t\tfilter: params.filter,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../types';\nimport {\n\tcollectableKeys,\n\ttype GetCollectibleHighestOfferArgs,\n\tgetMarketplaceClient,\n\ttype QueryKeyArgs,\n\ttype ValuesOptional,\n} from '../../_internal';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchHighestOfferParams\n\textends Omit<GetCollectibleHighestOfferArgs, 'contractAddress' | 'chainId'> {\n\tcollectionAddress: string;\n\tchainId: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches the highest offer for a collectible from the marketplace API\n */\nexport async function fetchHighestOffer(params: FetchHighestOfferParams) {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCollectibleHighestOfferArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\t...additionalApiParams,\n\t};\n\n\tconst result = await marketplaceClient.getCollectibleHighestOffer(apiArgs);\n\treturn result.order ?? null;\n}\n\nexport type HighestOfferQueryOptions =\n\tValuesOptional<FetchHighestOfferParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getHighestOfferQueryKey(params: HighestOfferQueryOptions) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\ttokenId: params.tokenId,\n\t\tfilter: params.filter,\n\t} satisfies QueryKeyArgs<GetCollectibleHighestOfferArgs>;\n\n\treturn [...collectableKeys.highestOffers, apiArgs] as const;\n}\n\nexport function highestOfferQueryOptions(params: HighestOfferQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.tokenId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getHighestOfferQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchHighestOffer({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\ttokenId: params.tokenId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { infiniteQueryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Page, SdkConfig } from '../../../types';\nimport type {\n\tListOrdersWithCollectiblesArgs,\n\tListOrdersWithCollectiblesReturn,\n\tQueryKeyArgs,\n\tValuesOptional,\n} from '../../_internal';\nimport { collectionKeys, getMarketplaceClient } from '../../_internal';\nimport type { StandardInfiniteQueryOptions } from '../../types/query';\n\nexport interface FetchListItemsOrdersForCollectionParams\n\textends Omit<ListOrdersWithCollectiblesArgs, 'chainId' | 'contractAddress'> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tconfig: SdkConfig;\n}\n\nexport async function fetchListItemsOrdersForCollection(\n\tparams: FetchListItemsOrdersForCollectionParams,\n\tpage: Page,\n): Promise<ListOrdersWithCollectiblesReturn> {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: ListOrdersWithCollectiblesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tpage: page,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listOrdersWithCollectibles(apiArgs);\n}\n\nexport type ListItemsOrdersForCollectionQueryOptions =\n\tValuesOptional<FetchListItemsOrdersForCollectionParams> & {\n\t\tquery?: StandardInfiniteQueryOptions;\n\t};\n\nexport function getListItemsOrdersForCollectionQueryKey(\n\tparams: ListItemsOrdersForCollectionQueryOptions,\n) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\tside: params.side,\n\t\tfilter: params.filter,\n\t} satisfies QueryKeyArgs<Omit<ListOrdersWithCollectiblesArgs, 'page'>>;\n\n\treturn [...collectionKeys.collectionItemsOrders, apiArgs] as const;\n}\n\nexport function listItemsOrdersForCollectionQueryOptions(\n\tparams: ListItemsOrdersForCollectionQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\tparams.side &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn infiniteQueryOptions({\n\t\tqueryKey: getListItemsOrdersForCollectionQueryKey(params),\n\t\tqueryFn: async ({ pageParam }) => {\n\t\t\treturn fetchListItemsOrdersForCollection(\n\t\t\t\t{\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tchainId: params.chainId!,\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tconfig: params.config!,\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tside: params.side!,\n\t\t\t\t\tfilter: params.filter,\n\t\t\t\t},\n\t\t\t\tpageParam,\n\t\t\t);\n\t\t},\n\t\tinitialPageParam: (params.page || { page: 1, pageSize: 30 }) as Page,\n\t\tgetNextPageParam: (lastPage) =>\n\t\t\tlastPage.page?.more ? lastPage.page : undefined,\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Page, SdkConfig } from '../../../types';\nimport type {\n\tListOrdersWithCollectiblesArgs,\n\tListOrdersWithCollectiblesReturn,\n\tValuesOptional,\n} from '../../_internal';\nimport { collectionKeys, getMarketplaceClient } from '../../_internal';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchListItemsOrdersForCollectionPaginatedParams\n\textends Omit<\n\t\tListOrdersWithCollectiblesArgs,\n\t\t'chainId' | 'contractAddress' | 'page'\n\t> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tpage?: number;\n\tpageSize?: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches a list of items orders for a collection with pagination support from the Marketplace API\n */\nexport async function fetchListItemsOrdersForCollectionPaginated(\n\tparams: FetchListItemsOrdersForCollectionPaginatedParams,\n): Promise<ListOrdersWithCollectiblesReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tconfig,\n\t\tpage = 1,\n\t\tpageSize = 30,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst pageParams: Page = {\n\t\tpage,\n\t\tpageSize,\n\t};\n\n\tconst apiArgs: ListOrdersWithCollectiblesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tpage: pageParams,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listOrdersWithCollectibles(apiArgs);\n}\n\nexport type ListItemsOrdersForCollectionPaginatedQueryOptions =\n\tValuesOptional<FetchListItemsOrdersForCollectionPaginatedParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listItemsOrdersForCollectionPaginatedQueryOptions(\n\tparams: ListItemsOrdersForCollectionPaginatedQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\tparams.side &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectionKeys.collectionItemsOrders, 'paginated', params],\n\t\tqueryFn: () =>\n\t\t\tfetchListItemsOrdersForCollectionPaginated({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tside: params.side!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tpage: params.page,\n\t\t\t\tpageSize: params.pageSize,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../../types';\nimport type {\n\tListCollectibleListingsArgs,\n\tListCollectibleListingsReturn,\n\tQueryKeyArgs,\n\tValuesOptional,\n} from '../../_internal';\nimport { collectableKeys, getMarketplaceClient } from '../../_internal';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchListListingsForCollectibleParams\n\textends Omit<\n\t\tListCollectibleListingsArgs,\n\t\t'chainId' | 'contractAddress' | 'tokenId'\n\t> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches listings for a specific collectible from the Marketplace API\n */\nexport async function fetchListListingsForCollectible(\n\tparams: FetchListListingsForCollectibleParams,\n): Promise<ListCollectibleListingsReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tcollectibleId,\n\t\tconfig,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: ListCollectibleListingsArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listCollectibleListings(apiArgs);\n}\n\nexport type ListListingsForCollectibleQueryOptions =\n\tValuesOptional<FetchListListingsForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getListListingsForCollectibleQueryKey(\n\tparams: ListListingsForCollectibleQueryOptions,\n) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\ttokenId: params.collectibleId,\n\t\tfilter: params.filter,\n\t\tpage: params.page,\n\t} satisfies QueryKeyArgs<ListCollectibleListingsArgs>;\n\n\treturn [...collectableKeys.listings, apiArgs] as const;\n}\n\nexport function listListingsForCollectibleQueryOptions(\n\tparams: ListListingsForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getListListingsForCollectibleQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchListListingsForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tpage: params.page,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../../types';\nimport type {\n\tListCollectibleOffersReturn,\n\tListOffersForCollectibleArgs,\n\tPage,\n\tQueryKeyArgs,\n\tSortBy,\n\tValuesOptional,\n} from '../../_internal';\nimport { collectableKeys, getMarketplaceClient } from '../../_internal';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchListOffersForCollectibleParams\n\textends Omit<\n\t\tListOffersForCollectibleArgs,\n\t\t'chainId' | 'contractAddress' | 'tokenId'\n\t> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n\tsort?: Array<SortBy>;\n}\n\n/**\n * Fetches offers for a specific collectible from the Marketplace API\n */\nexport async function fetchListOffersForCollectible(\n\tparams: FetchListOffersForCollectibleParams,\n): Promise<ListCollectibleOffersReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tcollectibleId,\n\t\tconfig,\n\t\tsort,\n\t\tpage,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst finalSort = sort || (page && 'sort' in page ? page.sort : undefined);\n\n\tlet finalPage: Page | undefined;\n\tif (page || finalSort) {\n\t\tfinalPage = {\n\t\t\tpage: page?.page ?? 1,\n\t\t\tpageSize: page?.pageSize ?? 20,\n\t\t\t...(page?.more && { more: page.more }),\n\t\t\t...(finalSort && { sort: finalSort }),\n\t\t} as Page;\n\t}\n\n\tconst apiArgs: ListOffersForCollectibleArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\tpage: finalPage,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listCollectibleOffers(apiArgs);\n}\n\nexport type ListOffersForCollectibleQueryOptions =\n\tValuesOptional<FetchListOffersForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getListOffersForCollectibleQueryKey(\n\tparams: ListOffersForCollectibleQueryOptions,\n) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\ttokenId: params.collectibleId,\n\t\tfilter: params.filter,\n\t\tpage: params.page,\n\t} satisfies QueryKeyArgs<ListOffersForCollectibleArgs>;\n\n\treturn [...collectableKeys.offers, apiArgs] as const;\n}\n\nexport function listOffersForCollectibleQueryOptions(\n\tparams: ListOffersForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getListOffersForCollectibleQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchListOffersForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tpage: params.page,\n\t\t\t\tsort: params.sort,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../../types';\nimport {\n\tcollectableKeys,\n\ttype GetCollectibleLowestListingArgs,\n\ttype GetCollectibleLowestListingReturn,\n\tgetMarketplaceClient,\n\ttype QueryKeyArgs,\n\ttype ValuesOptional,\n} from '../../_internal';\nimport type { StandardQueryOptions } from '../../types/query';\n\nexport interface FetchLowestListingParams\n\textends Omit<GetCollectibleLowestListingArgs, 'contractAddress' | 'chainId'> {\n\tcollectionAddress: string;\n\tchainId: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches the lowest listing for a collectible from the marketplace API\n */\nexport async function fetchLowestListing(\n\tparams: FetchLowestListingParams,\n): Promise<GetCollectibleLowestListingReturn['order'] | null> {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCollectibleLowestListingArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\t...additionalApiParams,\n\t};\n\n\tconst result = await marketplaceClient.getCollectibleLowestListing(apiArgs);\n\treturn result.order || null;\n}\n\nexport type LowestListingQueryOptions =\n\tValuesOptional<FetchLowestListingParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getLowestListingQueryKey(params: LowestListingQueryOptions) {\n\tconst apiArgs = {\n\t\tchainId: String(params.chainId),\n\t\tcontractAddress: params.collectionAddress,\n\t\ttokenId: params.tokenId,\n\t\tfilter: params.filter,\n\t} satisfies QueryKeyArgs<GetCollectibleLowestListingArgs>;\n\n\treturn [...collectableKeys.lowestListings, apiArgs] as const;\n}\n\nexport function lowestListingQueryOptions(params: LowestListingQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.tokenId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: getLowestListingQueryKey(params),\n\t\tqueryFn: () =>\n\t\t\tfetchLowestListing({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\ttokenId: params.tokenId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n"],"mappings":"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"}