{"version":3,"file":"queries-DOHOS4Kp.js","names":["args: Omit<UseBalanceOfCollectibleArgs, 'userAddress'> & {\n\t\tuserAddress: Address;\n\t}","config: SdkConfig","args: UseBalanceOfCollectibleArgs","params: FetchCollectibleParams","apiArgs: GetTokenMetadataArgs","params: CollectibleQueryOptions","params: FetchCountOfCollectablesParams","apiArgs: GetCountOfFilteredCollectiblesArgs","result","apiArgs","apiArgs: GetCountOfAllCollectiblesArgs","params: CountOfCollectablesQueryOptions","params: FetchListCollectibleActivitiesParams","pageParams: Page | undefined","apiArgs: ListCollectibleActivitiesArgs","params: ListCollectibleActivitiesQueryOptions","args: UseListBalancesArgs","config: SdkConfig","page: Page","params: FetchListCollectiblesParams","page: Page","apiArgs: ListCollectiblesArgs","collectibles: CollectibleOrder[]","params: ListCollectiblesQueryOptions","params: FetchListCollectiblesPaginatedParams","pageParams: Page","apiArgs: ListCollectiblesArgs","params: ListCollectiblesPaginatedQueryOptions","params: FetchCollectionParams","params: CollectionQueryOptions","params: FetchCollectionBalanceDetailsParams","params: CollectionBalanceDetailsQueryOptions","params: FetchCollectionDetailsParams","apiArgs: GetCollectionDetailArgs","params: CollectionDetailsQueryOptions","params: FetchListCollectionActivitiesParams","pageParams: Page | undefined","apiArgs: ListCollectionActivitiesArgs","params: ListCollectionActivitiesQueryOptions","marketplaceConfig: MarketplaceConfig","params: FetchListCollectionsParams","params: ListCollectionsQueryOptions","params: FetchCurrencyParams","currency","params: CurrencyQueryOptions","params: FetchMarketCurrenciesParams","params: MarketCurrenciesQueryOptions","params: FetchCountListingsForCollectibleParams","apiArgs: GetCountOfListingsForCollectibleArgs","params: CountListingsForCollectibleQueryOptions","params: FetchCountOffersForCollectibleParams","apiArgs: GetCountOfOffersForCollectibleArgs","params: CountOffersForCollectibleQueryOptions","params: FetchFloorOrderParams","apiArgs: GetFloorOrderArgs","params: FloorOrderQueryOptions","params: FetchHighestOfferParams","apiArgs: GetCollectibleHighestOfferArgs","params: HighestOfferQueryOptions","params: FetchListListingsForCollectibleParams","apiArgs: ListCollectibleListingsArgs","params: ListListingsForCollectibleQueryOptions","params: FetchListOffersForCollectibleParams","finalPage: Page | undefined","apiArgs: ListOffersForCollectibleArgs","params: ListOffersForCollectibleQueryOptions","params: FetchLowestListingParams","apiArgs: GetCollectibleLowestListingArgs","params: LowestListingQueryOptions","params: FetchCheckoutOptionsParams","apiArgs: CheckoutOptionsMarketplaceArgs","params: CheckoutOptionsQueryOptions","params: FetchCheckoutOptionsSalesContractParams","apiArgs: CheckoutOptionsSalesContractArgs","params: CheckoutOptionsSalesContractQueryOptions","params: FetchConvertPriceToUSDParams","c: Currency","params: ConvertPriceToUSDQueryOptions","params: FetchComparePricesParams","params: ComparePricesQueryOptions","args: UseCountOfPrimarySaleItemsArgs","config: SdkConfig","params: FetchFiltersParams","params: FiltersQueryOptions","params: FetchGetTokenRangesParams","params: GetTokenRangesQueryOptions","args: Omit<UseTokenBalancesArgs, 'userAddress'> & {\n\t\tuserAddress: Address;\n\t}","config: SdkConfig","args: UseTokenBalancesArgs","token: TokenBalance","chainId: number","accountAddress: Address","collectionAddress: Address","config: SdkConfig","isLaos721: boolean","args: GetInventoryArgs","page: Page","args: UseInventoryArgs","params: FetchListTokenMetadataParams","params: ListTokenMetadataQueryOptions","params: FetchPrimarySaleItemsParams","params: ListPrimarySaleItemsQueryOptions","initialPage: PageParam","params: FetchPrimarySaleItemsCountParams","args: PrimarySaleItemsCountQueryOptions","params: FetchSearchTokenMetadataParams","params: SearchTokenMetadataQueryOptions","params: FetchTokenSuppliesParams","result","apiArgs: GetTokenSuppliesArgs","params: TokenSuppliesQueryOptions"],"sources":["../src/react/queries/balanceOfCollectible.ts","../src/react/queries/collectible.ts","../src/react/queries/countOfCollectables.ts","../src/react/queries/listCollectibleActivities.ts","../src/react/queries/listBalances.ts","../src/react/queries/listCollectibles.ts","../src/react/queries/listCollectiblesPaginated.ts","../src/react/queries/collection.ts","../src/react/queries/collectionBalanceDetails.ts","../src/react/queries/collectionDetails.ts","../src/react/queries/listCollectionActivities.ts","../src/react/queries/listCollections.ts","../src/react/queries/currency.ts","../src/react/queries/marketCurrencies.ts","../src/react/queries/countListingsForCollectible.ts","../src/react/queries/countOffersForCollectible.ts","../src/react/queries/floorOrder.ts","../src/react/queries/highestOffer.ts","../src/react/queries/listListingsForCollectible.ts","../src/react/queries/listOffersForCollectible.ts","../src/react/queries/lowestListing.ts","../src/react/queries/checkoutOptions.ts","../src/react/queries/checkoutOptionsSalesContract.ts","../src/react/queries/convertPriceToUSD.ts","../src/react/queries/comparePrices.ts","../src/react/queries/countOfPrimarySaleItems.ts","../src/react/queries/filters.ts","../src/react/queries/getTokenRanges.ts","../src/react/queries/tokenBalances.ts","../src/react/queries/inventory.ts","../src/react/queries/listTokenMetadata.ts","../src/react/queries/primarySaleItems.ts","../src/react/queries/primarySaleItemsCount.ts","../src/react/queries/searchTokenMetadata.ts","../src/react/queries/tokenSupplies.ts"],"sourcesContent":["import { queryOptions, skipToken } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { UseQueryParameters } from 'wagmi/query';\nimport type { SdkConfig } from '../../types';\nimport { collectableKeys, getIndexerClient, LaosAPI } from '../_internal';\n\nexport type UseBalanceOfCollectibleArgs = {\n\tcollectionAddress: Address;\n\tcollectableId: string;\n\tuserAddress: Address | undefined;\n\tchainId: number;\n\tisLaos721?: boolean;\n\tincludeMetadata?: boolean;\n\tquery?: UseQueryParameters;\n};\n\n/**\n * Fetches the balance of a specific collectible for a user\n *\n * @param args - Arguments for the API call\n * @param config - SDK configuration\n * @returns The balance data\n */\nexport async function fetchBalanceOfCollectible(\n\targs: Omit<UseBalanceOfCollectibleArgs, 'userAddress'> & {\n\t\tuserAddress: Address;\n\t},\n\tconfig: SdkConfig,\n) {\n\tif (args.isLaos721) {\n\t\tconst laosApi = new LaosAPI();\n\t\tconst response = await laosApi.getTokenBalances({\n\t\t\tchainId: args.chainId.toString(),\n\t\t\tcontractAddress: args.collectionAddress,\n\t\t\taccountAddress: args.userAddress,\n\t\t\tincludeMetadata: true,\n\t\t});\n\n\t\treturn response.balances[0] || null;\n\t}\n\n\tconst indexerClient = getIndexerClient(args.chainId, config);\n\treturn indexerClient\n\t\t.getTokenBalances({\n\t\t\taccountAddress: args.userAddress,\n\t\t\tcontractAddress: args.collectionAddress,\n\t\t\ttokenID: args.collectableId,\n\t\t\tincludeMetadata: args.includeMetadata ?? false,\n\t\t\tmetadataOptions: {\n\t\t\t\tverifiedOnly: true,\n\t\t\t\tincludeContracts: [args.collectionAddress],\n\t\t\t},\n\t\t})\n\t\t.then((res) => res.balances[0] || null);\n}\n\n/**\n * Creates a tanstack query options object for the balance query\n *\n * @param args - The query arguments\n * @param config - SDK configuration\n * @returns Query options configuration\n */\nexport function balanceOfCollectibleOptions(\n\targs: UseBalanceOfCollectibleArgs,\n\tconfig: SdkConfig,\n) {\n\tconst enabled = !!args.userAddress && (args.query?.enabled ?? true);\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.userBalances, args],\n\t\tqueryFn: enabled\n\t\t\t? () =>\n\t\t\t\t\tfetchBalanceOfCollectible(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...args,\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: this is guaranteed by the userAddress check above\n\t\t\t\t\t\t\tuserAddress: args.userAddress!,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t)\n\t\t\t: skipToken,\n\t});\n}\n","import type { GetTokenMetadataArgs } from '@0xsequence/metadata';\nimport { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport { getMetadataClient, type ValuesOptional } from '../_internal';\nimport { collectableKeys } from '../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCollectibleParams\n\textends Omit<\n\t\tGetTokenMetadataArgs,\n\t\t'chainID' | 'contractAddress' | 'tokenIDs'\n\t> {\n\tchainId: number;\n\tcollectionAddress: string;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collectible metadata from the metadata API\n */\nexport async function fetchCollectible(params: FetchCollectibleParams) {\n\tconst { collectionAddress, collectibleId, chainId, config } = params;\n\n\tconst metadataClient = getMetadataClient(config);\n\n\tconst apiArgs: GetTokenMetadataArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainID: String(chainId),\n\t\ttokenIDs: [collectibleId],\n\t};\n\n\tconst result = await metadataClient.getTokenMetadata(apiArgs);\n\treturn result.tokenMetadata[0];\n}\n\nexport type CollectibleQueryOptions = ValuesOptional<FetchCollectibleParams> & {\n\tquery?: StandardQueryOptions;\n};\n\nexport function collectibleQueryOptions(params: CollectibleQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.details, params],\n\t\tqueryFn: () =>\n\t\t\tfetchCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport { getMarketplaceClient, type ValuesOptional } from '../_internal';\nimport type {\n\tCollectiblesFilter,\n\tGetCountOfAllCollectiblesArgs,\n\tGetCountOfFilteredCollectiblesArgs,\n\tOrderSide,\n} from '../_internal/api/marketplace.gen';\nimport { collectableKeys } from '../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCountOfCollectablesParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tconfig: SdkConfig;\n\tfilter?: CollectiblesFilter;\n\tside?: OrderSide;\n}\n\n/**\n * Fetches count of collectibles from the marketplace API\n */\nexport async function fetchCountOfCollectables(\n\tparams: FetchCountOfCollectablesParams,\n) {\n\tconst { collectionAddress, chainId, config, filter, side } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tif (filter && side) {\n\t\tconst apiArgs: GetCountOfFilteredCollectiblesArgs = {\n\t\t\tcontractAddress: collectionAddress,\n\t\t\tchainId: String(chainId),\n\t\t\tfilter,\n\t\t\tside,\n\t\t};\n\n\t\tconst result = await client.getCountOfFilteredCollectibles(apiArgs);\n\t\treturn result.count;\n\t}\n\n\tconst apiArgs: GetCountOfAllCollectiblesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t};\n\n\tconst result = await client.getCountOfAllCollectibles(apiArgs);\n\treturn result.count;\n}\n\nexport type CountOfCollectablesQueryOptions =\n\tValuesOptional<FetchCountOfCollectablesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function countOfCollectablesQueryOptions(\n\tparams: CountOfCollectablesQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.counts, params],\n\t\tqueryFn: () =>\n\t\t\tfetchCountOfCollectables({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tside: params.side,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Page, SdkConfig } from '../../types';\nimport type {\n\tListCollectibleActivitiesArgs,\n\tListCollectibleActivitiesReturn,\n\tSortBy,\n\tValuesOptional,\n} from '../_internal';\nimport { collectableKeys, getMarketplaceClient } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchListCollectibleActivitiesParams\n\textends Omit<\n\t\tListCollectibleActivitiesArgs,\n\t\t'chainId' | 'contractAddress' | 'page'\n\t> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tpage?: number;\n\tpageSize?: number;\n\tsort?: SortBy[];\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collectible activities from the Marketplace API\n */\nexport async function fetchListCollectibleActivities(\n\tparams: FetchListCollectibleActivitiesParams,\n): Promise<ListCollectibleActivitiesReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tconfig,\n\t\tpage,\n\t\tpageSize,\n\t\tsort,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst pageParams: Page | undefined =\n\t\tpage || pageSize || sort\n\t\t\t? {\n\t\t\t\t\tpage: page ?? 1,\n\t\t\t\t\tpageSize: pageSize ?? 10,\n\t\t\t\t\tsort,\n\t\t\t\t}\n\t\t\t: undefined;\n\n\tconst apiArgs: ListCollectibleActivitiesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tpage: pageParams,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listCollectibleActivities(apiArgs);\n}\n\nexport type ListCollectibleActivitiesQueryOptions =\n\tValuesOptional<FetchListCollectibleActivitiesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listCollectibleActivitiesQueryOptions(\n\tparams: ListCollectibleActivitiesQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.tokenId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.collectibleActivities, params],\n\t\tqueryFn: () =>\n\t\t\tfetchListCollectibleActivities({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\ttokenId: params.tokenId!,\n\t\t\t\tpage: params.page,\n\t\t\t\tpageSize: params.pageSize,\n\t\t\t\tsort: params.sort,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import type { GetTokenBalancesReturn, Page } from '@0xsequence/indexer';\nimport { infiniteQueryOptions } from '@tanstack/react-query';\nimport type { Address, Hex } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport { balanceQueries, getIndexerClient, LaosAPI } from '../_internal';\n\nexport type UseListBalancesArgs = {\n\tchainId: number;\n\taccountAddress?: Address;\n\tcontractAddress?: Address;\n\ttokenId?: string;\n\tincludeMetadata?: boolean;\n\tmetadataOptions?: {\n\t\tverifiedOnly?: boolean;\n\t\tunverifiedOnly?: boolean;\n\t\tincludeContracts?: Hex[];\n\t};\n\tincludeCollectionTokens?: boolean;\n\tpage?: Page;\n\tisLaos721?: boolean;\n\t//TODO: More options\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n};\n\nexport async function fetchBalances(\n\targs: UseListBalancesArgs,\n\tconfig: SdkConfig,\n\tpage: Page,\n): Promise<GetTokenBalancesReturn> {\n\tif (args.isLaos721 && args.accountAddress) {\n\t\tconst laosClient = new LaosAPI();\n\t\treturn laosClient.getTokenBalances({\n\t\t\tchainId: args.chainId.toString(),\n\t\t\taccountAddress: args.accountAddress,\n\t\t\tcontractAddress: args.contractAddress as Address,\n\t\t\tincludeMetadata: args.includeMetadata,\n\t\t\tpage: {\n\t\t\t\tsort: [\n\t\t\t\t\t{\n\t\t\t\t\t\tcolumn: 'CREATED_AT',\n\t\t\t\t\t\torder: 'DESC',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t});\n\t}\n\n\tconst indexerClient = getIndexerClient(args.chainId, config);\n\treturn indexerClient.getTokenBalances({\n\t\t...args,\n\t\ttokenID: args.tokenId,\n\t\tpage: page,\n\t});\n}\n\n/**\n * Creates a tanstack infinite query options object for the balances query\n *\n * @param args - The query arguments\n * @param config - SDK configuration\n * @returns Query options configuration\n */\nexport function listBalancesOptions(\n\targs: UseListBalancesArgs,\n\tconfig: SdkConfig,\n) {\n\treturn infiniteQueryOptions({\n\t\t...args.query,\n\t\tqueryKey: [...balanceQueries.lists, args, config],\n\t\tqueryFn: ({ pageParam }) => fetchBalances(args, config, pageParam),\n\t\tinitialPageParam: { page: 1, pageSize: 30 } as Page,\n\t\tgetNextPageParam: (lastPage) => lastPage.page.after,\n\t});\n}\n","import { infiniteQueryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Page, SdkConfig } from '../../types';\nimport type { CardType } from '../../types/types';\nimport { compareAddress } from '../../utils';\nimport type {\n\tListCollectiblesArgs,\n\tListCollectiblesReturn,\n\tValuesOptional,\n} from '../_internal';\nimport {\n\ttype CollectibleOrder,\n\tcollectableKeys,\n\tgetMarketplaceClient,\n\tMetadataStatus,\n\tOrderSide,\n} from '../_internal';\nimport type { StandardInfiniteQueryOptions } from '../types/query';\nimport { fetchBalances, type UseListBalancesArgs } from './listBalances';\nimport { fetchMarketplaceConfig } from './marketplaceConfig';\n\nexport interface FetchListCollectiblesParams\n\textends Omit<ListCollectiblesArgs, 'chainId' | 'contractAddress'> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tisLaos721?: boolean;\n\tcardType?: CardType;\n\tconfig: SdkConfig;\n\tenabled?: boolean;\n}\n\n/**\n * Fetches a list of collectibles with pagination support from the Marketplace API\n */\nexport async function fetchListCollectibles(\n\tparams: FetchListCollectiblesParams,\n\tpage: Page,\n): Promise<ListCollectiblesReturn> {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\tconst marketplaceConfig = await fetchMarketplaceConfig({ config });\n\tconst isMarketCollection = marketplaceConfig?.market.collections.some(\n\t\t(collection) => compareAddress(collection.itemsAddress, collectionAddress),\n\t);\n\n\t// If it's not a market collection, return an empty list. those collections are not compatible with the ListCollectibles endpoint.\n\tif (params.enabled === false || !isMarketCollection) {\n\t\treturn {\n\t\t\tcollectibles: [],\n\t\t\tpage: {\n\t\t\t\tpage: 1,\n\t\t\t\tpageSize: 30,\n\t\t\t\tmore: false,\n\t\t\t},\n\t\t};\n\t}\n\n\tconst apiArgs: ListCollectiblesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tpage: page,\n\t\t...additionalApiParams,\n\t};\n\n\tif (params.isLaos721 && params.side === OrderSide.listing) {\n\t\ttry {\n\t\t\tconst fetchBalancesArgs = {\n\t\t\t\tchainId: params.chainId,\n\t\t\t\taccountAddress: params.filter?.inAccounts?.[0] as Address,\n\t\t\t\tcontractAddress: params.collectionAddress,\n\t\t\t\tpage: page,\n\t\t\t\tincludeMetadata: true,\n\t\t\t\tisLaos721: true,\n\t\t\t} satisfies UseListBalancesArgs;\n\n\t\t\tconst balances = await fetchBalances(fetchBalancesArgs, config, page);\n\t\t\tconst collectibles: CollectibleOrder[] = balances.balances.map(\n\t\t\t\t(balance) => {\n\t\t\t\t\tif (!balance.tokenMetadata)\n\t\t\t\t\t\tthrow new Error('Token metadata not found');\n\t\t\t\t\treturn {\n\t\t\t\t\t\tmetadata: {\n\t\t\t\t\t\t\ttokenId: balance.tokenID ?? '',\n\t\t\t\t\t\t\tattributes: balance.tokenMetadata.attributes,\n\t\t\t\t\t\t\timage: balance.tokenMetadata.image,\n\t\t\t\t\t\t\tname: balance.tokenMetadata.name,\n\t\t\t\t\t\t\tdescription: balance.tokenMetadata.description,\n\t\t\t\t\t\t\tvideo: balance.tokenMetadata.video,\n\t\t\t\t\t\t\taudio: balance.tokenMetadata.audio,\n\t\t\t\t\t\t\tstatus: MetadataStatus.AVAILABLE,\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn {\n\t\t\t\tcollectibles: collectibles,\n\t\t\t\t//@ts-expect-error\n\t\t\t\tpage: balances.page,\n\t\t\t};\n\t\t} catch (error) {\n\t\t\t// If the request fails, ignore the error and return the collectibles from our indexer\n\t\t\tconsole.error(error);\n\t\t}\n\t}\n\n\treturn await marketplaceClient.listCollectibles(apiArgs);\n}\n\nexport type ListCollectiblesQueryOptions =\n\tValuesOptional<FetchListCollectiblesParams> & {\n\t\tquery?: StandardInfiniteQueryOptions;\n\t};\n\nexport function listCollectiblesQueryOptions(\n\tparams: ListCollectiblesQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.side &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn infiniteQueryOptions({\n\t\tqueryKey: [...collectableKeys.lists, params],\n\t\tqueryFn: async ({ pageParam }) => {\n\t\t\treturn fetchListCollectibles(\n\t\t\t\t{\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tchainId: params.chainId!,\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tconfig: params.config!,\n\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\tside: params.side!,\n\t\t\t\t\tfilter: params.filter,\n\t\t\t\t\tisLaos721: params.isLaos721,\n\t\t\t\t\tcardType: params.cardType,\n\t\t\t\t},\n\t\t\t\tpageParam,\n\t\t\t);\n\t\t},\n\t\tinitialPageParam: { page: 1, pageSize: 30 } as Page,\n\t\tgetNextPageParam: (lastPage) =>\n\t\t\tlastPage.page?.more ? lastPage.page : undefined,\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Page, SdkConfig } from '../../types';\nimport type {\n\tListCollectiblesArgs,\n\tListCollectiblesReturn,\n\tValuesOptional,\n} from '../_internal';\nimport { collectableKeys, getMarketplaceClient } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchListCollectiblesPaginatedParams\n\textends Omit<ListCollectiblesArgs, 'chainId' | 'contractAddress' | 'page'> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tpage?: number;\n\tpageSize?: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches a list of collectibles with pagination support from the Marketplace API\n */\nexport async function fetchListCollectiblesPaginated(\n\tparams: FetchListCollectiblesPaginatedParams,\n): Promise<ListCollectiblesReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tconfig,\n\t\tpage = 1,\n\t\tpageSize = 30,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst pageParams: Page = {\n\t\tpage,\n\t\tpageSize,\n\t};\n\n\tconst apiArgs: ListCollectiblesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tpage: pageParams,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listCollectibles(apiArgs);\n}\n\nexport type ListCollectiblesPaginatedQueryOptions =\n\tValuesOptional<FetchListCollectiblesPaginatedParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listCollectiblesPaginatedQueryOptions(\n\tparams: ListCollectiblesPaginatedQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.side &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.lists, 'paginated', params],\n\t\tqueryFn: () =>\n\t\t\tfetchListCollectiblesPaginated({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tside: params.side!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tpage: params.page,\n\t\t\t\tpageSize: params.pageSize,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport { getMetadataClient, type ValuesOptional } from '../_internal';\nimport { collectionKeys } from '../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCollectionParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collection information from the metadata API\n */\nexport async function fetchCollection(params: FetchCollectionParams) {\n\tconst { collectionAddress, chainId, config } = params;\n\n\tconst metadataClient = getMetadataClient(config);\n\n\tconst result = await metadataClient.getContractInfo({\n\t\tchainID: chainId.toString(),\n\t\tcontractAddress: collectionAddress,\n\t});\n\n\treturn result.contractInfo;\n}\n\nexport type CollectionQueryOptions = ValuesOptional<FetchCollectionParams> & {\n\tquery?: StandardQueryOptions;\n};\n\nexport function collectionQueryOptions(params: CollectionQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectionKeys.detail, params],\n\t\tqueryFn: () =>\n\t\t\tfetchCollection({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import type { GetTokenBalancesDetailsReturn } from '@0xsequence/indexer';\nimport { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport { getIndexerClient, type ValuesOptional } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface CollectionBalanceFilter {\n\taccountAddresses: Array<Address>;\n\tcontractWhitelist?: Array<Address>;\n\tomitNativeBalances: boolean;\n}\n\nexport interface FetchCollectionBalanceDetailsParams {\n\tchainId: number;\n\tfilter: CollectionBalanceFilter;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches detailed balance information for multiple accounts from the Indexer API\n */\nexport async function fetchCollectionBalanceDetails(\n\tparams: FetchCollectionBalanceDetailsParams,\n): Promise<GetTokenBalancesDetailsReturn> {\n\tconst { chainId, filter, config } = params;\n\n\tconst indexerClient = getIndexerClient(chainId, config);\n\n\tconst promises = filter.accountAddresses.map((accountAddress) =>\n\t\tindexerClient.getTokenBalancesDetails({\n\t\t\tfilter: {\n\t\t\t\taccountAddresses: [accountAddress],\n\t\t\t\tcontractWhitelist: filter.contractWhitelist,\n\t\t\t\tomitNativeBalances: filter.omitNativeBalances,\n\t\t\t},\n\t\t}),\n\t);\n\n\tconst responses = await Promise.all(promises);\n\tconst mergedResponse = responses.reduce<GetTokenBalancesDetailsReturn>(\n\t\t(acc, curr) => {\n\t\t\tif (!curr) return acc;\n\t\t\treturn {\n\t\t\t\tpage: curr.page,\n\t\t\t\tnativeBalances: [\n\t\t\t\t\t...(acc.nativeBalances || []),\n\t\t\t\t\t...(curr.nativeBalances || []),\n\t\t\t\t],\n\t\t\t\tbalances: [...(acc.balances || []), ...(curr.balances || [])],\n\t\t\t};\n\t\t},\n\t\t{ page: {}, nativeBalances: [], balances: [] },\n\t);\n\n\tif (!mergedResponse) {\n\t\tthrow new Error('Failed to fetch collection balance details');\n\t}\n\n\treturn mergedResponse;\n}\n\nexport type CollectionBalanceDetailsQueryOptions =\n\tValuesOptional<FetchCollectionBalanceDetailsParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function collectionBalanceDetailsQueryOptions(\n\tparams: CollectionBalanceDetailsQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.filter?.accountAddresses?.length &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['balances', 'collectionBalanceDetails', params],\n\t\tqueryFn: () =>\n\t\t\tfetchCollectionBalanceDetails({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tfilter: params.filter!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport { getMarketplaceClient, type ValuesOptional } from '../_internal';\nimport type { GetCollectionDetailArgs } from '../_internal/api/marketplace.gen';\nimport { collectionKeys } from '../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCollectionDetailsParams\n\textends Omit<GetCollectionDetailArgs, 'chainId' | 'contractAddress'> {\n\tchainId: number;\n\tcollectionAddress: string;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collection details from the marketplace API\n */\nexport async function fetchCollectionDetails(\n\tparams: FetchCollectionDetailsParams,\n) {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCollectionDetailArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\t...additionalApiParams,\n\t};\n\n\tconst result = await marketplaceClient.getCollectionDetail(apiArgs);\n\treturn result.collection;\n}\n\nexport type CollectionDetailsQueryOptions =\n\tValuesOptional<FetchCollectionDetailsParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function collectionDetailsQueryOptions(\n\tparams: CollectionDetailsQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectionKeys.detail, params],\n\t\tqueryFn: () =>\n\t\t\tfetchCollectionDetails({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Page, SdkConfig } from '../../types';\nimport type {\n\tListCollectionActivitiesArgs,\n\tListCollectionActivitiesReturn,\n\tSortBy,\n\tValuesOptional,\n} from '../_internal';\nimport { getMarketplaceClient } from '../_internal';\nimport { collectionKeys } from '../_internal/api';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchListCollectionActivitiesParams\n\textends Omit<\n\t\tListCollectionActivitiesArgs,\n\t\t'chainId' | 'contractAddress' | 'page'\n\t> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tpage?: number;\n\tpageSize?: number;\n\tsort?: SortBy[];\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collection activities from the Marketplace API\n */\nexport async function fetchListCollectionActivities(\n\tparams: FetchListCollectionActivitiesParams,\n): Promise<ListCollectionActivitiesReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tconfig,\n\t\tpage,\n\t\tpageSize,\n\t\tsort,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst pageParams: Page | undefined =\n\t\tpage || pageSize || sort\n\t\t\t? {\n\t\t\t\t\tpage: page ?? 1,\n\t\t\t\t\tpageSize: pageSize ?? 10,\n\t\t\t\t\tsort,\n\t\t\t\t}\n\t\t\t: undefined;\n\n\tconst apiArgs: ListCollectionActivitiesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\tpage: pageParams,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listCollectionActivities(apiArgs);\n}\n\nexport type ListCollectionActivitiesQueryOptions =\n\tValuesOptional<FetchListCollectionActivitiesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listCollectionActivitiesQueryOptions(\n\tparams: ListCollectionActivitiesQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectionKeys.collectionActivities, params],\n\t\tqueryFn: () =>\n\t\t\tfetchListCollectionActivities({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tpage: params.page,\n\t\t\t\tpageSize: params.pageSize,\n\t\t\t\tsort: params.sort,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import type { ContractInfo } from '@0xsequence/metadata';\nimport { queryOptions, skipToken } from '@tanstack/react-query';\nimport type { CardType, SdkConfig } from '../../types';\nimport type {\n\tMarketCollection,\n\tMarketplaceConfig,\n\tShopCollection,\n} from '../../types/new-marketplace-types';\nimport { compareAddress } from '../../utils';\nimport {\n\tcollectionKeys,\n\tgetMetadataClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nconst allCollections = (marketplaceConfig: MarketplaceConfig) => {\n\treturn [\n\t\t...marketplaceConfig.market.collections,\n\t\t...marketplaceConfig.shop.collections,\n\t];\n};\n\nexport interface FetchListCollectionsParams {\n\tcardType?: CardType;\n\tmarketplaceConfig: MarketplaceConfig;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collections from the metadata API with marketplace config filtering\n */\nexport async function fetchListCollections(params: FetchListCollectionsParams) {\n\tconst { cardType, marketplaceConfig, config } = params;\n\tconst metadataClient = getMetadataClient(config);\n\n\tlet collections = allCollections(marketplaceConfig);\n\n\tif (!collections?.length) {\n\t\treturn [];\n\t}\n\n\tif (cardType) {\n\t\tcollections = collections.filter(\n\t\t\t(collection) => collection.cardType === cardType,\n\t\t);\n\t}\n\n\t// Group collections by chainId\n\tconst collectionsByChain = collections.reduce<Record<string, string[]>>(\n\t\t(acc, curr) => {\n\t\t\tconst { chainId, itemsAddress } = curr;\n\t\t\tif (!acc[chainId]) {\n\t\t\t\tacc[chainId] = [];\n\t\t\t}\n\t\t\tacc[chainId].push(itemsAddress);\n\t\t\treturn acc;\n\t\t},\n\t\t{},\n\t);\n\n\t// Fetch collections for each chain\n\tconst promises = Object.entries(collectionsByChain).map(\n\t\t([chainId, addresses]) =>\n\t\t\tmetadataClient\n\t\t\t\t.getContractInfoBatch({\n\t\t\t\t\tchainID: chainId,\n\t\t\t\t\tcontractAddresses: addresses,\n\t\t\t\t})\n\t\t\t\t.then((resp) => Object.values(resp.contractInfoMap)),\n\t);\n\n\tconst settled = await Promise.allSettled(promises);\n\n\t// If all promises failed, throw the first error\n\tif (settled.every((result) => result.status === 'rejected')) {\n\t\tconst firstError = settled[0] as PromiseRejectedResult;\n\t\tthrow firstError.reason;\n\t}\n\n\tconst results = settled\n\t\t.filter(\n\t\t\t(r): r is PromiseFulfilledResult<ContractInfo[]> =>\n\t\t\t\tr.status === 'fulfilled',\n\t\t)\n\t\t.flatMap((r) => r.value);\n\n\tconst collectionsWithMetadata = collections\n\t\t.map((collection) => {\n\t\t\tconst metadata = results.find((result) =>\n\t\t\t\tcompareAddress(result.address, collection.itemsAddress),\n\t\t\t);\n\t\t\treturn { collection, metadata };\n\t\t})\n\t\t.filter(\n\t\t\t(\n\t\t\t\titem,\n\t\t\t): item is {\n\t\t\t\tcollection: MarketCollection | ShopCollection;\n\t\t\t\tmetadata: ContractInfo;\n\t\t\t} => item.metadata !== undefined,\n\t\t)\n\t\t.map(({ collection, metadata }) => ({\n\t\t\t...collection,\n\t\t\t...metadata,\n\t\t}));\n\n\treturn collectionsWithMetadata;\n}\n\nexport type ListCollectionsQueryOptions =\n\tValuesOptional<FetchListCollectionsParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listCollectionsQueryOptions(\n\tparams: ListCollectionsQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.marketplaceConfig &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectionKeys.list, params],\n\t\tqueryFn: enabled\n\t\t\t? () =>\n\t\t\t\t\tfetchListCollections({\n\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\t\tmarketplaceConfig: params.marketplaceConfig!,\n\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\t\tconfig: params.config!,\n\t\t\t\t\t\tcardType: params.cardType,\n\t\t\t\t\t})\n\t\t\t: skipToken,\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n\n// Keep old function for backward compatibility during migration\nexport const listCollectionsOptions = ({\n\tcardType,\n\tmarketplaceConfig,\n\tconfig,\n}: {\n\tcardType?: CardType;\n\tmarketplaceConfig: MarketplaceConfig | undefined;\n\tconfig: SdkConfig;\n}) => {\n\treturn queryOptions({\n\t\tqueryKey: [...collectionKeys.list, { cardType, marketplaceConfig, config }],\n\t\tqueryFn: marketplaceConfig\n\t\t\t? () =>\n\t\t\t\t\tfetchListCollections({\n\t\t\t\t\t\tmarketplaceConfig,\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\tcardType,\n\t\t\t\t\t})\n\t\t\t: skipToken,\n\t\tenabled: Boolean(marketplaceConfig),\n\t});\n};\n","import { queryOptions, skipToken } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport {\n\ttype Currency,\n\tcurrencyKeys,\n\tgetMarketplaceClient,\n\tgetQueryClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCurrencyParams {\n\tchainId: number;\n\tcurrencyAddress: Address;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches currency details from the marketplace API\n */\nexport async function fetchCurrency(\n\tparams: FetchCurrencyParams,\n): Promise<Currency | undefined> {\n\tconst { chainId, currencyAddress, config } = params;\n\tconst queryClient = getQueryClient();\n\n\tlet currencies = queryClient.getQueryData([...currencyKeys.lists, chainId]) as\n\t\t| Currency[]\n\t\t| undefined;\n\n\tif (!currencies) {\n\t\tconst marketplaceClient = getMarketplaceClient(config);\n\t\tcurrencies = await marketplaceClient\n\t\t\t.listCurrencies({ chainId: String(chainId) })\n\t\t\t.then((resp) => resp.currencies);\n\t}\n\n\tif (!currencies?.length) {\n\t\tthrow new Error('No currencies returned');\n\t}\n\tconst currency = currencies.find(\n\t\t(currency) =>\n\t\t\tcurrency.contractAddress.toLowerCase() === currencyAddress.toLowerCase(),\n\t);\n\n\tif (!currency) {\n\t\tthrow new Error('Currency not found');\n\t}\n\n\treturn currency;\n}\n\nexport type CurrencyQueryOptions = ValuesOptional<FetchCurrencyParams> & {\n\tquery?: StandardQueryOptions;\n};\n\nexport function currencyQueryOptions(params: CurrencyQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.currencyAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...currencyKeys.details, params],\n\t\tqueryFn:\n\t\t\tparams.chainId && params.currencyAddress\n\t\t\t\t? () =>\n\t\t\t\t\t\tfetchCurrency({\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\t\t\tchainId: params.chainId!,\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\t\t\tcurrencyAddress: params.currencyAddress!,\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\t\t\t\tconfig: params.config!,\n\t\t\t\t\t\t})\n\t\t\t\t: skipToken,\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport { type Address, zeroAddress } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport { compareAddress } from '../../utils';\nimport {\n\tcurrencyKeys,\n\tgetMarketplaceClient,\n\tgetQueryClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\nimport { marketplaceConfigOptions } from './marketplaceConfig';\n\nexport interface FetchMarketCurrenciesParams {\n\tchainId: number;\n\tincludeNativeCurrency?: boolean;\n\tcollectionAddress?: Address;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches supported currencies for a marketplace\n */\nexport async function fetchMarketCurrencies(\n\tparams: FetchMarketCurrenciesParams,\n) {\n\tconst { chainId, includeNativeCurrency, collectionAddress, config } = params;\n\tconst includeNativeCurrencyOption = includeNativeCurrency ?? true;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tlet currencies = await marketplaceClient\n\t\t.listCurrencies({\n\t\t\tchainId: String(chainId),\n\t\t})\n\t\t.then((resp) =>\n\t\t\tresp.currencies.map((currency) => ({\n\t\t\t\t...currency,\n\t\t\t\tcontractAddress: currency.contractAddress || zeroAddress,\n\t\t\t})),\n\t\t);\n\n\tif (collectionAddress) {\n\t\tconst queryClient = getQueryClient();\n\t\tconst marketplaceConfig = await queryClient.fetchQuery(\n\t\t\tmarketplaceConfigOptions(config),\n\t\t);\n\n\t\tconst currenciesOptions = marketplaceConfig.market.collections.find(\n\t\t\t(collection) =>\n\t\t\t\tcompareAddress(collection.itemsAddress, collectionAddress),\n\t\t)?.currencyOptions;\n\n\t\t// Filter currencies based on collection currency options\n\t\tif (currenciesOptions) {\n\t\t\tcurrencies = currencies.filter((currency) =>\n\t\t\t\tcurrenciesOptions.includes(currency.contractAddress),\n\t\t\t);\n\t\t}\n\t}\n\n\tif (!includeNativeCurrencyOption) {\n\t\tcurrencies = currencies.filter((currency) => !currency.nativeCurrency);\n\t}\n\n\treturn currencies;\n}\n\nexport type MarketCurrenciesQueryOptions =\n\tValuesOptional<FetchMarketCurrenciesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function marketCurrenciesQueryOptions(\n\tparams: MarketCurrenciesQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId && params.config && (params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...currencyKeys.lists, params],\n\t\tqueryFn: () =>\n\t\t\tfetchMarketCurrencies({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tincludeNativeCurrency: params.includeNativeCurrency,\n\t\t\t\tcollectionAddress: params.collectionAddress,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport { getMarketplaceClient, type ValuesOptional } from '../_internal';\nimport type {\n\tGetCountOfListingsForCollectibleArgs,\n\tOrderFilter,\n} from '../_internal/api/marketplace.gen';\nimport { collectableKeys } from '../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCountListingsForCollectibleParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n\tfilter?: OrderFilter;\n}\n\n/**\n * Fetches count of listings for a collectible from the marketplace API\n */\nexport async function fetchCountListingsForCollectible(\n\tparams: FetchCountListingsForCollectibleParams,\n) {\n\tconst { collectionAddress, chainId, collectibleId, config, filter } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCountOfListingsForCollectibleArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\tfilter,\n\t};\n\n\tconst result = await client.getCountOfListingsForCollectible(apiArgs);\n\treturn result.count;\n}\n\nexport type CountListingsForCollectibleQueryOptions =\n\tValuesOptional<FetchCountListingsForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function countListingsForCollectibleQueryOptions(\n\tparams: CountListingsForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.listingsCount, params],\n\t\tqueryFn: () =>\n\t\t\tfetchCountListingsForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport { getMarketplaceClient, type ValuesOptional } from '../_internal';\nimport type {\n\tGetCountOfOffersForCollectibleArgs,\n\tOrderFilter,\n} from '../_internal/api/marketplace.gen';\nimport { collectableKeys } from '../_internal/api/query-keys';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCountOffersForCollectibleParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n\tfilter?: OrderFilter;\n}\n\n/**\n * Fetches count of offers for a collectible from the marketplace API\n */\nexport async function fetchCountOffersForCollectible(\n\tparams: FetchCountOffersForCollectibleParams,\n) {\n\tconst { collectionAddress, chainId, collectibleId, config, filter } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCountOfOffersForCollectibleArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\tfilter,\n\t};\n\n\tconst result = await client.getCountOfOffersForCollectible(apiArgs);\n\treturn result.count;\n}\n\nexport type CountOffersForCollectibleQueryOptions =\n\tValuesOptional<FetchCountOffersForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function countOffersForCollectibleQueryOptions(\n\tparams: CountOffersForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.offersCount, params],\n\t\tqueryFn: () =>\n\t\t\tfetchCountOffersForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tcollectableKeys,\n\ttype GetFloorOrderArgs,\n\tgetMarketplaceClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchFloorOrderParams\n\textends Omit<GetFloorOrderArgs, 'contractAddress' | 'chainId'> {\n\tcollectionAddress: string;\n\tchainId: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches the floor order for a collection from the marketplace API\n */\nexport async function fetchFloorOrder(params: FetchFloorOrderParams) {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: GetFloorOrderArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\t...additionalApiParams,\n\t};\n\n\tconst result = await marketplaceClient.getFloorOrder(apiArgs);\n\treturn result.collectible;\n}\n\nexport type FloorOrderQueryOptions = ValuesOptional<FetchFloorOrderParams> & {\n\tquery?: StandardQueryOptions;\n};\n\nexport function floorOrderQueryOptions(params: FloorOrderQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.floorOrders, params],\n\t\tqueryFn: () =>\n\t\t\tfetchFloorOrder({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\t...((params.filter && { filter: params.filter }) || {}),\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tcollectableKeys,\n\ttype GetCollectibleHighestOfferArgs,\n\tgetMarketplaceClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchHighestOfferParams\n\textends Omit<GetCollectibleHighestOfferArgs, 'contractAddress' | 'chainId'> {\n\tcollectionAddress: string;\n\tchainId: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches the highest offer for a collectible from the marketplace API\n */\nexport async function fetchHighestOffer(params: FetchHighestOfferParams) {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCollectibleHighestOfferArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\t...additionalApiParams,\n\t};\n\n\tconst result = await marketplaceClient.getCollectibleHighestOffer(apiArgs);\n\treturn result.order ?? null;\n}\n\nexport type HighestOfferQueryOptions =\n\tValuesOptional<FetchHighestOfferParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function highestOfferQueryOptions(params: HighestOfferQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.tokenId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.highestOffers, params],\n\t\tqueryFn: () =>\n\t\t\tfetchHighestOffer({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\ttokenId: params.tokenId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport type {\n\tListCollectibleListingsArgs,\n\tListCollectibleListingsReturn,\n\tValuesOptional,\n} from '../_internal';\nimport { collectableKeys, getMarketplaceClient } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchListListingsForCollectibleParams\n\textends Omit<\n\t\tListCollectibleListingsArgs,\n\t\t'chainId' | 'contractAddress' | 'tokenId'\n\t> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches listings for a specific collectible from the Marketplace API\n */\nexport async function fetchListListingsForCollectible(\n\tparams: FetchListListingsForCollectibleParams,\n): Promise<ListCollectibleListingsReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tcollectibleId,\n\t\tconfig,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: ListCollectibleListingsArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listCollectibleListings(apiArgs);\n}\n\nexport type ListListingsForCollectibleQueryOptions =\n\tValuesOptional<FetchListListingsForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listListingsForCollectibleQueryOptions(\n\tparams: ListListingsForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.listings, params],\n\t\tqueryFn: () =>\n\t\t\tfetchListListingsForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tpage: params.page,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport type {\n\tListCollectibleOffersReturn,\n\tListOffersForCollectibleArgs,\n\tPage,\n\tSortBy,\n\tValuesOptional,\n} from '../_internal';\nimport { collectableKeys, getMarketplaceClient } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchListOffersForCollectibleParams\n\textends Omit<\n\t\tListOffersForCollectibleArgs,\n\t\t'chainId' | 'contractAddress' | 'tokenId'\n\t> {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tcollectibleId: string;\n\tconfig: SdkConfig;\n\tsort?: Array<SortBy>;\n}\n\n/**\n * Fetches offers for a specific collectible from the Marketplace API\n */\nexport async function fetchListOffersForCollectible(\n\tparams: FetchListOffersForCollectibleParams,\n): Promise<ListCollectibleOffersReturn> {\n\tconst {\n\t\tcollectionAddress,\n\t\tchainId,\n\t\tcollectibleId,\n\t\tconfig,\n\t\tsort,\n\t\tpage,\n\t\t...additionalApiParams\n\t} = params;\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst finalSort = sort || (page && 'sort' in page ? page.sort : undefined);\n\n\tlet finalPage: Page | undefined;\n\tif (page || finalSort) {\n\t\tfinalPage = {\n\t\t\tpage: page?.page ?? 1,\n\t\t\tpageSize: page?.pageSize ?? 20,\n\t\t\t...(page?.more && { more: page.more }),\n\t\t\t...(finalSort && { sort: finalSort }),\n\t\t} as Page;\n\t}\n\n\tconst apiArgs: ListOffersForCollectibleArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\ttokenId: collectibleId,\n\t\tpage: finalPage,\n\t\t...additionalApiParams,\n\t};\n\n\treturn await marketplaceClient.listCollectibleOffers(apiArgs);\n}\n\nexport type ListOffersForCollectibleQueryOptions =\n\tValuesOptional<FetchListOffersForCollectibleParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listOffersForCollectibleQueryOptions(\n\tparams: ListOffersForCollectibleQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.collectibleId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.offers, params],\n\t\tqueryFn: () =>\n\t\t\tfetchListOffersForCollectible({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectibleId: params.collectibleId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tpage: params.page,\n\t\t\t\tsort: params.sort,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tcollectableKeys,\n\ttype GetCollectibleLowestListingArgs,\n\ttype GetCollectibleLowestListingReturn,\n\tgetMarketplaceClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchLowestListingParams\n\textends Omit<GetCollectibleLowestListingArgs, 'contractAddress' | 'chainId'> {\n\tcollectionAddress: string;\n\tchainId: number;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches the lowest listing for a collectible from the marketplace API\n */\nexport async function fetchLowestListing(\n\tparams: FetchLowestListingParams,\n): Promise<GetCollectibleLowestListingReturn['order'] | null> {\n\tconst { collectionAddress, chainId, config, ...additionalApiParams } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst apiArgs: GetCollectibleLowestListingArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\tchainId: String(chainId),\n\t\t...additionalApiParams,\n\t};\n\n\tconst result = await marketplaceClient.getCollectibleLowestListing(apiArgs);\n\treturn result.order || null;\n}\n\nexport type LowestListingQueryOptions =\n\tValuesOptional<FetchLowestListingParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function lowestListingQueryOptions(params: LowestListingQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.collectionAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.tokenId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.lowestListings, params],\n\t\tqueryFn: () =>\n\t\t\tfetchLowestListing({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\ttokenId: params.tokenId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport type { MarketplaceKind } from '../_internal';\nimport { getMarketplaceClient, type ValuesOptional } from '../_internal';\nimport type {\n\tCheckoutOptionsMarketplaceArgs,\n\tCheckoutOptionsMarketplaceReturn,\n} from '../_internal/api/marketplace.gen';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCheckoutOptionsParams\n\textends Omit<\n\t\tCheckoutOptionsMarketplaceArgs,\n\t\t'chainId' | 'wallet' | 'orders'\n\t> {\n\tchainId: number;\n\twalletAddress: Address;\n\torders: Array<{\n\t\tcollectionAddress: string;\n\t\torderId: string;\n\t\tmarketplace: MarketplaceKind;\n\t}>;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches checkout options from the Marketplace API\n */\nexport async function fetchCheckoutOptions(\n\tparams: FetchCheckoutOptionsParams,\n): Promise<CheckoutOptionsMarketplaceReturn> {\n\tconst { chainId, walletAddress, orders, config, additionalFee } = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: CheckoutOptionsMarketplaceArgs = {\n\t\tchainId: String(chainId),\n\t\twallet: walletAddress,\n\t\torders: orders.map((order) => ({\n\t\t\tcontractAddress: order.collectionAddress,\n\t\t\torderId: order.orderId,\n\t\t\tmarketplace: order.marketplace,\n\t\t})),\n\t\tadditionalFee: additionalFee ?? 0,\n\t};\n\n\tconst result = await client.checkoutOptionsMarketplace(apiArgs);\n\treturn result;\n}\n\nexport type CheckoutOptionsQueryOptions =\n\tValuesOptional<FetchCheckoutOptionsParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function checkoutOptionsQueryOptions(\n\tparams: CheckoutOptionsQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.walletAddress &&\n\t\t\tparams.orders?.length &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['checkout', 'options', params],\n\t\tqueryFn: () =>\n\t\t\tfetchCheckoutOptions({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\twalletAddress: params.walletAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\torders: params.orders!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tadditionalFee: params.additionalFee ?? 0,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport { getMarketplaceClient, type ValuesOptional } from '../_internal';\nimport type {\n\tCheckoutOptionsItem,\n\tCheckoutOptionsSalesContractArgs,\n\tCheckoutOptionsSalesContractReturn,\n} from '../_internal/api/marketplace.gen';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchCheckoutOptionsSalesContractParams\n\textends Omit<CheckoutOptionsSalesContractArgs, 'chainId' | 'wallet'> {\n\tchainId: number;\n\twalletAddress: Address;\n\tcontractAddress: string;\n\tcollectionAddress: string;\n\titems: Array<CheckoutOptionsItem>;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches checkout options for sales contract from the Marketplace API\n */\nexport async function fetchCheckoutOptionsSalesContract(\n\tparams: FetchCheckoutOptionsSalesContractParams,\n): Promise<CheckoutOptionsSalesContractReturn> {\n\tconst {\n\t\tchainId,\n\t\twalletAddress,\n\t\tcontractAddress,\n\t\tcollectionAddress,\n\t\titems,\n\t\tconfig,\n\t} = params;\n\n\tconst client = getMarketplaceClient(config);\n\n\tconst apiArgs: CheckoutOptionsSalesContractArgs = {\n\t\tchainId: String(chainId),\n\t\twallet: walletAddress,\n\t\tcontractAddress,\n\t\tcollectionAddress,\n\t\titems,\n\t};\n\n\tconst result = await client.checkoutOptionsSalesContract(apiArgs);\n\treturn result;\n}\n\nexport type CheckoutOptionsSalesContractQueryOptions =\n\tValuesOptional<FetchCheckoutOptionsSalesContractParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function checkoutOptionsSalesContractQueryOptions(\n\tparams: CheckoutOptionsSalesContractQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.walletAddress &&\n\t\t\tparams.contractAddress &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.items?.length &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['checkout', 'options', 'salesContract', params],\n\t\tqueryFn: () =>\n\t\t\tfetchCheckoutOptionsSalesContract({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\twalletAddress: params.walletAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcontractAddress: params.contractAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\titems: params.items!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport { type Address, formatUnits } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport {\n\ttype Currency,\n\tgetQueryClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\nimport { marketCurrenciesQueryOptions } from './marketCurrencies';\n\nexport interface FetchConvertPriceToUSDParams {\n\tchainId: number;\n\tcurrencyAddress: Address;\n\tamountRaw: string;\n\tconfig: SdkConfig;\n}\n\nexport interface ConvertPriceToUSDReturn {\n\tusdAmount: number;\n\tusdAmountFormatted: string;\n}\n\n/**\n * Converts a price amount from a specific currency to USD using exchange rates\n */\nexport async function fetchConvertPriceToUSD(\n\tparams: FetchConvertPriceToUSDParams,\n): Promise<ConvertPriceToUSDReturn> {\n\tconst { chainId, currencyAddress, amountRaw, config } = params;\n\n\tconst queryClient = getQueryClient();\n\tconst currencies = (await queryClient.fetchQuery(\n\t\tmarketCurrenciesQueryOptions({\n\t\t\tchainId,\n\t\t\tconfig,\n\t\t}),\n\t)) as Currency[];\n\n\tconst currencyDetails = currencies.find(\n\t\t(c: Currency) =>\n\t\t\tc.contractAddress.toLowerCase() === currencyAddress.toLowerCase(),\n\t);\n\n\tif (!currencyDetails) {\n\t\tthrow new Error('Currency not found');\n\t}\n\n\tconst amountDecimal = Number(\n\t\tformatUnits(BigInt(amountRaw), currencyDetails.decimals),\n\t);\n\tconst usdAmount = amountDecimal * currencyDetails.exchangeRate;\n\n\treturn {\n\t\tusdAmount,\n\t\tusdAmountFormatted: usdAmount.toFixed(2),\n\t};\n}\n\nexport type ConvertPriceToUSDQueryOptions =\n\tValuesOptional<FetchConvertPriceToUSDParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function convertPriceToUSDQueryOptions(\n\tparams: ConvertPriceToUSDQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.currencyAddress &&\n\t\t\tparams.amountRaw &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['currency', 'convertPriceToUSD', params],\n\t\tqueryFn: () =>\n\t\t\tfetchConvertPriceToUSD({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcurrencyAddress: params.currencyAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tamountRaw: params.amountRaw!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport type { ValuesOptional } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\nimport { fetchConvertPriceToUSD } from './convertPriceToUSD';\n\nexport interface FetchComparePricesParams {\n\tchainId: number;\n\t// First price details\n\tpriceAmountRaw: string;\n\tpriceCurrencyAddress: Address;\n\t// Second price details (to compare against)\n\tcompareToPriceAmountRaw: string;\n\tcompareToPriceCurrencyAddress: Address;\n\tconfig: SdkConfig;\n}\n\nexport type ComparePricesReturn = {\n\tpercentageDifference: number;\n\tpercentageDifferenceFormatted: string;\n\tstatus: 'above' | 'same' | 'below';\n};\n\n/**\n * Compares prices between different currencies by converting both to USD\n */\nexport async function fetchComparePrices(\n\tparams: FetchComparePricesParams,\n): Promise<ComparePricesReturn> {\n\tconst {\n\t\tchainId,\n\t\tpriceAmountRaw,\n\t\tpriceCurrencyAddress,\n\t\tcompareToPriceAmountRaw,\n\t\tcompareToPriceCurrencyAddress,\n\t\tconfig,\n\t} = params;\n\n\tconst [priceUSD, compareToPriceUSD] = await Promise.all([\n\t\tfetchConvertPriceToUSD({\n\t\t\tchainId,\n\t\t\tcurrencyAddress: priceCurrencyAddress,\n\t\t\tamountRaw: priceAmountRaw,\n\t\t\tconfig,\n\t\t}),\n\t\tfetchConvertPriceToUSD({\n\t\t\tchainId,\n\t\t\tcurrencyAddress: compareToPriceCurrencyAddress,\n\t\t\tamountRaw: compareToPriceAmountRaw,\n\t\t\tconfig,\n\t\t}),\n\t]);\n\n\tconst difference = priceUSD.usdAmount - compareToPriceUSD.usdAmount;\n\n\tif (compareToPriceUSD.usdAmount === 0) {\n\t\tthrow new Error('Cannot compare to zero price');\n\t}\n\n\tconst percentageDifference = (difference / compareToPriceUSD.usdAmount) * 100;\n\tconst isAbove = percentageDifference > 0;\n\tconst isSame = percentageDifference === 0;\n\n\treturn {\n\t\tpercentageDifference,\n\t\tpercentageDifferenceFormatted: Math.abs(percentageDifference).toFixed(2),\n\t\tstatus: isAbove ? 'above' : isSame ? 'same' : 'below',\n\t};\n}\n\nexport type ComparePricesQueryOptions =\n\tValuesOptional<FetchComparePricesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function comparePricesQueryOptions(params: ComparePricesQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.priceAmountRaw &&\n\t\t\tparams.priceCurrencyAddress &&\n\t\t\tparams.compareToPriceAmountRaw &&\n\t\t\tparams.compareToPriceCurrencyAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['currency', 'conversion', 'compare', params],\n\t\tqueryFn: () =>\n\t\t\tfetchComparePrices({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tpriceAmountRaw: params.priceAmountRaw!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tpriceCurrencyAddress: params.priceCurrencyAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcompareToPriceAmountRaw: params.compareToPriceAmountRaw!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcompareToPriceCurrencyAddress: params.compareToPriceCurrencyAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport {\n\ttype GetCountOfPrimarySaleItemsArgs,\n\tgetMarketplaceClient,\n\ttype PrimarySaleItemsFilter,\n} from '../_internal';\n\nexport interface UseCountOfPrimarySaleItemsArgs\n\textends Omit<\n\t\tGetCountOfPrimarySaleItemsArgs,\n\t\t'chainId' | 'primarySaleContractAddress'\n\t> {\n\tchainId: number;\n\tprimarySaleContractAddress: Address;\n\tfilter?: PrimarySaleItemsFilter;\n\tquery?: {\n\t\tenabled?: boolean;\n\t};\n}\n\nexport async function fetchCountOfPrimarySaleItems(\n\targs: UseCountOfPrimarySaleItemsArgs,\n\tconfig: SdkConfig,\n) {\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\tconst { chainId, primarySaleContractAddress, filter } = args;\n\tconst data = await marketplaceClient.getCountOfPrimarySaleItems({\n\t\tchainId: String(chainId),\n\t\tprimarySaleContractAddress,\n\t\tfilter,\n\t});\n\n\treturn data.count;\n}\n\nexport function countOfPrimarySaleItemsOptions(\n\targs: UseCountOfPrimarySaleItemsArgs,\n\tconfig: SdkConfig,\n) {\n\treturn queryOptions({\n\t\tenabled: args.query?.enabled ?? true,\n\t\tqueryKey: ['countOfPrimarySaleItems', args],\n\t\tqueryFn: () => fetchCountOfPrimarySaleItems(args, config),\n\t});\n}\n","import type { PropertyFilter } from '@0xsequence/metadata';\nimport { queryOptions } from '@tanstack/react-query';\nimport { FilterCondition, type SdkConfig } from '../../types';\nimport { compareAddress } from '../../utils';\nimport {\n\tgetMetadataClient,\n\tgetQueryClient,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\nimport { marketplaceConfigOptions } from './marketplaceConfig';\n\nexport interface FetchFiltersParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tshowAllFilters?: boolean;\n\texcludePropertyValues?: boolean;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches collection filters from the Metadata API with optional marketplace filtering\n */\nexport async function fetchFilters(\n\tparams: FetchFiltersParams,\n): Promise<PropertyFilter[]> {\n\tconst {\n\t\tchainId,\n\t\tcollectionAddress,\n\t\tshowAllFilters,\n\t\texcludePropertyValues,\n\t\tconfig,\n\t} = params;\n\n\tconst metadataClient = getMetadataClient(config);\n\n\tconst filters = await metadataClient\n\t\t.getTokenMetadataPropertyFilters({\n\t\t\tchainID: chainId.toString(),\n\t\t\tcontractAddress: collectionAddress,\n\t\t\texcludeProperties: [],\n\t\t\texcludePropertyValues,\n\t\t})\n\t\t.then((resp) => resp.filters);\n\n\tif (showAllFilters) return filters;\n\n\tconst queryClient = getQueryClient();\n\tconst marketplaceConfig = await queryClient.fetchQuery(\n\t\tmarketplaceConfigOptions(config),\n\t);\n\tconst collectionFilters = marketplaceConfig.market.collections.find((c) =>\n\t\tcompareAddress(c.itemsAddress, collectionAddress),\n\t)?.filterSettings;\n\n\tconst filterOrder = collectionFilters?.filterOrder;\n\tconst exclusions = collectionFilters?.exclusions;\n\tlet sortedFilters = filters;\n\n\tif (filterOrder) {\n\t\tsortedFilters = filters.toSorted((a, b) => {\n\t\t\tconst aIndex =\n\t\t\t\tfilterOrder.indexOf(a.name) > -1\n\t\t\t\t\t? filterOrder.indexOf(a.name)\n\t\t\t\t\t: filterOrder.length;\n\t\t\tconst bIndex =\n\t\t\t\tfilterOrder.indexOf(b.name) > -1\n\t\t\t\t\t? filterOrder.indexOf(b.name)\n\t\t\t\t\t: filterOrder.length;\n\t\t\treturn aIndex - bIndex;\n\t\t});\n\t}\n\n\tif (exclusions) {\n\t\tsortedFilters = sortedFilters.reduce<PropertyFilter[]>((acc, filter) => {\n\t\t\tconst exclusionRule = exclusions.find((rule) => rule.key === filter.name);\n\n\t\t\tif (!exclusionRule) {\n\t\t\t\tacc.push(filter);\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\tif (exclusionRule.condition === FilterCondition.ENTIRE_KEY) {\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\texclusionRule.condition === FilterCondition.SPECIFIC_VALUE &&\n\t\t\t\texclusionRule.value\n\t\t\t) {\n\t\t\t\tconst filteredValues =\n\t\t\t\t\tfilter.values?.filter((value) => value !== exclusionRule.value) || [];\n\t\t\t\tif (filteredValues.length > 0) {\n\t\t\t\t\tacc.push({ ...filter, values: filteredValues });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn acc;\n\t\t}, []);\n\t}\n\n\treturn sortedFilters;\n}\n\nexport type FiltersQueryOptions = ValuesOptional<FetchFiltersParams> & {\n\tquery?: StandardQueryOptions;\n};\n\nexport function filtersQueryOptions(params: FiltersQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['filters', params],\n\t\tqueryFn: () =>\n\t\t\tfetchFilters({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\tshowAllFilters: params.showAllFilters,\n\t\t\t\texcludePropertyValues: params.excludePropertyValues,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import type { GetTokenIDRangesReturn } from '@0xsequence/indexer';\nimport { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport { getIndexerClient, type ValuesOptional } from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchGetTokenRangesParams {\n\tchainId: number;\n\tcollectionAddress: Address;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches token ID ranges for a collection from the Indexer API\n */\nexport async function fetchGetTokenRanges(\n\tparams: FetchGetTokenRangesParams,\n): Promise<GetTokenIDRangesReturn> {\n\tconst { chainId, collectionAddress, config } = params;\n\n\tconst indexerClient = getIndexerClient(chainId, config);\n\n\tconst response = await indexerClient.getTokenIDRanges({\n\t\tcontractAddress: collectionAddress,\n\t});\n\n\tif (!response) {\n\t\tthrow new Error('Failed to fetch token ranges');\n\t}\n\n\treturn response;\n}\n\nexport type GetTokenRangesQueryOptions =\n\tValuesOptional<FetchGetTokenRangesParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function getTokenRangesQueryOptions(params: GetTokenRangesQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['indexer', 'tokenRanges', params],\n\t\tqueryFn: () =>\n\t\t\tfetchGetTokenRanges({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { queryOptions, skipToken } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { UseQueryParameters } from 'wagmi/query';\nimport type { SdkConfig } from '../../types';\nimport { collectableKeys, getIndexerClient, LaosAPI } from '../_internal';\n\nexport type UseTokenBalancesArgs = {\n\tcollectionAddress: Address;\n\tuserAddress: Address | undefined;\n\tchainId: number;\n\tisLaos721?: boolean;\n\tincludeMetadata?: boolean;\n\tquery?: UseQueryParameters;\n};\n\n/**\n * Fetches the token balances for a user\n *\n * @param args - Arguments for the API call\n * @param config - SDK configuration\n * @returns The balance data\n */\nexport async function fetchTokenBalances(\n\targs: Omit<UseTokenBalancesArgs, 'userAddress'> & {\n\t\tuserAddress: Address;\n\t},\n\tconfig: SdkConfig,\n) {\n\tif (args.isLaos721) {\n\t\tconst laosApi = new LaosAPI();\n\t\tconst response = await laosApi.getTokenBalances({\n\t\t\tchainId: args.chainId.toString(),\n\t\t\tcontractAddress: args.collectionAddress,\n\t\t\taccountAddress: args.userAddress,\n\t\t\tincludeMetadata: true,\n\t\t});\n\n\t\treturn response.balances || [];\n\t}\n\n\tconst indexerClient = getIndexerClient(args.chainId, config);\n\treturn indexerClient\n\t\t.getTokenBalances({\n\t\t\taccountAddress: args.userAddress,\n\t\t\tcontractAddress: args.collectionAddress,\n\t\t\tincludeMetadata: args.includeMetadata ?? false,\n\t\t\tmetadataOptions: {\n\t\t\t\tverifiedOnly: true,\n\t\t\t\tincludeContracts: [args.collectionAddress],\n\t\t\t},\n\t\t})\n\t\t.then((res) => res.balances || []);\n}\n\n/**\n * Creates a tanstack query options object for the token balances query\n *\n * @param args - The query arguments\n * @param config - SDK configuration\n * @returns Query options configuration\n */\nexport function tokenBalancesOptions(\n\targs: UseTokenBalancesArgs,\n\tconfig: SdkConfig,\n) {\n\tconst enabled =\n\t\t!!args.userAddress &&\n\t\t!!args.collectionAddress &&\n\t\t(args.query?.enabled ?? true);\n\n\treturn queryOptions({\n\t\tqueryKey: [...collectableKeys.userBalances, args],\n\t\tqueryFn: enabled\n\t\t\t? () =>\n\t\t\t\t\tfetchTokenBalances(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...args,\n\t\t\t\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: this is guaranteed by the userAddress check above\n\t\t\t\t\t\t\tuserAddress: args.userAddress!,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t)\n\t\t\t: skipToken,\n\t});\n}\n","import type { ContractInfo, TokenBalance } from '@0xsequence/indexer';\nimport { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { Page, SdkConfig } from '../../types';\nimport { compareAddress } from '../../utils';\nimport {\n\ttype ContractType,\n\tgetQueryClient,\n\tMetadataStatus,\n} from '../_internal';\nimport { fetchMarketplaceConfig } from './marketplaceConfig';\nimport { tokenBalancesOptions } from './tokenBalances';\n\nexport interface UseInventoryArgs {\n\taccountAddress: Address;\n\tcollectionAddress: Address;\n\tchainId: number;\n\tisLaos721?: boolean;\n\tincludeNonTradable?: boolean;\n\tquery?: {\n\t\tenabled?: boolean;\n\t\tpage?: number;\n\t\tpageSize?: number;\n\t};\n}\n\ninterface GetInventoryArgs extends Omit<UseInventoryArgs, 'query'> {\n\tisLaos721: boolean;\n}\n\ninterface CollectibleWithBalance {\n\tmetadata: {\n\t\ttokenId: string;\n\t\tattributes: Array<any>;\n\t\timage?: string;\n\t\tname: string;\n\t\tdescription?: string;\n\t\tvideo?: string;\n\t\taudio?: string;\n\t\tstatus: MetadataStatus;\n\t};\n\tbalance: string;\n\tcontractInfo?: ContractInfo;\n\tcontractType: ContractType.ERC1155 | ContractType.ERC721;\n}\n\nexport interface CollectiblesResponse {\n\tcollectibles: CollectibleWithBalance[];\n\tpage: Page;\n\tisTradable: boolean;\n}\n\nfunction collectibleFromTokenBalance(\n\ttoken: TokenBalance,\n): CollectibleWithBalance {\n\treturn {\n\t\tmetadata: {\n\t\t\ttokenId: token.tokenID ?? '',\n\t\t\tattributes: token.tokenMetadata?.attributes ?? [],\n\t\t\timage: token.tokenMetadata?.image,\n\t\t\tname: token.tokenMetadata?.name ?? '',\n\t\t\tdescription: token.tokenMetadata?.description,\n\t\t\tvideo: token.tokenMetadata?.video,\n\t\t\taudio: token.tokenMetadata?.audio,\n\t\t\tstatus: MetadataStatus.AVAILABLE,\n\t\t},\n\t\tcontractInfo: token.contractInfo,\n\t\tcontractType: token.contractType as unknown as\n\t\t\t| ContractType.ERC1155\n\t\t\t| ContractType.ERC721,\n\t\tbalance: token.balance,\n\t};\n}\n\nasync function fetchIndexerTokens(\n\tchainId: number,\n\taccountAddress: Address,\n\tcollectionAddress: Address,\n\tconfig: SdkConfig,\n\tisLaos721: boolean,\n): Promise<{ collectibles: CollectibleWithBalance[] }> {\n\tconst queryClient = getQueryClient();\n\tconst balances = await queryClient.fetchQuery(\n\t\ttokenBalancesOptions(\n\t\t\t{\n\t\t\t\tcollectionAddress,\n\t\t\t\tuserAddress: accountAddress,\n\t\t\t\tchainId,\n\t\t\t\tisLaos721,\n\t\t\t\tincludeMetadata: true,\n\t\t\t},\n\t\t\tconfig,\n\t\t),\n\t);\n\n\tconst collectibles = balances.map((balance) =>\n\t\tcollectibleFromTokenBalance(balance),\n\t);\n\n\treturn {\n\t\tcollectibles,\n\t};\n}\n\nexport async function fetchInventory(\n\targs: GetInventoryArgs,\n\tconfig: SdkConfig,\n\tpage: Page,\n): Promise<CollectiblesResponse> {\n\tconst { accountAddress, collectionAddress, chainId, isLaos721 } = args;\n\tconst marketplaceConfig = await fetchMarketplaceConfig({ config });\n\n\tconst marketCollections = marketplaceConfig?.market.collections || [];\n\n\tconst isMarketCollection = marketCollections.some((collection) =>\n\t\tcompareAddress(collection.itemsAddress, collectionAddress),\n\t);\n\n\t// Determine if this collection is tradable (market collection vs shop collection)\n\tconst isTradable = isMarketCollection;\n\n\t// Fetch collectibles from indexer\n\tconst { collectibles } = await fetchIndexerTokens(\n\t\tchainId,\n\t\taccountAddress,\n\t\tcollectionAddress,\n\t\tconfig,\n\t\tisLaos721,\n\t);\n\n\treturn {\n\t\tcollectibles,\n\t\tpage: {\n\t\t\tpage: page.page,\n\t\t\tpageSize: page.pageSize,\n\t\t},\n\t\tisTradable,\n\t};\n}\n\nexport function inventoryOptions(args: UseInventoryArgs, config: SdkConfig) {\n\tconst enabledQuery = args.query?.enabled ?? true;\n\tconst enabled =\n\t\tenabledQuery && !!args.accountAddress && !!args.collectionAddress;\n\n\treturn queryOptions({\n\t\tqueryKey: [\n\t\t\t'inventory',\n\t\t\targs.accountAddress,\n\t\t\targs.collectionAddress,\n\t\t\targs.chainId,\n\t\t\targs.query?.page ?? 1,\n\t\t\targs.query?.pageSize ?? 30,\n\t\t],\n\t\tqueryFn: () =>\n\t\t\tfetchInventory(\n\t\t\t\t{\n\t\t\t\t\t...args,\n\t\t\t\t\tisLaos721: args.isLaos721 ?? false,\n\t\t\t\t},\n\t\t\t\tconfig,\n\t\t\t\t{\n\t\t\t\t\tpage: args.query?.page ?? 1,\n\t\t\t\t\tpageSize: args.query?.pageSize ?? 30,\n\t\t\t\t},\n\t\t\t),\n\t\tenabled,\n\t});\n}\n","import { queryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tgetMetadataClient,\n\ttokenKeys,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchListTokenMetadataParams {\n\tchainId: number;\n\tcontractAddress: string;\n\ttokenIds: string[];\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches token metadata from the metadata API\n */\nexport async function fetchListTokenMetadata(\n\tparams: FetchListTokenMetadataParams,\n) {\n\tconst { chainId, contractAddress, tokenIds, config } = params;\n\tconst metadataClient = getMetadataClient(config);\n\n\tconst response = await metadataClient.getTokenMetadata({\n\t\tchainID: chainId.toString(),\n\t\tcontractAddress: contractAddress,\n\t\ttokenIDs: tokenIds,\n\t});\n\n\treturn response.tokenMetadata;\n}\n\nexport type ListTokenMetadataQueryOptions =\n\tValuesOptional<FetchListTokenMetadataParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function listTokenMetadataQueryOptions(\n\tparams: ListTokenMetadataQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.contractAddress &&\n\t\t\tparams.tokenIds?.length &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: [...tokenKeys.metadata, params],\n\t\tqueryFn: () =>\n\t\t\tfetchListTokenMetadata({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcontractAddress: params.contractAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\ttokenIds: params.tokenIds!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t}),\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import { infiniteQueryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport {\n\tgetMarketplaceClient,\n\ttype ListPrimarySaleItemsArgs,\n\ttype ListPrimarySaleItemsReturn,\n\ttype Page,\n\ttype PrimarySaleItemsFilter,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchPrimarySaleItemsParams {\n\tchainId: number;\n\tprimarySaleContractAddress: Address;\n\tfilter?: PrimarySaleItemsFilter;\n\tpage?: Page;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches primary sale items from the marketplace API\n */\nexport async function fetchPrimarySaleItems(\n\tparams: FetchPrimarySaleItemsParams,\n): Promise<ListPrimarySaleItemsReturn> {\n\tconst { chainId, primarySaleContractAddress, filter, page, config } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\n\treturn marketplaceClient.listPrimarySaleItems({\n\t\tchainId: String(chainId),\n\t\tprimarySaleContractAddress,\n\t\tfilter,\n\t\tpage,\n\t});\n}\n\nexport type ListPrimarySaleItemsQueryOptions =\n\tValuesOptional<FetchPrimarySaleItemsParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport const listPrimarySaleItemsQueryOptions = (\n\tparams: ListPrimarySaleItemsQueryOptions,\n) => {\n\tconst enabled = Boolean(\n\t\tparams.primarySaleContractAddress &&\n\t\t\tparams.chainId &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\ttype PageParam = { page: number; pageSize: number };\n\tconst initialPage: PageParam = params.page || { page: 1, pageSize: 30 };\n\n\treturn infiniteQueryOptions({\n\t\tqueryKey: ['listPrimarySaleItems', params],\n\t\tqueryFn: async ({ pageParam }) => {\n\t\t\treturn fetchPrimarySaleItems({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tprimarySaleContractAddress: params.primarySaleContractAddress!,\n\t\t\t\tfilter: params.filter,\n\t\t\t\tpage: pageParam,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t});\n\t\t},\n\t\tinitialPageParam: initialPage,\n\t\tgetNextPageParam: (lastPage) =>\n\t\t\tlastPage.page?.more ? lastPage.page : undefined,\n\t\t...params.query,\n\t\tenabled,\n\t});\n};\n\nexport type { ListPrimarySaleItemsArgs, ListPrimarySaleItemsReturn };\n","import { queryOptions } from '@tanstack/react-query';\nimport type { Address } from 'viem';\nimport type { SdkConfig } from '../../types';\nimport {\n\ttype GetCountOfPrimarySaleItemsReturn,\n\tgetMarketplaceClient,\n\ttype PrimarySaleItemsFilter,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchPrimarySaleItemsCountParams {\n\tchainId: number;\n\tprimarySaleContractAddress: Address;\n\tfilter?: PrimarySaleItemsFilter;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches the count of primary sale items from the marketplace API\n */\nexport async function fetchPrimarySaleItemsCount(\n\tparams: FetchPrimarySaleItemsCountParams,\n): Promise<GetCountOfPrimarySaleItemsReturn> {\n\tconst { chainId, primarySaleContractAddress, filter, config } = params;\n\n\tconst marketplaceClient = getMarketplaceClient(config);\n\treturn marketplaceClient.getCountOfPrimarySaleItems({\n\t\tchainId: String(chainId),\n\t\tprimarySaleContractAddress,\n\t\tfilter,\n\t});\n}\n\nexport type PrimarySaleItemsCountQueryOptions =\n\tPartial<FetchPrimarySaleItemsCountParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport const primarySaleItemsCountQueryOptions = (\n\targs: PrimarySaleItemsCountQueryOptions,\n) => {\n\tconst enabled = Boolean(\n\t\targs.primarySaleContractAddress &&\n\t\t\targs.chainId &&\n\t\t\targs.config &&\n\t\t\t(args.query?.enabled ?? true),\n\t);\n\n\treturn queryOptions({\n\t\tqueryKey: ['primarySaleItemsCount', args],\n\t\tqueryFn: () =>\n\t\t\tfetchPrimarySaleItemsCount({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: args.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tprimarySaleContractAddress: args.primarySaleContractAddress!,\n\t\t\t\tfilter: args.filter,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: args.config!,\n\t\t\t}),\n\t\t...args.query,\n\t\tenabled,\n\t});\n};\n","import type {\n\tFilter,\n\tPage,\n\tSearchTokenMetadataReturn,\n} from '@0xsequence/metadata';\nimport { infiniteQueryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tgetMetadataClient,\n\ttokenKeys,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardQueryOptions } from '../types/query';\n\nexport interface FetchSearchTokenMetadataParams {\n\tchainId: number;\n\tcollectionAddress: string;\n\tfilter?: Filter;\n\tpage?: Page;\n\tconfig: SdkConfig;\n}\n\n/**\n * Fetches token metadata from the metadata API using search filters\n */\nexport async function fetchSearchTokenMetadata(\n\tparams: FetchSearchTokenMetadataParams,\n): Promise<SearchTokenMetadataReturn> {\n\tconst { chainId, collectionAddress, filter, page, config } = params;\n\tconst metadataClient = getMetadataClient(config);\n\n\tconst response = await metadataClient.searchTokenMetadata({\n\t\tchainID: chainId.toString(),\n\t\tcontractAddress: collectionAddress,\n\t\tfilter: filter ?? {},\n\t\tpage,\n\t});\n\n\treturn {\n\t\ttokenMetadata: response.tokenMetadata,\n\t\tpage: response.page,\n\t};\n}\n\nexport type SearchTokenMetadataQueryOptions =\n\tValuesOptional<FetchSearchTokenMetadataParams> & {\n\t\tquery?: StandardQueryOptions;\n\t};\n\nexport function searchTokenMetadataQueryOptions(\n\tparams: SearchTokenMetadataQueryOptions,\n) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\tconst initialPageParam = { page: 1, pageSize: 30 };\n\n\treturn infiniteQueryOptions({\n\t\tqueryKey: [...tokenKeys.metadata, 'search', params],\n\t\tqueryFn: ({ pageParam = initialPageParam }) =>\n\t\t\tfetchSearchTokenMetadata({\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tchainId: params.chainId!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tfilter: params.filter!,\n\t\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\t\tconfig: params.config!,\n\t\t\t\tpage: pageParam,\n\t\t\t}),\n\t\tinitialPageParam,\n\t\tgetNextPageParam: (lastPage) => {\n\t\t\tif (!lastPage.page?.more) return undefined;\n\t\t\treturn {\n\t\t\t\tpage: (lastPage.page.page || 1) + 1,\n\t\t\t\tpageSize: lastPage.page.pageSize || 20,\n\t\t\t};\n\t\t},\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n","import type { GetTokenSuppliesArgs, Page } from '@0xsequence/indexer';\nimport { infiniteQueryOptions } from '@tanstack/react-query';\nimport type { SdkConfig } from '../../types';\nimport {\n\tgetIndexerClient,\n\tLaosAPI,\n\ttokenKeys,\n\ttype ValuesOptional,\n} from '../_internal';\nimport type { StandardInfiniteQueryOptions } from '../types/query';\n\nexport interface FetchTokenSuppliesParams\n\textends Omit<GetTokenSuppliesArgs, 'contractAddress'> {\n\tchainId: number;\n\tcollectionAddress: string;\n\tconfig: SdkConfig;\n\tisLaos721?: boolean;\n\tpage?: Page;\n}\n\n/**\n * Fetches token supplies with support for both indexer and LAOS APIs\n * Uses the more efficient single-contract APIs from both services\n */\nexport async function fetchTokenSupplies(params: FetchTokenSuppliesParams) {\n\tconst { chainId, collectionAddress, config, isLaos721, ...rest } = params;\n\n\tif (isLaos721) {\n\t\tconst laosApi = new LaosAPI();\n\n\t\t// Convert indexer Page format to LAOS PaginationOptions format\n\t\tconst laosPage = rest.page\n\t\t\t? {\n\t\t\t\t\tsort:\n\t\t\t\t\t\trest.page.sort?.map((sortBy) => ({\n\t\t\t\t\t\t\tcolumn: sortBy.column,\n\t\t\t\t\t\t\torder: sortBy.order,\n\t\t\t\t\t\t})) || [],\n\t\t\t\t}\n\t\t\t: undefined;\n\n\t\tconst result = await laosApi.getTokenSupplies({\n\t\t\tchainId: chainId.toString(),\n\t\t\tcontractAddress: collectionAddress,\n\t\t\tincludeMetadata: rest.includeMetadata,\n\t\t\tpage: laosPage,\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tconst indexerClient = getIndexerClient(chainId, config);\n\n\tconst apiArgs: GetTokenSuppliesArgs = {\n\t\tcontractAddress: collectionAddress,\n\t\t...rest,\n\t};\n\n\tconst result = await indexerClient.getTokenSupplies(apiArgs);\n\treturn result;\n}\n\nexport type TokenSuppliesQueryOptions =\n\tValuesOptional<FetchTokenSuppliesParams> & {\n\t\tquery?: StandardInfiniteQueryOptions;\n\t};\n\nexport function tokenSuppliesQueryOptions(params: TokenSuppliesQueryOptions) {\n\tconst enabled = Boolean(\n\t\tparams.chainId &&\n\t\t\tparams.collectionAddress &&\n\t\t\tparams.config &&\n\t\t\t(params.query?.enabled ?? true),\n\t);\n\n\tconst initialPageParam = { page: 1, pageSize: 30 } as Page;\n\n\tconst queryFn = async ({ pageParam = initialPageParam }) =>\n\t\tfetchTokenSupplies({\n\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\tchainId: params.chainId!,\n\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\tcollectionAddress: params.collectionAddress!,\n\t\t\t// biome-ignore lint/style/noNonNullAssertion: The enabled check above ensures these are not undefined\n\t\t\tconfig: params.config!,\n\t\t\tisLaos721: params.isLaos721,\n\t\t\tincludeMetadata: params.includeMetadata,\n\t\t\tmetadataOptions: params.metadataOptions,\n\t\t\tpage: pageParam,\n\t\t});\n\n\treturn infiniteQueryOptions({\n\t\tqueryKey: [...tokenKeys.supplies, params],\n\t\tqueryFn,\n\t\tinitialPageParam,\n\t\tgetNextPageParam: (lastPage) =>\n\t\t\tlastPage.page?.more ? lastPage.page : undefined,\n\t\t...params.query,\n\t\tenabled,\n\t});\n}\n"],"mappings":"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"}